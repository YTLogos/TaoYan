<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Visualization | Tao Yan</title>
    <link>https://taoyan.netlify.app/categories/visualization/</link>
      <atom:link href="https://taoyan.netlify.app/categories/visualization/index.xml" rel="self" type="application/rss+xml" />
    <description>Visualization</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><copyright>© Tao Yan, 2018-2020</copyright><lastBuildDate>Wed, 14 Aug 2019 16:19:05 +0000</lastBuildDate>
    <image>
      <url>https://taoyan.netlify.app/img/pom-card.png</url>
      <title>Visualization</title>
      <link>https://taoyan.netlify.app/categories/visualization/</link>
    </image>
    
    <item>
      <title>gganimate:数据跳动</title>
      <link>https://taoyan.netlify.app/post/2019-08-14.gganimate%E4%B9%8B%E6%95%B0%E6%8D%AE%E8%B7%B3%E5%8A%A8/</link>
      <pubDate>Wed, 14 Aug 2019 16:19:05 +0000</pubDate>
      <guid>https://taoyan.netlify.app/post/2019-08-14.gganimate%E4%B9%8B%E6%95%B0%E6%8D%AE%E8%B7%B3%E5%8A%A8/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190815155922.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;简介&#34;&gt;简介&lt;/h2&gt;
&lt;p&gt;前面已经粗略学了一下&lt;code&gt;gganimate&lt;/code&gt;的部分语法，下面继续。&lt;/p&gt;
&lt;h2 id=&#34;example&#34;&gt;Example&lt;/h2&gt;
&lt;p&gt;使用数据集如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;head(gapminder)
# A tibble: 6 x 6
  country     continent  year lifeExp      pop gdpPercap
  &amp;lt;fct&amp;gt;       &amp;lt;fct&amp;gt;     &amp;lt;int&amp;gt;   &amp;lt;dbl&amp;gt;    &amp;lt;int&amp;gt;     &amp;lt;dbl&amp;gt;
1 Afghanistan Asia       1952    28.8  8425333      779.
2 Afghanistan Asia       1957    30.3  9240934      821.
3 Afghanistan Asia       1962    32.0 10267083      853.
4 Afghanistan Asia       1967    34.0 11537966      836.
5 Afghanistan Asia       1972    36.1 13079460      740.
6 Afghanistan Asia       1977    38.4 14880372      786.
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;static-plot&#34;&gt;Static plot&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;p &amp;lt;- ggplot(gapminder, aes(gdpPercap, lifeExp, size = pop, color = country)) +
  geom_point(show.legend = FALSE, alpha = 0.7) +
  scale_color_manual(values = country_colors) +
  scale_x_log10() +
  scale_size(range = c(5, 15)) +
  labs(x = &amp;quot;GDP Per Captita&amp;quot;, y = &amp;quot;Life Expectancy&amp;quot;)
p
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190815152713.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;这个&lt;code&gt;country_color&lt;/code&gt;调色版不错&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;随时间变化&#34;&gt;随时间变化&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;p + transition_time(year) +
  labs(title = &amp;quot;Year:{frame_time}&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190815153144.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;固定坐标轴&#34;&gt;固定坐标轴&lt;/h4&gt;
&lt;p&gt;由&lt;code&gt;view_follow&lt;/code&gt;实现&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;p + transition_time(year) +
  labs(title = &amp;quot;Year: {frame_time}&amp;quot;) +
  view_follow(fixed_y = TRUE)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190815153421.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;这里指固定y轴，可以看到x轴还是在变化，这个实际上用处不大&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;shadows_&#34;&gt;shadows_*&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;shadows: you want the animation to have memory.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;这个很有意思，使你的动画具有记忆，看看是如何实现的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5 id=&#34;shadow_wake&#34;&gt;shadow_wake()&lt;/h5&gt;
&lt;blockquote&gt;
&lt;p&gt;This shadow is meant to draw a small wake after data by showing the latest frames up to the current. You can choose to gradually diminish the size and/or opacity of the shadow. The length of the wake is not given in absolute frames as that would make the animation susceptible to changes in the framerate. Instead it is given as a proportion of the total length of the animation.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;可以看出，&lt;code&gt;shadow_wake()&lt;/code&gt;在&lt;code&gt;transition_time()&lt;/code&gt;的基础上进行了运动轨迹的记录。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;p + transition_time(year) +
  labs(title = &amp;quot;Year: {frame_time}&amp;quot;) +
  shadow_wake(wake_length = 0.1, alpha = FALSE)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190815154313.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;默认情况下，动画会从前一帧中留下轨迹阴影，&lt;code&gt;gganimate&lt;/code&gt;默认的是100帧动画，所以我们这里设置&lt;code&gt;wake_length=0.1&lt;/code&gt;,这样每个点后面会留下此动画前10个动画点阴影，并且大小、透明度都会下降。从上图我们可以看到这10个点之间有着明显的间隙，要修改这种间隙的话，最简单的方法就是通过&lt;code&gt;animate()&lt;/code&gt;中的&lt;code&gt;detail&lt;/code&gt;参数设置,另外我们可以看到这种动画不是很清晰漂亮，主要是我是在&lt;code&gt;Windows&lt;/code&gt;上实现的，&lt;code&gt;Windows&lt;/code&gt;默认使用&lt;code&gt;Windows GDI&lt;/code&gt;作为图形设备，以及&lt;code&gt;png()&lt;/code&gt;图形设备进行渲染。可以更改为&lt;code&gt;cairo&lt;/code&gt;进行渲染。如果你是&lt;code&gt;Mac&lt;/code&gt;用户的话，默认的渲染效果就非常棒了。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;p_wake &amp;lt;- p + transition_time(year) +
  labs(title = &amp;quot;Year: {frame_time}&amp;quot;) +
  shadow_wake(wake_length = 0.1, alpha = FALSE)

p_wake%&amp;gt;%animate(detail=5, type=&amp;quot;cairo&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190815155400.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;可以看到渲染效果非常棒！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;shadow_&lt;/code&gt;类函数十分好玩，通过修改各种参数，美感十足&lt;/p&gt;
&lt;h5 id=&#34;修改长度wake_length&#34;&gt;修改长度&lt;code&gt;wake_length&lt;/code&gt;&lt;/h5&gt;
&lt;pre&gt;&lt;code&gt;p_wake &amp;lt;- p + transition_time(year) +
  labs(title = &amp;quot;Year: {frame_time}&amp;quot;) +
  shadow_wake(wake_length = 0.2, alpha = FALSE)

p_wake%&amp;gt;%animate(detail=5, type=&amp;quot;cairo&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190815155922.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h5 id=&#34;修改大小size&#34;&gt;修改大小&lt;code&gt;size&lt;/code&gt;&lt;/h5&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;shadow_wake()&lt;/code&gt;默认留下尺寸减小并透明的尾迹，这里我们生成尾迹透明但不收缩的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;p_wake &amp;lt;- p + transition_time(year) +
  labs(title = &amp;quot;Year: {frame_time}&amp;quot;) +
  shadow_wake(wake_length = 0.1, size = NULL)

p_wake%&amp;gt;%animate(detail=5, type=&amp;quot;cairo&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190815160306.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h5 id=&#34;多参数控制&#34;&gt;多参数控制&lt;/h5&gt;
&lt;blockquote&gt;
&lt;p&gt;如果同时控制多参数，会如何呢?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;p_wake &amp;lt;- p + transition_time(year) +
  labs(title = &amp;quot;Year: {frame_time}&amp;quot;) +
  shadow_wake(wake_length = 0.2,
              size=15,
              alpha=NULL,
              #尾迹颜色为白色
              colour=&amp;quot;white&amp;quot;,
              #切换模式
              falloff = &amp;quot;quintic-in&amp;quot;
              )
p_wake%&amp;gt;%animate(detail=5, type=&amp;quot;cairo&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190815161507.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;有点诡异。。。。。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;shadow_mark&#34;&gt;&lt;code&gt;shadow_mark()&lt;/code&gt;&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;This shadow lets you show the raw data behind the current frame. Both past and/or future raw data can be shown and styled as you want.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;很简单，就是将每次出现的轨迹都留下来不消失&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;p_mark &amp;lt;- p + transition_time(year) +
  labs(title = &amp;quot;Year: {frame_time}&amp;quot;) +
  shadow_mark(alpha = 0.3, size = 0.5)
p_mark%&amp;gt;%animate(detail=5, type=&amp;quot;cairo&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190815161920.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;transition_reveal&#34;&gt;&lt;code&gt;transition_reveal()&lt;/code&gt;&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;transition_reveal() allows you to let data gradually appear, based on a given time dimension.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;这对于时间序列非常有用，顺着年-月-日进行动画，这也是为什么对于时间序列&lt;code&gt;transition_time()&lt;/code&gt;不好使。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;head(airquality)
  Ozone Solar.R Wind Temp Month Day
1    41     190  7.4   67     5   1
2    36     118  8.0   72     5   2
3    12     149 12.6   74     5   3
4    18     313 11.5   62     5   4
5    NA      NA 14.3   56     5   5
6    28      NA 14.9   66     5   6
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;airquality$month_name &amp;lt;- rep(c(&amp;quot;May&amp;quot;, &amp;quot;June&amp;quot;, &amp;quot;July&amp;quot;, &amp;quot;August&amp;quot;, &amp;quot;September&amp;quot;), c(31, 30, 31, 31, 30))

p_reveal &amp;lt;- ggplot(airquality, aes(Day, Temp, group = Month, color = month_name)) +
  geom_line() +
  geom_point(size=5) +
  geom_text(aes(label = month_name)) +
  transition_reveal(along = Day, range = , keep_last = F)
animate(p_reveal, nframes = 50, type=&amp;quot;cairo&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190815163452.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;sessioninfo&#34;&gt;SessionInfo&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;devtools::session_info()
- Session info ------------------------------------------------------------------
 setting  value                         
 version  R version 3.6.1 (2019-07-05)  
 os       Windows 10 x64                
 system   x86_64, mingw32               
 ui       RStudio                       
 language (EN)                          
 collate  Chinese (Simplified)_China.936
 ctype    Chinese (Simplified)_China.936
 tz       Asia/Taipei                   
 date     2019-08-15                    

- Packages ----------------------------------------------------------------------
 package     * version date       lib source                             
 assertthat    0.2.1   2019-03-21 [1] CRAN (R 3.6.0)                     
 backports     1.1.4   2019-04-10 [1] CRAN (R 3.6.0)                     
 broom         0.5.2   2019-04-07 [1] CRAN (R 3.6.0)                     
 callr         3.3.1   2019-07-18 [1] CRAN (R 3.6.1)                     
 cellranger    1.1.0   2016-07-27 [1] CRAN (R 3.6.0)                     
 cli           1.1.0   2019-03-19 [1] CRAN (R 3.6.0)                     
 colorspace    1.4-1   2019-03-18 [1] CRAN (R 3.6.0)                     
 crayon        1.3.4   2017-09-16 [1] CRAN (R 3.6.0)                     
 desc          1.2.0   2018-05-01 [1] CRAN (R 3.6.0)                     
 devtools      2.1.0   2019-07-06 [1] CRAN (R 3.6.1)                     
 digest        0.6.20  2019-07-04 [1] CRAN (R 3.6.1)                     
 dplyr       * 0.8.3   2019-07-04 [1] CRAN (R 3.6.1)                     
 fansi         0.4.0   2018-10-05 [1] CRAN (R 3.6.0)                     
 farver        1.1.0   2018-11-20 [2] CRAN (R 3.6.0)                     
 forcats     * 0.4.0   2019-02-17 [1] CRAN (R 3.6.0)                     
 fs            1.3.1   2019-05-06 [1] CRAN (R 3.6.0)                     
 gapminder   * 0.3.0   2017-10-31 [2] CRAN (R 3.6.0)                     
 generics      0.0.2   2018-11-29 [2] CRAN (R 3.6.0)                     
 gganimate   * 1.0.3   2019-04-02 [2] CRAN (R 3.6.0)                     
 ggplot2     * 3.2.1   2019-08-10 [1] CRAN (R 3.6.1)                     
 gifski        0.8.6   2018-09-28 [1] CRAN (R 3.6.0)                     
 glue          1.3.1   2019-03-12 [1] CRAN (R 3.6.0)                     
 grkstyle      0.0.1   2019-08-13 [1] Github (gadenbuie/grkstyle@a141d39)
 gtable        0.3.0   2019-03-25 [1] CRAN (R 3.6.0)                     
 haven         2.1.1   2019-07-04 [1] CRAN (R 3.6.1)                     
 hms           0.5.0   2019-07-09 [1] CRAN (R 3.6.1)                     
 httr          1.4.1   2019-08-05 [1] CRAN (R 3.6.1)                     
 jsonlite      1.6     2018-12-07 [1] CRAN (R 3.6.0)                     
 labeling      0.3     2014-08-23 [1] CRAN (R 3.6.0)                     
 lattice       0.20-38 2018-11-04 [2] CRAN (R 3.6.1)                     
 lazyeval      0.2.2   2019-03-15 [1] CRAN (R 3.6.0)                     
 lubridate     1.7.4   2018-04-11 [1] CRAN (R 3.6.0)                     
 magrittr      1.5     2014-11-22 [1] CRAN (R 3.6.0)                     
 memoise       1.1.0   2017-04-21 [1] CRAN (R 3.6.0)                     
 modelr        0.1.5   2019-08-08 [1] CRAN (R 3.6.1)                     
 munsell       0.5.0   2018-06-12 [1] CRAN (R 3.6.0)                     
 nlme          3.1-141 2019-08-01 [2] CRAN (R 3.6.1)                     
 pillar        1.4.2   2019-06-29 [1] CRAN (R 3.6.0)                     
 pkgbuild      1.0.4   2019-08-05 [1] CRAN (R 3.6.1)                     
 pkgconfig     2.0.2   2018-08-16 [1] CRAN (R 3.6.0)                     
 pkgload       1.0.2   2018-10-29 [2] CRAN (R 3.6.0)                     
 plyr          1.8.4   2016-06-08 [1] CRAN (R 3.6.0)                     
 png           0.1-7   2013-12-03 [1] CRAN (R 3.6.0)                     
 prettyunits   1.0.2   2015-07-13 [1] CRAN (R 3.6.0)                     
 processx      3.4.1   2019-07-18 [1] CRAN (R 3.6.1)                     
 progress      1.2.2   2019-05-16 [1] CRAN (R 3.6.0)                     
 ps            1.3.0   2018-12-21 [2] CRAN (R 3.6.0)                     
 purrr       * 0.3.2   2019-03-15 [1] CRAN (R 3.6.0)                     
 R6            2.4.0   2019-02-14 [1] CRAN (R 3.6.0)                     
 Rcpp          1.0.2   2019-07-25 [1] CRAN (R 3.6.1)                     
 readr       * 1.3.1   2018-12-21 [1] CRAN (R 3.6.0)                     
 readxl        1.3.1   2019-03-13 [1] CRAN (R 3.6.0)                     
 remotes       2.1.0   2019-06-24 [2] CRAN (R 3.6.0)                     
 rlang         0.4.0   2019-06-25 [1] CRAN (R 3.6.0)                     
 rprojroot     1.3-2   2018-01-03 [1] CRAN (R 3.6.0)                     
 rstudioapi    0.10    2019-03-19 [1] CRAN (R 3.6.0)                     
 rvest         0.3.4   2019-05-15 [1] CRAN (R 3.6.0)                     
 scales        1.0.0   2018-08-09 [1] CRAN (R 3.6.0)                     
 sessioninfo   1.1.1   2018-11-05 [2] CRAN (R 3.6.0)                     
 stringi       1.4.3   2019-03-12 [1] CRAN (R 3.6.0)                     
 stringr     * 1.4.0   2019-02-10 [1] CRAN (R 3.6.0)                     
 styler        1.1.1   2019-05-06 [1] CRAN (R 3.6.0)                     
 testthat      2.2.1   2019-07-25 [1] CRAN (R 3.6.1)                     
 tibble      * 2.1.3   2019-06-06 [1] CRAN (R 3.6.0)                     
 tidyr       * 0.8.3   2019-03-01 [1] CRAN (R 3.6.0)                     
 tidyselect    0.2.5   2018-10-11 [1] CRAN (R 3.6.0)                     
 tidyverse   * 1.2.1   2017-11-14 [1] CRAN (R 3.6.0)                     
 tweenr        1.0.1   2018-12-14 [2] CRAN (R 3.6.0)                     
 usethis       1.5.1   2019-07-04 [1] CRAN (R 3.6.1)                     
 utf8          1.1.4   2018-05-24 [1] CRAN (R 3.6.0)                     
 vctrs         0.2.0   2019-07-05 [1] CRAN (R 3.6.1)                     
 withr         2.1.2   2018-03-15 [1] CRAN (R 3.6.0)                     
 xml2          1.2.2   2019-08-09 [1] CRAN (R 3.6.1)                     
 zeallot       0.1.0   2018-01-28 [1] CRAN (R 3.6.0)                     

[1] C:/Tools/R/R_Library
[2] C:/Tools/R-3.6.1/library
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>gganimate:让数据动起来</title>
      <link>https://taoyan.netlify.app/post/2019-08-13.gganimate%E4%BD%BF%E6%95%B0%E6%8D%AE%E5%8A%A8%E8%B5%B7%E6%9D%A5/</link>
      <pubDate>Tue, 13 Aug 2019 16:19:05 +0000</pubDate>
      <guid>https://taoyan.netlify.app/post/2019-08-13.gganimate%E4%BD%BF%E6%95%B0%E6%8D%AE%E5%8A%A8%E8%B5%B7%E6%9D%A5/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/firework.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;简介&#34;&gt;简介&lt;/h2&gt;
&lt;p&gt;一年多以前我就写了篇R语言动画的博客:
&lt;a href=&#34;https://taoyan.netlify.com/post/2018-02-06.r%E8%AF%AD%E8%A8%80%E5%8F%AF%E8%A7%86%E5%8C%96%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%8Bgganimate%E5%8C%85/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;R语言可视化学习笔记之gganimate包&lt;/a&gt;。当时使用的是由
&lt;a href=&#34;https://github.com/dgrtwo&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;David Robinson&lt;/a&gt;开发的&lt;code&gt;gganimate&lt;/code&gt;。后面由
&lt;a href=&#34;https://github.com/thomasp85&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Thomas Lin Pedersen&lt;/a&gt;接手，推倒重来，拓展了很多动画语法。具体的可参考
&lt;a href=&#34;https://github.com/thomasp85&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Thomas Lin Pedersen&lt;/a&gt;的
&lt;a href=&#34;https://github.com/thomasp85/gganimate&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;gganimate的Github主页&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;gganimate语法&#34;&gt;gganimate语法&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;gganimate&lt;/code&gt;在&lt;code&gt;ggplot2&lt;/code&gt;的基础上进行了动画的拓展，所以可以完美兼容&lt;code&gt;ggplot2&lt;/code&gt;语法。主要有以下几类动画实现：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;transition_*()&lt;/code&gt;:定义数据如何伸展变化以及随时间关联&lt;/li&gt;
&lt;li&gt;&lt;code&gt;view_*()&lt;/code&gt;:定义位置比例如何随动画变化&lt;/li&gt;
&lt;li&gt;&lt;code&gt;shadow_*()&lt;/code&gt;:定义如何在给定时间点的基础上呈现来自其它时间点的数据&lt;/li&gt;
&lt;li&gt;&lt;code&gt;enter_*()/ exit_*()&lt;/code&gt;:定义新数据如何显示，旧数据如何消失&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ease_aes()&lt;/code&gt;:定义了动画期间不同的美学映射如何过渡切换等&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;examples&#34;&gt;Examples&lt;/h2&gt;
&lt;p&gt;安装该包的话可以直接从CRAN安装或者从Github上安装&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;if (!require(gganimate)) {
  install.packages(&amp;quot;gganimate&amp;quot;)
}
# or install.packages（&#39;devtools&#39;）
# devtools :: install_github（ &#39; thomasp85 / gganimate &#39;）
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;下面我们通过例子来理解各个语法&lt;/p&gt;
&lt;p&gt;先来看一下作者提供的一个小例子：&lt;/p&gt;
&lt;h4 id=&#34;example-1&#34;&gt;Example 1&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;if (!require(gapminder)) {
  install.packages(&amp;quot;gapminder&amp;quot;)
}
require(gapminder)
require(gganimate)
require(tidyverse)

ggplot(mtcars, aes(factor(cyl), mpg)) +
  geom_boxplot() +
  # 接下来就是gganimate实现动画的语法
  transition_states(
    gear,
    transition_length = 2,
    state_length = 1
  ) +
  enter_fade() +
  exit_shrink() +
  ease_aes(&amp;quot;sine-in-out&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/1.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;这里&lt;code&gt;gear&lt;/code&gt;是分类数据类型，所以使用&lt;code&gt;transition_states&lt;/code&gt;，并提供了用于转换和状态的相对时间长度，这里我的理解是transition也就是变化的相对时间长短以及transition后保持这个状态(view)的相对时间长短。&lt;code&gt;enter_fade()&lt;/code&gt;的作用是出现的时候有个过程，慢慢浮现，不是突然之间出现。&lt;code&gt;exit_shrink()&lt;/code&gt;我理解是消失的时候是慢慢萎缩消失的，不是突然之间就没了，中间有个过程。&lt;code&gt;ease_aes(&amp;quot;sine-in-out&amp;quot;)&lt;/code&gt;的作用是使动画之间的切换按照正弦曲线的方式变化，这里x轴是没变化的，只有y轴变化。&lt;/p&gt;
&lt;h4 id=&#34;example-2&#34;&gt;Example 2&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;head(gapminder)
# A tibble: 6 x 6
  country     continent  year lifeExp      pop gdpPercap
  &amp;lt;fct&amp;gt;       &amp;lt;fct&amp;gt;     &amp;lt;int&amp;gt;   &amp;lt;dbl&amp;gt;    &amp;lt;int&amp;gt;     &amp;lt;dbl&amp;gt;
1 Afghanistan Asia       1952    28.8  8425333      779.
2 Afghanistan Asia       1957    30.3  9240934      821.
3 Afghanistan Asia       1962    32.0 10267083      853.
4 Afghanistan Asia       1967    34.0 11537966      836.
5 Afghanistan Asia       1972    36.1 13079460      740.
6 Afghanistan Asia       1977    38.4 14880372      786.
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;ggplot(gapminder, aes(gdpPercap, lifeExp, size = pop, color = country)) +
  geom_point(alpha = 0.7, show.legend = FALSE) +
  scale_color_manual(values = country_colors) +
  scale_x_log10() +
  scale_size(range = c(2, 12)) +
  facet_wrap(~continent) +
  # 接下来就是gganimate实现动画的语法
  labs(title = &amp;quot;Year:{frame_time}&amp;quot;, x = &amp;quot;GDP per capita&amp;quot;, y = &amp;quot;life expectancy&amp;quot;) +
  transition_time(year) +
  ease_aes(&amp;quot;linear&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/2.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;这里是按照时间(Year)变化的，具有连续性，所以无需指定transition 和 state length，比如1980~1990十年的变化时间自然就是2000~2005五年的2倍。&lt;/p&gt;
&lt;h4 id=&#34;example-3&#34;&gt;Example 3&lt;/h4&gt;
&lt;p&gt;最后提供一个用R语言放烟花的
&lt;a href=&#34;https://www.data-imaginist.com/2019/gganimate-has-transitioned-to-a-state-of-release/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;例子&lt;/a&gt;，真正的烟花。。。。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# Firework colours
colours &amp;lt;- c(
  &amp;quot;lawngreen&amp;quot;,
  &amp;quot;gold&amp;quot;,
  &amp;quot;white&amp;quot;,
  &amp;quot;orchid&amp;quot;,
  &amp;quot;royalblue&amp;quot;,
  &amp;quot;yellow&amp;quot;,
  &amp;quot;orange&amp;quot;
)
# Produce data for a single blast
blast &amp;lt;- function(n, radius, x0, y0, time) {
  u &amp;lt;- runif(n, -1, 1)
  rho &amp;lt;- runif(n, 0, 2 * pi)
  x &amp;lt;- radius * sqrt(1 - u^2) * cos(rho) + x0
  y &amp;lt;- radius * sqrt(1 - u^2) * sin(rho) + y0
  id &amp;lt;- sample(.Machine$integer.max, n + 1)
  data.frame(
    x = c(x0, rep(x0, n), x0, x),
    y = c(0, rep(y0, n), y0, y),
    id = rep(id, 2),
    time = c((time - y0) * runif(1), rep(time, n), time, time + radius + rnorm(n)),
    colour = c(&amp;quot;white&amp;quot;, rep(sample(colours, 1), n), &amp;quot;white&amp;quot;, rep(sample(colours, 1), n)),
    stringsAsFactors = FALSE
  )
}
# Make 20 blasts
n &amp;lt;- round(rnorm(20, 30, 4))
radius &amp;lt;- round(n + sqrt(n))
x0 &amp;lt;- runif(20, -30, 30)
y0 &amp;lt;- runif(20, 40, 80)
time &amp;lt;- runif(20, max = 100)
fireworks &amp;lt;- Map(blast, n = n, radius = radius, x0 = x0, y0 = y0, time = time)
fireworks &amp;lt;- dplyr::bind_rows(fireworks)

p &amp;lt;- ggplot(fireworks) +
  geom_point(aes(x, y, colour = colour, group = id), size = 0.5, shape = 20) +
  scale_colour_identity() +
  coord_fixed(xlim = c(-65, 65), expand = FALSE, clip = &amp;quot;off&amp;quot;) +
  theme_void() +
  theme(
    plot.background = element_rect(fill = &amp;quot;black&amp;quot;, colour = NA),
    panel.border = element_blank()
  ) +
  # Here comes the gganimate code
  transition_components(time, exit_length = 20) +
  ease_aes(x = &amp;quot;sine-out&amp;quot;, y = &amp;quot;sine-out&amp;quot;) +
  shadow_wake(
    0.05,
    size = 3,
    alpha = TRUE,
    wrap = FALSE,
    falloff = &amp;quot;sine-in&amp;quot;,
    exclude_phase = &amp;quot;enter&amp;quot;
  ) +
  exit_recolour(colour = &amp;quot;black&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/firework.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Circos配置文件详解</title>
      <link>https://taoyan.netlify.app/post/2018-07-20.circos%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Fri, 20 Jul 2018 18:19:05 +0000</pubDate>
      <guid>https://taoyan.netlify.app/post/2018-07-20.circos%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E8%AF%A6%E8%A7%A3/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/CAl9leklEG.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;circos的配置文件准备&#34;&gt;Circos的配置文件准备&lt;/h2&gt;
&lt;p&gt;Circos的使用主要通过输入一个配置文件，改配置文件的主要内容以各种区块表示，大区块中可以包含小区快。区块中以&amp;quot;变量=值&amp;quot;的方式来进行参数的设定：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;links&amp;gt;
&amp;lt;link&amp;gt;
  file = data/set1.txt
  color = black
  ...
&amp;lt;/link&amp;gt;
&amp;lt;link&amp;gt;
  file = data/set2.txt
  color = red
  ...
&amp;lt;/link&amp;gt;
&amp;lt;/links&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;有些配置文件不需要改动，比如颜色、字体等，一般将这类信息保存到一个独立的配置文件中。只需要在主配置文件中声明包含这些独立的配置文件名及其路径，即表示使用这些配置信息。最常用的放置到主配置文件尾部的数行&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;设置生成的图片参数&#34;&gt;设置生成的图片参数&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;image&amp;gt;
&amp;lt;&amp;lt;include etc/image.conf&amp;gt;&amp;gt;
&amp;lt;/image&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;设置颜色字体填充模式的配置信息&#34;&gt;设置颜色、字体、填充模式的配置信息、&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;&amp;lt;include etc/colors_fonts_patterns.conf&amp;gt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;系统与debug参数&#34;&gt;系统与debug参数&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;&amp;lt;include etc/housekeeping.conf&amp;gt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;circos的使用参数&#34;&gt;Circos的使用参数&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;-version
查询Circos版本
-modules
检测perl模块
-conf &amp;lt;string&amp;gt;
输入主文件配置
-outputdir &amp;lt;string&amp;gt;
设置输出文件名，该参数的值以.png为后缀
-svg
生成svg结果文件
-nosvg
不生成svg结果文件
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;circos配置文件详解&#34;&gt;Circos配置文件详解&lt;/h2&gt;
&lt;h3 id=&#34;ideogram-block显示染色体&#34;&gt;ideogram block显示染色体&lt;/h3&gt;
&lt;p&gt;将染色体在圈图上展示出来，代表每个染色体的图形，称为ideogram。将以下配置信息放入一个单独的配置文件中，命名为ideogram.conf&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;ideogram&amp;gt;
##设定ideogram之间的间隙
  &amp;lt;spacing&amp;gt;
  #设置圈图染色体之间的间隙大小，以下设置为每个间隙大小为周长的0.5%
  default = 0.005r
#也可以设置指定的两条染色体之间的间隙
  #&amp;lt;pairwise chrA01;chrA02&amp;gt;
  #以下设定为两条染色体之间的间隙为圆的20度角
  #spacing = 20r
  #&amp;lt;/pairwise&amp;gt;
&amp;lt;/spacing&amp;gt;
##设定ideogram
#设定ideogram的位置，一下设定为ideograms在图离圆心的90%处
radius = 0.90r
#设定ideograms是否填充颜色。填充的颜色取决于karyotype指定的文件的最后一列
fill = yes
#设定ideograms轮廓的颜色及其厚度。如果没有该参数或设定其厚度为0，则表示没有轮廓
stroke_color = dgrey
stroke_thickness = 2p
## 设定label的显示信息
#设定是否显示label，label对应着karyotype文件的第四列，如果其值为yes，则必须要有label_radius参数来设定label的位置，否则会报错无法生成结果
show_label = yes
# 设定label的字体
label_font = default
# 设定label字体大小
label_size = 40
# 设定label的字体方向，yes是易于浏览的方向
label_parallel = yes
&amp;lt;/ideogram&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;ticks-block以刻度形式显示染色体大小&#34;&gt;ticks block以刻度形式显示染色体大小&lt;/h3&gt;
&lt;p&gt;将染色体的大小以刻度的形式在圈图上展示出来，将以下配置信息放入到一个独立的配置文件中，命名为ticks.conf&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#是否显示ticks
show_ticks = yes
#是否显示ticks的labels
show_ticks_labels = yes
#设定ticks
&amp;lt;ticks&amp;gt;
##ticks的设置
#设定ticks的位置
radius = 1r
#设置ticks的颜色
color = black
#设置ticks的厚度
thickness = 2p
#设置ticks&#39;label的值的计算，将改刻度对应的值*multiplier得到展示到圈图上的label值
multiplier = 1e-6
#label值的格式化方法，%d表示结果为整数；%f表示结果为浮点数；%.nf表示结果保留小数点后n位
format = %d
## 以下设置了2个ticks，前者是小刻度，后者是大刻度
&amp;lt;tick&amp;gt;
#设置每个刻度代表的长度，若其单位为u，则必须要设置chromosome_units参数，比如设置chromosome_units=1000000,则如下5u表示每个刻度代表5M长度的基因组序列
spacing = 5u
#设置tick的长度
size = 10p
&amp;lt;/tick&amp;gt;
&amp;lt;tick&amp;gt;
spacing = 25u
size = 15p
#由于设置的是大刻度，以下用于设置展示ticks&#39;label
show_label = yes
#设置ticks&#39;label字体大小
label_size= 20p
#设置ticks&#39;label离ticks的距离
label_offset = 10p
format = %d
&amp;lt;/tick&amp;gt;
&amp;lt;/ticks&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;links-block以曲线连接显示基因组内部之间的联系&#34;&gt;links block以曲线连接显示基因组内部之间的联系&lt;/h3&gt;
&lt;p&gt;基因组内部不同的序列区域之间有联系，将之使用线条进行连接，从而展示到圈图上，常见的是重复序列之间的连接，将以下配置信息放入到一个独立的配置文件中，命名为links.conf&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;links&amp;gt;
&amp;lt;link&amp;gt;
#指定link文件的路径，其文件格式为：
# chr1 start end chr2 start end
# chrA01 1 10 chrC01 10 45
#表明这两条染色体区域有联系，例如这个区域的序列长度&amp;gt;1kb且序列相似性&amp;gt;=90%
file = data/segdup.txt
#设置link曲线的半径
radius = 0.8r
#设置贝塞尔曲线半径，该值越大曲线越扁平，不好看
bezier_radius = 0r
#设置link曲线的颜色
color = black_a4
#设置link曲线的厚度
thickness = 2
&amp;lt;rules&amp;gt;
#以下可以设置多个rule，用来对link文件的每一行进行过滤或展示进行设定。每个rule都有一个condition参数，如果该condition为真，执行该block的内容，除非flow=continue，则不执行，检测下一个rule
#下面如果link文件中该行数据是染色体内部的link，则不进行展示
&amp;lt;rule&amp;gt;
condition = var(intrachr)
show = no
&amp;lt;/rule&amp;gt;
#设置link曲线的颜色与ideogram的颜色一致，否则为统一的颜色
&amp;lt;rule&amp;gt;
#若condition为真，则执行该block的内容
condition = 1
#设置link曲线的颜色为第二条染色体的颜色，对应着link文件中第四列数据对应的染色体的名称
color = eval(var(chrC02))
#虽然condition为真，但依然检测下一个rule
flow = continue
&amp;lt;/rule&amp;gt;
#如果link起始于chrA01，则其link曲线半径为0.99r
&amp;lt;rule&amp;gt;
contidition = from(chrA01)
radius1 = 0.99r
&amp;lt;/rule&amp;gt;
#如果link结束于chrC01，则其link曲线半径为0.99r
&amp;lt;rule&amp;gt;
condition = to(chrC01)
radius2 = 0.99r
&amp;lt;/rule&amp;gt;
&amp;lt;/rules&amp;gt;
&amp;lt;/link&amp;gt;
&amp;lt;/links&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;plots-block以直方图形式展示数据&#34;&gt;plots block以直方图形式展示数据&lt;/h3&gt;
&lt;p&gt;将基因组序列中的GC含量、表达量等以直方图的形式在圈图中展示出来，将以下配置信息放入到一个单独的配置文件中，命名为plots_histogram.conf，下面绘制了两个直方图，并分别添加背景或网格线。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;plot&amp;gt;
#设定直方图
type = histogram
#数据文件路径，4列
#chromosome start end data
# chrA01 0 2000000 155.0000
file = data/Bna1234.hist.txt
#设置直方图的位置，r1要比r0大，直方图的方向默许为向外
r1 = 0.88r
r0 = 0.81r
#直方图的填充颜色
fill_color = vdgrey
#默认下直方图轮廓厚度为1px，若不需要轮廓，将其设置为9，或者直接在etc/tracks/histogram.conf中修改
thickness = 0p
#直方图是由bins所构成的，若bins在坐标轴上不相连，最好设置不要将其bins连接到一起，例如：
# chrA01 10 20 0.5
# chrA01 30 40 0.25
#上述数据设置值为yes和no时，图形是不一样的
extend_bin = no
#以下添加rule，不在chrA01上添加直方图
&amp;lt;rules&amp;gt;
&amp;lt;&amp;lt;include exclude.chrA01.rule&amp;gt;&amp;gt;
&amp;lt;/rules&amp;gt;
#设置直方图的背景颜色
&amp;lt;backgrounds&amp;gt;
show = data
&amp;lt;background&amp;gt;
color = vvlgrey
&amp;lt;/background&amp;gt;
&amp;lt;background&amp;gt;
color = vlgrey
y0 = 0.2r
y1 = 0.5r
&amp;lt;/background&amp;gt;
&amp;lt;background&amp;gt;
color = lgrey
y0 = 0.5r
y1 = 0.8r
&amp;lt;/background&amp;gt;
&amp;lt;background&amp;gt;
color = grey
y0 = 0.8r
&amp;lt;/background&amp;gt;
&amp;lt;/backgrounds&amp;gt;
&amp;lt;/plot&amp;gt;
&amp;lt;plot&amp;gt;
type = histogram
#此处直方图的数据文件第4列是由多个由逗号分隔的数值，需要制作叠加的直方图
file = data/Bna.stacked.txt
r1 = 0.99r
r0 = 0.92r
#给4个值按顺序填充不同的颜色
fill_color = chrA01,chrA02,chrA03,chrA04
thickness = 0p
orientation = in
extend_bin = no
&amp;lt;rules&amp;gt;
&amp;lt;&amp;lt;include exclude.chrA01.rule&amp;gt;&amp;gt;
&amp;lt;/rules&amp;gt;
#在直方图中添加坐标网格线
&amp;lt;axes&amp;gt;
show = data
thickness = 1
color = lgrey
&amp;lt;axis&amp;gt;
spacing = 0.1r
&amp;lt;/axis&amp;gt;
&amp;lt;axis&amp;gt;
spacing = 0.2r
color = grey
&amp;lt;/axis&amp;gt;
&amp;lt;axis&amp;gt;
position = 0.5r
color = red
&amp;lt;/axis&amp;gt;
&amp;lt;axis&amp;gt;
position = 0.85r
color = green
thickness = 2
&amp;lt;/axis&amp;gt;
&amp;lt;/axes&amp;gt;
&amp;lt;/plot&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;plots-block以热图形式显示数据&#34;&gt;plots block以热图形式显示数据&lt;/h3&gt;
&lt;p&gt;基因组一个区域内有多组数据时，适合以热图的形式显示数据，比如基因表达量，将以下配置信息放入一个单独的配置文件中，命名为plots_heatmap.conf&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;plot&amp;gt;
#绘制heatmap
type = haetmap
#设置数据文件路径，文件有5列
# chrID start end data class
# chrA01 0 1999999 113.0000 id=chrA01
# chrA01 0 1999999 40.0000 id=chrA04
# chrA01 0 1999999 20.0000 id=chrA02
# chrA01 0 1999999 7.0000 id=chrA03
file = data/Bna.heatmap.txt
#设置图形所处位置
r1 = 0.89r
r0 = 0.88r
#设置热图的颜色，颜色为chrA01，以及相应带不同透明程度的5中颜色
color = chrA01_a5,chrA01_a4,chrA01_a3,chrA01_a2,chrA01_a1,chrA01
#设定scale_log_base参数，计算颜色的方法如下：
# f = (value - min)/(max - min)热图中每个方块代表着一个值，并给予相应的颜色标示，一系列的值[min,max]对应一系列的颜色c[n],i=0..N
#n=N*f**(1/scale_log_base)
#若scale_log_base = 1，则数值与颜色的变化是线性的
#若scale_log_base &amp;gt; 1，则颜色向小方向靠近
#若scale_log_base &amp;lt; 1，则颜色向大方向靠近
scale_log_base = 5
&amp;lt;rules&amp;gt;
&amp;lt;&amp;lt;include exclude.chrA01.rule&amp;gt;&amp;gt;
#仅显示id = chrA01的数据
&amp;lt;rule&amp;gt;
condition = var(id) ne &amp;quot;chrA01&amp;quot;
show = no
&amp;lt;/rule&amp;gt;
&amp;lt;/rules&amp;gt;
&amp;lt;plot&amp;gt;
 type = heatmap
 file = data/Bna.heatmap.txt
 r1 = 0.90r
 r0 = 0.89r
 color = chrA02_a5,chrA02_a4,chrA02_a3,chrA02_a2,chrA02_a1,chrA02
 scale_log_base = 5
&amp;lt;rules&amp;gt;
 &amp;lt;&amp;lt;include exclude.chrA01.rule&amp;gt;&amp;gt;
&amp;lt;rule&amp;gt;
 condition = var(id) ne &amp;quot;chrA02&amp;quot;
 show = no
 &amp;lt;/rule&amp;gt;
&amp;lt;/rules&amp;gt;
&amp;lt;/plot&amp;gt;
&amp;lt;plot&amp;gt;
 type = heatmap
 file = data/Bna.heatmap.txt
 r1 = 0.91r
 r0 = 0.90r
 color = chrA03_a5,chrA03_a4,chrA03_a3,chrA03_a2,chrA03_a1,chrA03
 scale_log_base = 5
&amp;lt;rules&amp;gt;
 &amp;lt;&amp;lt;include exclude.chrA01.rule&amp;gt;&amp;gt;
&amp;lt;rule&amp;gt;
 condition = var(id) ne &amp;quot;chrA03&amp;quot;
 show = no
 &amp;lt;/rule&amp;gt;
&amp;lt;/rules&amp;gt;
&amp;lt;/plot&amp;gt;
&amp;lt;plot&amp;gt;
 type = heatmap
 file = data/Bna.heatmap.txt
 r1 = 0.92r
 r0 = 0.91r
 color = chrA04_a5,chrA04_a4,chrA04_a3,chrA04_a2,chrA04_a1,chrA04
 scale_log_base = 5
&amp;lt;rules&amp;gt;
 &amp;lt;&amp;lt;include exclude.chrA01.rule&amp;gt;&amp;gt;
&amp;lt;rule&amp;gt;
 condition = var(id) ne &amp;quot;chrA04&amp;quot;
 show = no
 &amp;lt;/rule&amp;gt;
&amp;lt;/rules&amp;gt;
&amp;lt;/plot&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;plots-block以文本形式显示数据&#34;&gt;plots block以文本形式显示数据&lt;/h3&gt;
&lt;p&gt;若需要在圈图上显示基因名称，需要以文本形式展示，将以下配置信息放入到一个单独的配置文件中，命名为plots_text.conf&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;plot&amp;gt;
#表示文字
type = text
#数据文件路径
file = data/Bnagene.labels.txt
#显示在图形中的位置
r1 = 0.8r
r0 = 0.6r
#标签的字体
label_font = light
#标签大小
label_size = 12p 
#文字边缘的大小，设置较小则不同单词就可能会连在一块
#padding - text margin in angular direction
#rpadding - text margin in radial direction
rpadding = 5p
#设置是否需要在label前加一条线用来指出label的位置
show_links = no
link_dims = 0p,2p,5p,2p,2p
link_thickness = 2p
link_color = black
&amp;lt;rules&amp;gt;
&amp;lt;&amp;lt;include exclude.chrA01.rule&amp;gt;&amp;gt;
#设置rule，对label中含有字母a或b的特异性显示
&amp;lt;rule&amp;gt;
condition = var(value) =~ /a/i
label_font = bold
flow = continue
&amp;lt;/rule&amp;gt;
&amp;lt;rule&amp;gt;
condition = var(value) =~ /b/i
color = blue
&amp;lt;/rule&amp;gt;
&amp;lt;/rules&amp;gt;
&amp;lt;/plot&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;rules-block放置常用的规则配置&#34;&gt;rules block放置常用的规则配置&lt;/h3&gt;
&lt;p&gt;上述配置文件中，很多track没有在1号染色体上展示，需要设置如下规则信息，将之写入到文件exclude.chrA01.rule中&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;rule&amp;gt;
condition = on(chrA01)
show = no
&amp;lt;/rule&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;主配置文件&#34;&gt;主配置文件&lt;/h3&gt;
&lt;p&gt;在主配置文件circos.conf中，包含以上所有需要的配置文件信息，则可以会出所需要的track，此外，可以设置一些全局设置。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#指定染色体组型的文件，该文件有7列：
#chr - ID LABEL START END COLOR
#chr - chrA01 1 0 2154635789 chr1
#chr - chrA02 2 0 2451545665 chr2

karyotype = data/karyotype/karyotype.Bna.txt
#设置长度单位，以下设置表示1M长度的序列代表为1u
chromosomes_units = 1000000
#默认设置下是将karyotype文件中所有染色体都展示出来，当然也可以根据需要仅展示指定的染色体，使用如下的参数设置：

chromosomes_display_default = no
#以下参数设置指定的chromosome用于展示到圈图中，//中是一个正则表达式，匹配的chromosomes用于展示到圈图中，其匹配的对象是karyotype文件中的第3列，也可以直接列出需要展示的chromosomes，例如：chrA01;chrA02;chrA03;chrA04;chrA05

chromosomes = /chrA0[1-5]$/
#以下设置各个ideograms的大小，其总长度为1，chrA01的长度为0.5，chrA02,chrA03,chrA04这三条染色体的总长度为0.5，并且这三条染色体的长度是均匀分布的，注意前者的单位是r，后者使用了正则表达式匹配多条染色体，其单位于是为rn
chromosomes_scale = chrA01=0.5r,/chrA0[234]/=0.5rn
#使chrA02、chrA03和chrA04在圈图上展示的方向是相反的
chromosomes_reverse = /chrA0[234]/
#设置各个ideograms的颜色
chromosomes_color= chrA01=red,chrA02=orange,chrA03=green,chrA04=blue
#默认下在ideogram block中统一shezhileideograms的位置，可以使用此参数调整指定ideograms的位置
chromosomes_radius = chrA04:0.9r
#chromosomes_radius = chrA02:0.9r;chrA03:0.8r;chrA04:0.7r
#karyotype文件最后一行指定了各个chromosomes的颜色，而使用chromosomes_color参数也能修改颜色。使用如下方法进行颜色修改则更加直观，以下方式是对颜色重新定义。chr1,chr2,chr3,chr4对应着karyotype文件最后一行的值，代表着颜色的类型。此处使用color block来对其进行重新定义。注意重新定义的时候需要加符号*
&amp;lt;colors&amp;gt;
chr1* = red
chr2* = orange
chr3* = green
chr4* = blue
&amp;lt;/colors&amp;gt;
###绘制plot图,将上述设置好的配置文件添加进来
&amp;lt;plots&amp;gt;
&amp;lt;&amp;lt;include plots_histogram.conf&amp;gt;&amp;gt;
&amp;lt;&amp;lt;include plots_heatmap.conf&amp;gt;&amp;gt;
&amp;lt;&amp;lt;include plots_text.conf&amp;gt;&amp;gt;
&amp;lt;/plots&amp;gt;
&amp;lt;&amp;lt;include ideogram.conf&amp;gt;&amp;gt;
&amp;lt;&amp;lt;inlcude ticks.conf&amp;gt;&amp;gt;
&amp;lt;&amp;lt;include links.conf&amp;gt;&amp;gt;
#########################################################
#插入必须的但不常修改的标准参数
&amp;lt;image&amp;gt;
&amp;lt;&amp;lt;include etc/image.conf&amp;gt;&amp;gt;
&amp;lt;/image&amp;gt;
&amp;lt;&amp;lt;include etc/color_fonts_pattern.conf&amp;gt;&amp;gt;
&amp;lt;&amp;lt;include etc/housekeeping.conf&amp;gt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;使用circos命令绘图&#34;&gt;使用Circos命令绘图&lt;/h3&gt;
&lt;p&gt;先安装&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;##第一步先去官网下载最新版本
$ cd circos
$ tar zxf circos-tutorials-0.66.tgz
$ mv data data.bak
$ mv circos-tutorials-0.66/data/ ./
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;所有文件包括配置文件、数据文件等放置于当前目录文件夹中，运行circos绘图&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ ./bin/circos -conf circos.conf
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;这篇文章主要来自于
&lt;a href=&#34;https://www.plob.org/article/8424.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Circos的安装和简单使用&lt;/a&gt;,可以说是十分详细了。当然最好的文档还是官方提供的文档
&lt;a href=&#34;http://circos.ca/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Circos&lt;/a&gt;。&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>三种方法在地图上绘制网络图</title>
      <link>https://taoyan.netlify.app/post/2018-06-10.%E4%B8%89%E7%A7%8D%E6%96%B9%E6%B3%95%E5%9C%A8%E5%9C%B0%E5%9B%BE%E4%B8%8A%E7%BB%98%E5%88%B6%E7%BD%91%E7%BB%9C%E5%9B%BE/</link>
      <pubDate>Sun, 10 Jun 2018 18:19:05 +0000</pubDate>
      <guid>https://taoyan.netlify.app/post/2018-06-10.%E4%B8%89%E7%A7%8D%E6%96%B9%E6%B3%95%E5%9C%A8%E5%9C%B0%E5%9B%BE%E4%B8%8A%E7%BB%98%E5%88%B6%E7%BD%91%E7%BB%9C%E5%9B%BE/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/mA73K7a4gJ.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;p&gt;最近为了绘制几幅简单地图，查阅了一些资料，看到了&lt;strong&gt;Markus konrad&lt;/strong&gt;的
&lt;a href=&#34;https://datascience.blog.wzb.eu/2018/05/31/three-ways-of-visualizing-a-graph-on-a-map/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;帖子&lt;/a&gt;，非常赞。其中他的部分思路对于我们学习可视化很有帮助。&lt;/p&gt;
&lt;h2 id=&#34;准备&#34;&gt;准备&lt;/h2&gt;
&lt;p&gt;我们需要用到以下包&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;library(pacman)
p_load(assertthat,tidyverse,ggraph,igraph,ggmap)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;加载数据&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;nodes &amp;lt;- read.table(&amp;quot;country_coords.txt&amp;quot;, header = FALSE, quote = &amp;quot;&#39;&amp;quot;,sep = &amp;quot;&amp;quot;,col.names = c(&amp;quot;id&amp;quot;,&amp;quot;lon&amp;quot;,&amp;quot;lat&amp;quot;,&amp;quot;name&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;创建连接关系&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;set.seed(42)
min &amp;lt;- 1
max &amp;lt;- 4
n_categories &amp;lt;- 4
edges &amp;lt;- map_dfr(nodes$id, function(id){
  n &amp;lt;- floor(runif(1,min,max+1))
  to &amp;lt;- sample(1:max(nodes$id),n ,replace = FALSE)
  to &amp;lt;- to[to!=id]
  categories &amp;lt;- sample(1:n_categories,length(to), replace = TRUE)
  weight &amp;lt;- runif(length(to))
  data_frame(from=id, to=to, weight=weight, category=categories)
})
edges &amp;lt;- edges%&amp;gt;%mutate(category=as.factor(category))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;上面我们已经创建好了节点(node)以及连接(edge)，下面进行可视化&lt;/p&gt;
&lt;h2 id=&#34;可视化&#34;&gt;可视化&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;#生成图形结构
g &amp;lt;- graph_from_data_frame(edges, directed = FALSE, vertices = nodes)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;再额外定义四列用来绘制节点的起始位置&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;edges_for_plot &amp;lt;- edges%&amp;gt;%
  inner_join(nodes%&amp;gt;%select(id, lon, lat),by=c(&amp;quot;from&amp;quot;=&amp;quot;id&amp;quot;))%&amp;gt;%
  rename(x=lon, y=lat)%&amp;gt;%
  inner_join(nodes%&amp;gt;%select(id,lon,lat),by=c(&amp;quot;to&amp;quot;=&amp;quot;id&amp;quot;))%&amp;gt;%
  rename(xend=lon,yend=lat)
assert_that(nrow(edges_for_plot)==nrow(edges))
nodes$weight &amp;lt;- degree(g)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;下面再定义以下&lt;strong&gt;ggplot2&lt;/strong&gt;主题用来绘制地图&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;maptheme &amp;lt;- theme(
  panel.grid = element_blank(),
  axis.text = element_blank(),
  axis.ticks = element_blank(),
  axis.title = element_blank(),
  legend.position = &amp;quot;bottom&amp;quot;,
  panel.background = element_rect(fill=&amp;quot;#596673&amp;quot;),
  plot.margin = unit(c(0,0,0.5,0),&amp;quot;cm&amp;quot;)
)
country_shape &amp;lt;- geom_polygon(aes(x=long, y=lat, group=group),
                              data=map_data(&amp;quot;world&amp;quot;),
                              fill=&amp;quot;#CECECE&amp;quot;, color=&amp;quot;#515151&amp;quot;,size=0.1)
mapcoords &amp;lt;- coord_fixed(xlim=c(-150,180), ylim=c(-55,80))
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;方法一ggplot2&#34;&gt;方法一：ggplot2&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;ggplot(nodes)+country_shape+
  geom_curve(aes(x=x,y=y,xend=xend,yend=yend,color=category,size=weight),
             data=edges_for_plot,curvature = 0.33,alpha=0.5)+
  scale_size_continuous(guide = FALSE,range = c(0.25,2))+
  geom_point(aes(x=lon,y=lat,size=weight),shape=21,fill=&amp;quot;white&amp;quot;,color=&amp;quot;black&amp;quot;,stroke=0.5)+
  scale_size_continuous(guide = FALSE, range = c(1,6))+
  geom_text(aes(x=lon,y=lat,label=name),hjust=0,nudge_x = 1,nudge_y = 4,size=3,color=&amp;quot;black&amp;quot;,fontface=&amp;quot;bold&amp;quot;)+
  mapcoords+maptheme
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/mA73K7a4gJ.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;方法二ggplot2ggraph&#34;&gt;方法二：ggplot2+ggraph&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;nodes_pos &amp;lt;- nodes%&amp;gt;%
  select(lon,lat)%&amp;gt;%
  rename(x=lon,y=lat)
lay &amp;lt;- create_layout(g,&amp;quot;manual&amp;quot;,node.position=nodes_pos)
assert_that(nrow(lay)==nrow(nodes))
lay$weight &amp;lt;- degree(g)
ggraph(lay)+
  country_shape+
  geom_edge_arc(aes(color=category,edge_width=weight,circular=FALSE),
                data = edges_for_plot,curvature = 0.33,alpha=0.5)+
  scale_edge_width_continuous(range = c(0.5,2),guide=FALSE)+
  geom_node_point(aes(size=weight),shape=21,fill=&amp;quot;white&amp;quot;,color=&amp;quot;black&amp;quot;,stroke=0.5)+
  scale_size_continuous(range = c(1,6),guide = FALSE)+
  geom_node_text(aes(label=name),repel = TRUE, size=3,color=&amp;quot;black&amp;quot;,fontface=&amp;quot;bold&amp;quot;)+
  mapcoords+maptheme
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/ifLkLd15Jh.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;方法三图形叠加&#34;&gt;方法三：图形叠加&lt;/h3&gt;
&lt;p&gt;图形叠加，所以需要一个透明背景&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;theme_transp_overlay &amp;lt;- theme(
  panel.background = element_rect(fill=&amp;quot;transparent&amp;quot;,color=NA),
  plot.background = element_rect(fill=&amp;quot;transparent&amp;quot;,color=NA)
)
(p_base &amp;lt;- ggplot()+
  country_shape+
  mapcoords+
  maptheme)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/Cfe1Bkf0Ga.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(p_edges &amp;lt;- ggplot(edges_for_plot)+
  geom_curve(aes(x=x,y=y,xend=xend,yend=yend,color=category,size=weight),
             curvature = 0.33,alpha=0.33)+
  scale_size_continuous(guide = FALSE, range = c(0.5, 2)) + 
  mapcoords + maptheme + theme_transp_overlay +
  theme(legend.position = c(0.5, -0.1),
        legend.direction = &amp;quot;horizontal&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/BCI696DJ3I.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(p_nodes &amp;lt;- ggplot(nodes) +
  geom_point(aes(x = lon, y = lat, size = weight),
             shape = 21, fill = &amp;quot;white&amp;quot;, color = &amp;quot;black&amp;quot;,   
             stroke = 0.5) +
  scale_size_continuous(guide = FALSE, range = c(1, 6)) +    
  geom_text(aes(x = lon, y = lat, label = name),             
            hjust = 0, nudge_x = 1, nudge_y = 4,
            size = 3, color = &amp;quot;white&amp;quot;, fontface = &amp;quot;bold&amp;quot;) +
  mapcoords + maptheme + theme_transp_overlay)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/hab81AIbfa.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;p&gt;最后就是三图形叠加了（需要多次调整）&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;p &amp;lt;- p_base+
  annotation_custom(ggplotGrob(p_edges),ymin = -74)+
  annotation_custom(ggplotGrob(p_nodes),ymin = -74)
print(p)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/8HG1jbLaAf.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;info&#34;&gt;Info&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;sessionInfo()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## R version 3.5.0 (2018-04-23)
## Platform: x86_64-w64-mingw32/x64 (64-bit)
## Running under: Windows 10 x64 (build 16299)
## 
## Matrix products: default
## 
## locale:
## [1] LC_COLLATE=Chinese (Simplified)_China.936 
## [2] LC_CTYPE=Chinese (Simplified)_China.936   
## [3] LC_MONETARY=Chinese (Simplified)_China.936
## [4] LC_NUMERIC=C                              
## [5] LC_TIME=Chinese (Simplified)_China.936    
## 
## attached base packages:
## [1] stats     graphics  grDevices utils     datasets  methods   base     
## 
## other attached packages:
##  [1] maps_3.3.0         bindrcpp_0.2.2     ggmap_2.6.1       
##  [4] igraph_1.2.1       ggraph_1.0.1       forcats_0.3.0     
##  [7] stringr_1.3.1      dplyr_0.7.5        purrr_0.2.5       
## [10] readr_1.1.1        tidyr_0.8.1        tibble_1.4.2      
## [13] ggplot2_2.2.1.9000 tidyverse_1.2.1    assertthat_0.2.0  
## [16] pacman_0.4.6      
## 
## loaded via a namespace (and not attached):
##  [1] ggrepel_0.8.0     Rcpp_0.12.17      lubridate_1.7.4  
##  [4] lattice_0.20-35   png_0.1-7         rprojroot_1.3-2  
##  [7] digest_0.6.15     psych_1.8.4       ggforce_0.1.2    
## [10] R6_2.2.2          cellranger_1.1.0  plyr_1.8.4       
## [13] backports_1.1.2   evaluate_0.10.1   httr_1.3.1       
## [16] pillar_1.2.3      RgoogleMaps_1.4.1 rlang_0.2.1      
## [19] lazyeval_0.2.1    readxl_1.1.0      geosphere_1.5-7  
## [22] rstudioapi_0.7    rmarkdown_1.9     labeling_0.3     
## [25] proto_1.0.0       udunits2_0.13     foreign_0.8-70   
## [28] munsell_0.4.3     broom_0.4.4       compiler_3.5.0   
## [31] modelr_0.1.2      pkgconfig_2.0.1   mnormt_1.5-5     
## [34] htmltools_0.3.6   tidyselect_0.2.4  gridExtra_2.3    
## [37] viridisLite_0.3.0 crayon_1.3.4      withr_2.1.2      
## [40] MASS_7.3-49       grid_3.5.0        nlme_3.1-137     
## [43] jsonlite_1.5      gtable_0.2.0      magrittr_1.5     
## [46] units_0.5-1       scales_0.5.0      cli_1.0.0        
## [49] stringi_1.1.7     mapproj_1.2.6     reshape2_1.4.3   
## [52] viridis_0.5.1     sp_1.2-7          xml2_1.2.0       
## [55] rjson_0.2.19      tools_3.5.0       glue_1.2.0       
## [58] tweenr_0.1.5      jpeg_0.1-8        hms_0.4.2        
## [61] parallel_3.5.0    yaml_2.1.19       colorspace_1.3-2 
## [64] rvest_0.3.2       knitr_1.20        bindr_0.1.1      
## [67] haven_1.1.1
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>利用ComplexHeatmap绘制热图(一)</title>
      <link>https://taoyan.netlify.app/post/2018-04-08.%E5%88%A9%E7%94%A8complexheatmap%E7%BB%98%E5%88%B6%E7%83%AD%E5%9B%BE%E4%B8%80/</link>
      <pubDate>Sun, 08 Apr 2018 21:19:05 +0000</pubDate>
      <guid>https://taoyan.netlify.app/post/2018-04-08.%E5%88%A9%E7%94%A8complexheatmap%E7%BB%98%E5%88%B6%E7%83%AD%E5%9B%BE%E4%B8%80/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/6hE9lcGmjf.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;简介&#34;&gt;简介&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Complexheatmap&lt;/strong&gt;是由
&lt;a href=&#34;https://github.com/jokergoo&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;顾祖光&lt;/a&gt;博士创建的绘制热图的R包，在他的
&lt;a href=&#34;https://github.com/jokergoo/ComplexHeatmap&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;GitHub&lt;/strong&gt;&lt;/a&gt;有十分详细的&lt;code&gt;小品文(Vignettes)&lt;/code&gt;说明。&lt;strong&gt;Complexheatmap&lt;/strong&gt;是基于绘图系统&lt;strong&gt;grid&lt;/strong&gt;，因此如果有相应&lt;strong&gt;grid&lt;/strong&gt;的知识，学习起来应该更顺手！&lt;/p&gt;
&lt;h2 id=&#34;设计&#34;&gt;设计&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Complexheatmap&lt;/strong&gt;提供了一套非常灵活的方法用于多热图也就是热图列表布局以及支持自定义注释绘图，一个热图列表包含若干热图以及注释信息&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/FBA7hkj7a4.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;绘制单个热图&#34;&gt;绘制单个热图&lt;/h2&gt;
&lt;h3 id=&#34;安装&#34;&gt;安装&lt;/h3&gt;
&lt;p&gt;包的安装就不细说了，有不懂的可以翻我以前的博客，里面有详细的教程，下面直接给出安装代码不解释&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# installed from bioconductor
source(&amp;quot;http://bioconductor.org/biocLite.R&amp;quot;)
options(BioC_mirror=&amp;quot;http://mirrors.ustc.edu.cn/bioc/&amp;quot;)
biocLite(&amp;quot;ComplexHeatmap&amp;quot;)
# installed from GitHub
if(!require(devtools)){install.packages(&amp;quot;devtools&amp;quot;)}
devtools::install_github(&amp;quot;jokergoo/ComplexHeatmap&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;创建数据集&#34;&gt;创建数据集&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;pacman::p_load(ComplexHeatmap, circlize)
set.seed(7)
mat &amp;lt;- cbind(rbind(matrix(rnorm(16, -1),4), matrix(rnorm(32, 1), 8)), rbind(matrix(rnorm(24, 1), 4), matrix(rnorm(48, -1), 8)))
mat &amp;lt;- mat[sample(nrow(mat), nrow(mat)), sample(ncol(mat), ncol(mat))]
rownames(mat) &amp;lt;- paste0(&amp;quot;R&amp;quot;, 1:12)
colnames(mat) &amp;lt;- paste0(&amp;quot;C&amp;quot;, 1:10)
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;绘图&#34;&gt;绘图&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;ComplexHeatmap&lt;/strong&gt;绘制热图十分简单,使用默认参数&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;Heatmap(mat)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/KlK9dIHkk0.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;定制化&#34;&gt;定制化&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;ComplexHeatmap&lt;/strong&gt;十分灵活，可以自定义多种参数绘制热图&lt;/p&gt;
&lt;h3 id=&#34;颜色&#34;&gt;颜色&lt;/h3&gt;
&lt;p&gt;大多数情况下，绘制热图的矩阵都是连续性变量，通过提供颜色映射函数，我们可以自定义颜色，这主要是通过&lt;strong&gt;circlize&lt;/strong&gt;包中的&lt;code&gt;colorRamp2()&lt;/code&gt;函数来实现的,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;mat2 &amp;lt;- mat
mat2[1,1] &amp;lt;- 100000
Heatmap(mat2, col = colorRamp2(c(-3,0,3), c(&amp;quot;green&amp;quot;,&amp;quot;white&amp;quot;,&amp;quot;red&amp;quot;)), cluster_rows = FALSE, cluster_columns = FALSE)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/iGBchD1c3J.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;p&gt;可以看出，&lt;strong&gt;ComplexHeatmap&lt;/strong&gt;对于异常值也能显示出来，不会剔除掉&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;Heatmap(mat, col = rev(rainbow(10)))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/eHkcmJld54.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;p&gt;如果是离散型变量或者数值型、字符型变量的话，这时就需要特别指定颜色了&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;#离散型变量/数值型变量
discrete_mat &amp;lt;- matrix(sample(1:4, 100, replace = TRUE), 10, 10)
colors &amp;lt;- structure(circlize::rand_color(4), names=c(&amp;quot;1&amp;quot;,&amp;quot;2&amp;quot;,&amp;quot;3&amp;quot;,&amp;quot;4&amp;quot;))
Heatmap(discrete_mat, col = colors)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/C4IIB3Kebi.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;#字符型变量
character_mat &amp;lt;- matrix(sample(letters[1:4], 100, replace = TRUE), 10, 10)
colors &amp;lt;- structure(circlize::rand_color(4), names=letters[1:4])
Heatmap(character_mat, col = colors)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/DALJBe1FKb.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;p&gt;可以看出，对于离散型变量/数值型变量，默认对行/列进行聚类，而对于字符型变量，则不进行聚类&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;ComplexHeatmap&lt;/strong&gt;允许数据中含有&lt;code&gt;NA&lt;/code&gt;,只需要通过参数&lt;code&gt;na_col&lt;/code&gt;来控制&lt;code&gt;NA&lt;/code&gt;的颜色&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;mat_with_NA &amp;lt;- mat
mat_with_NA[sample(c(TRUE, FALSE), nrow(mat)*ncol(mat), replace = TRUE, prob = c(1,9))] &amp;lt;- NA
Heatmap(mat_with_NA, na_col = &amp;quot;orange&amp;quot;, clustering_distance_rows = &amp;quot;pearson&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/3d9FbLfE8b.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;ComplexHeatmap&lt;/strong&gt;默认使用
&lt;a href=&#34;https://en.wikipedia.org/wiki/Lab_color_space&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;LAB颜色空间(LAB color space)&lt;/a&gt;，&lt;code&gt;colorRamp2()&lt;/code&gt;提供了选择颜色空间的参数选项&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;f1 &amp;lt;- colorRamp2(seq(min(mat), max(mat), length=3), c(&amp;quot;blue&amp;quot;,&amp;quot;#EEEEEE&amp;quot;, &amp;quot;red&amp;quot;))
f2 &amp;lt;- colorRamp2(seq(min(mat), max(mat), length=3), c(&amp;quot;blue&amp;quot;,&amp;quot;#EEEEEE&amp;quot;, &amp;quot;red&amp;quot;), space = &amp;quot;RGB&amp;quot;)
H1 &amp;lt;- Heatmap(mat, col = f1, column_title = &amp;quot;LAB color space&amp;quot;)
H2 &amp;lt;- Heatmap(mat, col = f2, column_title = &amp;quot;RGB color space&amp;quot;)
H1+H2
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/6hE9lcGmjf.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;ComplexHeatmap&lt;/strong&gt;提供了多种颜色空间选项，可以根据自身数据不断调整，选取合适的颜色空间&lt;/p&gt;
&lt;h3 id=&#34;标题&#34;&gt;标题&lt;/h3&gt;
&lt;p&gt;一个热图的标题有：图标题、图例标题、行列标题等
&lt;code&gt;Heatmap&lt;/code&gt;里提供的&lt;code&gt;name&lt;/code&gt;参数默认的是图例的标题&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;Heatmap(mat, name = &amp;quot;legend&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/43dh8Jc9h3.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;p&gt;图里标题可以通过&lt;code&gt;heatmap_legend_param()&lt;/code&gt;进行修改&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;Heatmap(mat, heatmap_legend_param = list(title=&amp;quot;legend&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/fa86cCBd61.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;p&gt;行列标题&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;Heatmap(mat, name = &amp;quot;legend&amp;quot;, column_title = &amp;quot;Column&amp;quot;, row_title = &amp;quot;Row&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/i220513hIG.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;Heatmap(mat, name = &amp;quot;legend&amp;quot;, column_title = &amp;quot;Column&amp;quot;, column_title_side = &amp;quot;bottom&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/ECkjcEedbA.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;p&gt;如果需要修改图例参数，可以通过&lt;code&gt;gpar()&lt;/code&gt;参数&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;Heatmap(mat, name = &amp;quot;legend&amp;quot;,column_title = &amp;quot;Column&amp;quot;, row_title = &amp;quot;Row&amp;quot;, column_title_gp = gpar(fontsize=20, fontface=&amp;quot;bold&amp;quot;), row_title_gp = gpar(fontsize=20, fontface=&amp;quot;bold&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/bi079kAgg7.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;p&gt;标题可以旋转(水平或竖直)&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;Heatmap(mat, name = &amp;quot;legend&amp;quot;, row_title = &amp;quot;Row&amp;quot;, row_title_rot = 0)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/i9dA7DDbLJ.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;sessioninfo&#34;&gt;SessionInfo&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;sessionInfo()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## R version 3.4.4 (2018-03-15)
## Platform: x86_64-w64-mingw32/x64 (64-bit)
## Running under: Windows 10 x64 (build 16299)
## 
## Matrix products: default
## 
## locale:
## [1] LC_COLLATE=Chinese (Simplified)_China.936 
## [2] LC_CTYPE=Chinese (Simplified)_China.936   
## [3] LC_MONETARY=Chinese (Simplified)_China.936
## [4] LC_NUMERIC=C                              
## [5] LC_TIME=Chinese (Simplified)_China.936    
## 
## attached base packages:
## [1] grid      stats     graphics  grDevices utils     datasets  methods  
## [8] base     
## 
## other attached packages:
## [1] circlize_0.4.3        ComplexHeatmap_1.17.1
## 
## loaded via a namespace (and not attached):
##  [1] Rcpp_0.12.16         digest_0.6.15        rprojroot_1.3-2     
##  [4] backports_1.1.2      pacman_0.4.6         magrittr_1.5        
##  [7] evaluate_0.10.1      GlobalOptions_0.0.13 stringi_1.1.7       
## [10] GetoptLong_0.1.6     rmarkdown_1.9        RColorBrewer_1.1-2  
## [13] rjson_0.2.15         tools_3.4.4          stringr_1.3.0       
## [16] yaml_2.1.18          compiler_3.4.4       colorspace_1.3-2    
## [19] shape_1.4.4          htmltools_0.3.6      knitr_1.20
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>利用ggseqlogo绘制seqlogo图</title>
      <link>https://taoyan.netlify.app/post/2018-02-19.%E5%88%A9%E7%94%A8ggseqlogo%E7%BB%98%E5%88%B6seqlogo%E5%9B%BE/</link>
      <pubDate>Mon, 19 Feb 2018 12:19:05 +0000</pubDate>
      <guid>https://taoyan.netlify.app/post/2018-02-19.%E5%88%A9%E7%94%A8ggseqlogo%E7%BB%98%E5%88%B6seqlogo%E5%9B%BE/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/ggseq9.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;简介&#34;&gt;简介&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;sequence logo&lt;/strong&gt;图用来可视化一段序列某个位点的保守性，据根提供的序列组展示位点信息。这方面有很多在线小工具可以完成，这里使用R包
&lt;a href=&#34;https://github.com/omarwagih/ggseqlogo&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;ggseqlogo&lt;/strong&gt;&lt;/a&gt;进行可视化。&lt;/p&gt;
&lt;h2 id=&#34;安装&#34;&gt;安装&lt;/h2&gt;
&lt;p&gt;安装方式有两种&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#直接从CRAN中安装
install.packages(&amp;quot;ggseqlogo&amp;quot;)
#从GitHub中安装
devtools::install.github(&amp;quot;omarwagih/ggseqlogo&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;数据加载&#34;&gt;数据加载&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;ggseqlogo&lt;/strong&gt;提供了测试数据&lt;code&gt;ggseqlogo_sample&lt;/code&gt;。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;#加载包
library(ggplot2)
library(ggseqlogo)
#加载数据
data(ggseqlogo_sample)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;ggseqlogo_sample&lt;/code&gt;数据集是一个列表，里面包含了三个数据集：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;seqs_dna:12种转录因子的结合位点序列&lt;/li&gt;
&lt;li&gt;pfms_dna:四种转录因子的位置频率矩阵&lt;/li&gt;
&lt;li&gt;seqs_aa:一组激动酶底物磷酸化位点序列&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;#seqs_dna
head(seqs_dna)[1]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## $MA0001.1
##  [1] &amp;quot;CCATATATAG&amp;quot; &amp;quot;CCATATATAG&amp;quot; &amp;quot;CCATAAATAG&amp;quot; &amp;quot;CCATAAATAG&amp;quot; &amp;quot;CCATAAATAG&amp;quot;
##  [6] &amp;quot;CCATAAATAG&amp;quot; &amp;quot;CCATAAATAG&amp;quot; &amp;quot;CCATATATGG&amp;quot; &amp;quot;CCATATATGG&amp;quot; &amp;quot;CCAAATATAG&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;#pfms_dna
head(pfms_dna)[1]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## $MA0018.2
##   [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8]
## A    0    0   11    0    1    0    2    8
## C    1    1    0    9    0    3    7    0
## G    1   10    0    2   10    0    1    1
## T    9    0    0    0    0    8    1    2
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;#seqs_aa
head(seqs_aa)[1]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## $AKT1
##   [1] &amp;quot;VVGARRSSWRVVSSI&amp;quot; &amp;quot;GPRSRSRSRDRRRKE&amp;quot; &amp;quot;LLCLRRSSLKAYGNG&amp;quot;
##   [4] &amp;quot;TERPRPNTFIIRCLQ&amp;quot; &amp;quot;LSRERVFSEDRARFY&amp;quot; &amp;quot;PSTSRRFSPPSSSLQ&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;可视化&#34;&gt;可视化&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;ggplot()+geom_logo(seqs_dna$MA0001.1)+theme_logo()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/ggseq1.png?raw=true&#34; alt=&#34;&#34;&gt;
&lt;strong&gt;ggseqlogo&lt;/strong&gt;提供了一个直接绘图的函数&lt;code&gt;ggseqlogo()&lt;/code&gt;,这是一个包装函数。下面命令结果同上面的。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ggseqlogo(seqs_dna$MA0001.1)
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;输入格式&#34;&gt;输入格式&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;ggseqlogo&lt;/strong&gt;支持以下几种类型数据输入：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;序列&lt;/li&gt;
&lt;li&gt;矩阵&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;下面是使用数据中的位置频率矩阵生成的seqlogo&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;ggseqlogo(pfms_dna$MA0018.2)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/ggseq2.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;方法&#34;&gt;方法&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;ggseqlogo&lt;/strong&gt;通过&lt;code&gt;method&lt;/code&gt;选项支持两种序列标志生成方法：&lt;code&gt;bits&lt;/code&gt;和&lt;code&gt;probability&lt;/code&gt;。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;p1 &amp;lt;- ggseqlogo(seqs_dna$MA0001.1, method=&amp;quot;bits&amp;quot;)
p2 &amp;lt;- ggseqlogo(seqs_dna$MA0001.1, method=&amp;quot;prob&amp;quot;)
gridExtra::grid.arrange(p1,p2)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/ggseq3.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;序列类型&#34;&gt;序列类型&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;ggseqlogo&lt;/strong&gt;支持氨基酸、DNA和RNA序列类型，默认情况下&lt;strong&gt;ggseqlogo&lt;/strong&gt;会自动识别数据提供的序列类型，也可以通过&lt;code&gt;seq_type&lt;/code&gt;选项直接指定序列类型。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;ggseqlogo(seqs_aa$AKT1, seq_type=&amp;quot;aa&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/ggseq4.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;自定义字母&#34;&gt;自定义字母&lt;/h2&gt;
&lt;p&gt;通过&lt;code&gt;namespace&lt;/code&gt;选项来定义自己想要的字母类型&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;#用数字来代替碱基
seqs_numeric &amp;lt;- chartr(&amp;quot;ATGC&amp;quot;, &amp;quot;1234&amp;quot;, seqs_dna$MA0001.1)
ggseqlogo(seqs_numeric, method=&amp;quot;prob&amp;quot;, namespace=1:4)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/ggseq5.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;配色&#34;&gt;配色&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;ggseqlogo&lt;/strong&gt;可以使用&lt;code&gt;col_scheme&lt;/code&gt;参数来设置配色方案，具体可参考&lt;code&gt;?list_col_schemes&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;ggseqlogo(seqs_dna$MA0001.1, col_scheme=&amp;quot;base_pairing&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/ggseq6.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;自定义配色&#34;&gt;自定义配色&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;ggseqlogo&lt;/strong&gt;提供函数&lt;code&gt;make_col_scheme&lt;/code&gt;来自定义离散或者连续配色方案&lt;/p&gt;
&lt;h3 id=&#34;离散配色&#34;&gt;离散配色&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;csl &amp;lt;- make_col_scheme(chars = c(&amp;quot;A&amp;quot;,&amp;quot;T&amp;quot;, &amp;quot;C&amp;quot;, &amp;quot;G&amp;quot;), groups = c(&amp;quot;gr1&amp;quot;,&amp;quot;gr1&amp;quot;, &amp;quot;gr2&amp;quot;,&amp;quot;gr2&amp;quot;), cols = c(&amp;quot;purple&amp;quot;,&amp;quot;purple&amp;quot;,&amp;quot;blue&amp;quot;,&amp;quot;blue&amp;quot;))
ggseqlogo(seqs_dna$MA0001.1,col_scheme=csl)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/ggseq7.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;连续配色&#34;&gt;连续配色&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;cs2 &amp;lt;- make_col_scheme(chars = c(&amp;quot;A&amp;quot;, &amp;quot;T&amp;quot;, &amp;quot;C&amp;quot;, &amp;quot;G&amp;quot;), values = 1:4)
ggseqlogo(seqs_dna$MA0001.1, col_scheme=cs2)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/ggseq8.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;同时绘制多个序列标志&#34;&gt;同时绘制多个序列标志&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;ggseqlogo(seqs_dna, ncol = 4)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/ggseq9.png?raw=true&#34; alt=&#34;&#34;&gt;
上述命令实际上等同于&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ggplot()+geom_logo(seqs_dna)+theme_logo()+
  facet_wrap(~seq_group,ncol = 4,scales = &amp;quot;free_x&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;自定义高度&#34;&gt;自定义高度&lt;/h2&gt;
&lt;p&gt;通过创建矩阵可以生成每个标志的高度，还可以有负值高度&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;set.seed(1234)
custom_mat &amp;lt;- matrix(rnorm(20), nrow = 4, dimnames = list(c(&amp;quot;A&amp;quot;,&amp;quot;T&amp;quot;,&amp;quot;C&amp;quot;, &amp;quot;G&amp;quot;)))
ggseqlogo(custom_mat,method=&amp;quot;custom&amp;quot;,seq_type=&amp;quot;dna&amp;quot;)+
  ylab(&amp;quot;my custom height&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/ggseq10.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;字体&#34;&gt;字体&lt;/h2&gt;
&lt;p&gt;可以通过&lt;code&gt;font&lt;/code&gt;参数来设置字体，具体可参考&lt;code&gt;?list_fonts&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;fonts &amp;lt;- list_fonts(F)
p_list &amp;lt;- lapply(fonts, function(f){
  ggseqlogo(seqs_dna$MA0001.1,font=f)+ggtitle(f)
})
do.call(gridExtra::grid.arrange,c(p_list, ncol=4))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/ggseq11.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;注释&#34;&gt;注释&lt;/h2&gt;
&lt;p&gt;注释的话跟&lt;strong&gt;ggplot2&lt;/strong&gt;是一样的&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;ggplot()+
  annotate(&amp;quot;rect&amp;quot;, xmin = 0.5, xmax = 3.5, ymin = -0.05, ymax = 1.9, alpha=0.1, col=&amp;quot;black&amp;quot;, fill=&amp;quot;yellow&amp;quot;)+
  geom_logo(seqs_dna$MA0001.1, stack_width = 0.9)+
  annotate(&amp;quot;segment&amp;quot;, x=4, xend = 8, y=1.2, yend = 1.2, size=2)+
  annotate(&amp;quot;text&amp;quot;, x=6, y=1.3, label=&amp;quot;Text annotation&amp;quot;)+
  theme_logo()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/ggseq12.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;图形组合&#34;&gt;图形组合&lt;/h2&gt;
&lt;p&gt;将&lt;strong&gt;ggseqlogo&lt;/strong&gt;生成的图形与&lt;strong&gt;ggplot2&lt;/strong&gt;生成的图形组合在一起。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;p1 &amp;lt;- ggseqlogo(seqs_dna$MA0008.1)+theme(axis.text.x = element_blank())
aln &amp;lt;- data.frame(
  letter=strsplit(&amp;quot;AGATAAGATGATAAAAAGATAAGA&amp;quot;, &amp;quot;&amp;quot;)[[1]],
  species=rep(c(&amp;quot;a&amp;quot;,&amp;quot;b&amp;quot;,&amp;quot;c&amp;quot;), each=8),
  x=rep(1:8,3)
)
aln$mut &amp;lt;- &amp;quot;no&amp;quot;
aln$mut[c(2,15,20,23)]=&amp;quot;yes&amp;quot;
p2 &amp;lt;- ggplot(aln, aes(x, species)) +
  geom_text(aes(label=letter, color=mut, size=mut)) + 
  scale_x_continuous(breaks=1:10, expand = c(0.105, 0)) + xlab(&#39;&#39;) + 
  scale_color_manual(values=c(&#39;black&#39;, &#39;red&#39;)) + 
  scale_size_manual(values=c(5, 6)) + 
  theme_logo() + 
  theme(legend.position = &#39;none&#39;, axis.text.x = element_blank()) 
bp_data &amp;lt;- data.frame(
  x=1:8, 
  conservation=sample(1:100, 8)
)
p3 &amp;lt;- ggplot(bp_data, aes(x, conservation))+
  geom_bar(stat = &amp;quot;identity&amp;quot;, fill=&amp;quot;grey&amp;quot;)+
  theme_logo()+
  scale_x_continuous(breaks = 1:10, expand = c(0.105, 0))+
  xlab(&amp;quot;&amp;quot;)
suppressMessages(require(cowplot))
plot_grid(p1,p2,p3,ncol = 1, align = &amp;quot;v&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/ggseq13.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;sessioninfo&#34;&gt;SessionInfo&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;sessionInfo()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## R version 3.4.3 (2017-11-30)
## Platform: x86_64-pc-linux-gnu (64-bit)
## Running under: Ubuntu 17.10
## 
## Matrix products: default
## BLAS: /usr/lib/x86_64-linux-gnu/atlas/libblas.so.3.10.3
## LAPACK: /usr/lib/x86_64-linux-gnu/atlas/liblapack.so.3.10.3
## 
## locale:
##  [1] LC_CTYPE=zh_CN.UTF-8       LC_NUMERIC=C              
##  [3] LC_TIME=zh_CN.UTF-8        LC_COLLATE=zh_CN.UTF-8    
##  [5] LC_MONETARY=zh_CN.UTF-8    LC_MESSAGES=zh_CN.UTF-8   
##  [7] LC_PAPER=zh_CN.UTF-8       LC_NAME=C                 
##  [9] LC_ADDRESS=C               LC_TELEPHONE=C            
## [11] LC_MEASUREMENT=zh_CN.UTF-8 LC_IDENTIFICATION=C       
## 
## attached base packages:
## [1] stats     graphics  grDevices utils     datasets  methods   base     
## 
## other attached packages:
## [1] cowplot_0.9.2 ggseqlogo_0.1 ggplot2_2.2.1
## 
## loaded via a namespace (and not attached):
##  [1] Rcpp_0.12.15     knitr_1.20       magrittr_1.5     munsell_0.4.3   
##  [5] colorspace_1.3-2 rlang_0.2.0      stringr_1.3.0    plyr_1.8.4      
##  [9] tools_3.4.3      grid_3.4.3       gtable_0.2.0     htmltools_0.3.6 
## [13] yaml_2.1.16      lazyeval_0.2.1   rprojroot_1.3-2  digest_0.6.15   
## [17] tibble_1.4.2     gridExtra_2.3    evaluate_0.10.1  rmarkdown_1.8   
## [21] labeling_0.3     stringi_1.1.6    compiler_3.4.3   pillar_1.1.0    
## [25] scales_0.5.0     backports_1.1.2
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>创建属于自己的调色板</title>
      <link>https://taoyan.netlify.app/post/2018-02-10.%E5%88%9B%E5%BB%BA%E5%B1%9E%E4%BA%8E%E8%87%AA%E5%B7%B1%E7%9A%84%E8%B0%83%E8%89%B2%E6%9D%BF/</link>
      <pubDate>Sat, 10 Feb 2018 12:19:05 +0000</pubDate>
      <guid>https://taoyan.netlify.app/post/2018-02-10.%E5%88%9B%E5%BB%BA%E5%B1%9E%E4%BA%8E%E8%87%AA%E5%B7%B1%E7%9A%84%E8%B0%83%E8%89%B2%E6%9D%BF/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/palette.jpeg?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;简介&#34;&gt;简介&lt;/h2&gt;
&lt;p&gt;我们知道发表文章的时候不同杂志的配色方案是不同的，如果参加工作的话，不同公司的配色方案也是不一样的，每个人的色觉也是不一样的，所以如果可以创建属于自己的配色方案的话以后可视化就可以随心所欲了。&lt;/p&gt;
&lt;h2 id=&#34;方案&#34;&gt;方案&lt;/h2&gt;
&lt;p&gt;接下来我将基于下面的几种颜色创建属于我自己的调色板&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/color.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;主要有以下几个方面：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;将颜色与其对应的十六进制矢量联系起来&lt;/li&gt;
&lt;li&gt;创建访问十六进制矢量的函数&lt;/li&gt;
&lt;li&gt;调色板命名&lt;/li&gt;
&lt;li&gt;访问调用调色板&lt;/li&gt;
&lt;li&gt;创建兼容&lt;strong&gt;ggplot2&lt;/strong&gt;的尺度函数&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;首先我们创建一个颜色变量&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;library(ggplot2)
theme_set(theme_minimal())
my_colors &amp;lt;- c(
  `purple` = &amp;quot;#7b0099&amp;quot;,
  `yellow` = &amp;quot;#ff9900&amp;quot;,
  `black`  = &amp;quot;#221f1f&amp;quot;,
  `white`  = &amp;quot;#f5f5f1&amp;quot;,
  `red`    = &amp;quot;#e50914&amp;quot;
)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;后续如果需要对颜色进行修改或添加都可以在这个颜色变量中进行。
下面创建一个可以从该变量中提取颜色对应的十六进制的函数&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;#&#39; Function to extract my_colors as hex codes
#&#39;
#&#39; @param ... Character names of my_colors
#&#39;
my_cols &amp;lt;- function(...){
  cols &amp;lt;- c(...)
  
  if (is.null(cols))
    return(my_colors)
  my_colors[cols]
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;此时我们可以十分方便获取颜色的十六进制，下面演示一下：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;my_cols()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    purple    yellow     black     white       red 
## &amp;quot;#7b0099&amp;quot; &amp;quot;#ff9900&amp;quot; &amp;quot;#221f1f&amp;quot; &amp;quot;#f5f5f1&amp;quot; &amp;quot;#e50914&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;my_cols(&amp;quot;purple&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    purple 
## &amp;quot;#7b0099&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;my_cols(&amp;quot;purple&amp;quot;,&amp;quot;yellow&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    purple    yellow 
## &amp;quot;#7b0099&amp;quot; &amp;quot;#ff9900&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;my_cols(&amp;quot;yellow&amp;quot;,&amp;quot;purple&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    yellow    purple 
## &amp;quot;#ff9900&amp;quot; &amp;quot;#7b0099&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;此时我们可以在&lt;strong&gt;ggplot2&lt;/strong&gt;中调用这些颜色&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;#使用gapminder包中的数据集gapminder来演示
library(gapminder)
head(gapminder)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 6 x 6
##   country     continent  year lifeExp      pop gdpPercap
##   &amp;lt;fct&amp;gt;       &amp;lt;fct&amp;gt;     &amp;lt;int&amp;gt;   &amp;lt;dbl&amp;gt;    &amp;lt;int&amp;gt;     &amp;lt;dbl&amp;gt;
## 1 Afghanistan Asia       1952    28.8  8425333       779
## 2 Afghanistan Asia       1957    30.3  9240934       821
## 3 Afghanistan Asia       1962    32.0 10267083       853
## 4 Afghanistan Asia       1967    34.0 11537966       836
## 5 Afghanistan Asia       1972    36.1 13079460       740
## 6 Afghanistan Asia       1977    38.4 14880372       786
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;ggplot(gapminder, aes(gdpPercap, lifeExp))+
  geom_point(color=my_cols(&amp;quot;purple&amp;quot;), size=2, alpha=0.8)+
  scale_x_log10()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/1-1.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;创建调色板&#34;&gt;创建调色板&lt;/h2&gt;
&lt;p&gt;调色板就是一个颜色列表方便我们后面使用，将各种颜色组合搭配&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;my_palettes &amp;lt;- list(
  `main`  = my_cols(&amp;quot;purple&amp;quot;,&amp;quot;yellow&amp;quot;,&amp;quot;red&amp;quot;),
  `cool`  = my_cols(&amp;quot;purple&amp;quot;,&amp;quot;yellow&amp;quot;),
  `hot`   = my_cols(&amp;quot;yellow&amp;quot;,&amp;quot;black&amp;quot;,&amp;quot;red&amp;quot;),
  `mixed` = my_cols(&amp;quot;purple&amp;quot;,&amp;quot;yellow&amp;quot;,&amp;quot;white&amp;quot;,&amp;quot;red&amp;quot;),
  `bw`    = my_cols(&amp;quot;black&amp;quot;,&amp;quot;white&amp;quot;)
)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;在这个颜色列表中实际上我们创建了好几种颜色组合，下面创建一个函数来访问并调用它们&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;#&#39; Return function to interpolate a my_palettes
#&#39;
#&#39; @param palette Character name of palette in my_palettes
#&#39; @param reverse Boolean indicating whether the palette should be reversed
#&#39; @param ... Additional arguments to pass to colorRampPalette()
#&#39;
my_pal &amp;lt;- function(palette=&amp;quot;main&amp;quot;, reverse=FALSE, ...){
  pal &amp;lt;- my_palettes[[palette]]
  if (reverse) pal &amp;lt;- rev(pal)
  colorRampPalette(pal, ...)
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;该函数通过不同颜色组合名称从列表中获取一个颜色组合（默认条件下是&lt;code&gt;main&lt;/code&gt;），同时可以设置是否颠倒颜色顺序，之后传递给函数colorRampPaette()创建调色板。因此其返回的是一个函数。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;my_pal(&amp;quot;cool&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## function (n) 
## {
##     x &amp;lt;- ramp(seq.int(0, 1, length.out = n))
##     if (ncol(x) == 4L) 
##         rgb(x[, 1L], x[, 2L], x[, 3L], x[, 4L], maxColorValue = 255)
##     else rgb(x[, 1L], x[, 2L], x[, 3L], maxColorValue = 255)
## }
## &amp;lt;bytecode: 0x55ade91b4b70&amp;gt;
## &amp;lt;environment: 0x55ade91b3e20&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;通过这个函数可以基于调色板返回不同数目的颜色，进而可以在原始颜色之间创建多级颜色梯度&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;my_pal(&amp;quot;cool&amp;quot;)(10)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  [1] &amp;quot;#7B0099&amp;quot; &amp;quot;#891188&amp;quot; &amp;quot;#982277&amp;quot; &amp;quot;#A73266&amp;quot; &amp;quot;#B54455&amp;quot; &amp;quot;#C45544&amp;quot; &amp;quot;#D36533&amp;quot;
##  [8] &amp;quot;#E17622&amp;quot; &amp;quot;#F08810&amp;quot; &amp;quot;#FF9900&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;pie(rep(1,10), col = my_pal(&amp;quot;cool&amp;quot;)(10))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/2-1.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;上图展示的10种颜色就是&lt;code&gt;my_pal(&amp;quot;cool&amp;quot;)(10)&lt;/code&gt;返回的十六进制对应的颜色，这就为&lt;strong&gt;ggplot2&lt;/strong&gt;中的尺度颜色函数创造了可能&lt;/p&gt;
&lt;h2 id=&#34;scales-for-ggplot2&#34;&gt;Scales for ggplot2&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;ggplot2&lt;/strong&gt;中颜色映射有&lt;code&gt;color&lt;/code&gt;和&lt;code&gt;fill&lt;/code&gt;即颜色和填充。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;#&#39; Color scale constructor for my_colors
#&#39; 
#&#39; @param palette Character name of palette in my_palettes
#&#39; @param discrete Boolean indicating whether color aesthetic is discrete or not
#&#39; @param reverse Boolean indicating whether the palette should be reversed
#&#39; @param ... Additional arguments passed to discrete_scale() or scale_color_gradientn(), used #&#39; #&#39; respectively when discrete is TRUE or FALSE
#&#39; 
scale_color_my &amp;lt;- function(palette=&amp;quot;main&amp;quot;, discrete=TRUE, reverse=FALSE, ...){
  pal &amp;lt;- my_pal(palette = palette, reverse = reverse)
  
  if (discrete){
    discrete_scale(&amp;quot;colour&amp;quot;, paste0(&amp;quot;my_&amp;quot;, palette), palette = pal, ...)
  }else{
    scale_color_gradientn(colours = pal(256), ...)
  }
}

#&#39; Fill scale constructor for my_colors
#&#39;
#&#39; @param palette Character name of palette in my_palettes
#&#39; @param discrete Boolean indicating whether color aesthetic is discrete or not
#&#39; @param reverse Boolean indicating whether the palette should be reversed
#&#39; @param ... Additional arguments passed to discrete_scale() or scale_color_gradientn(), used #&#39; #&#39; respectively when discrete is TRUE or FALSE
#&#39; 
scale_fill_my &amp;lt;- function(palette=&amp;quot;main&amp;quot;, discrete=TRUE, reverse=FALSE, ...){
  pal &amp;lt;- my_pal(palette = palette, reverse = reverse)
  if (discrete){
    discrete_scale(&amp;quot;fill&amp;quot;,paste0(&amp;quot;my_&amp;quot;, palette), palette = pal, ...)
  }else{
    scale_fill_gradientn(colours = pal(256), ...)
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;上面每个函数都制定一个调色板（默认是&lt;code&gt;main&lt;/code&gt;），调色板是基于离散变量或连续变量，以及是否颠倒颜色顺序，同时还传递给了相关的&lt;strong&gt;ggplot2&lt;/strong&gt;函数。下面可以试试它们在绘图过程中的表现&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;ggplot(gapminder,aes(gdpPercap, lifeExp, color=continent))+
  geom_point(size=2, alpha=0.8)+
  scale_x_log10()+
  scale_color_my()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/3-1.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;我们可以更换调色板试试&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;ggplot(gapminder,aes(gdpPercap, lifeExp, color=continent))+
  geom_point(size=2, alpha=0.8)+
  scale_x_log10()+
  scale_color_my(palette = &amp;quot;hot&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/4-1.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;如果是连续变量的话&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;ggplot(iris, aes(Sepal.Width, Sepal.Length, color = Sepal.Length)) +
    geom_point(size = 4, alpha = .8) +
    scale_color_my(discrete = FALSE, palette = &amp;quot;bw&amp;quot;, reverse = TRUE)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/5-1.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;上面是颜色，下面试试填充&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;ggplot(mpg, aes(manufacturer, fill = manufacturer)) +
    geom_bar() +
    theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
    scale_fill_my(palette = &amp;quot;mixed&amp;quot;, guide = &amp;quot;none&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/6-1.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;包的创建&#34;&gt;包的创建&lt;/h2&gt;
&lt;p&gt;通过上面的内容可以看出，如果我们会创建包的话，将上述代码封装在一起再加上一些元素就形成了一个包，可以方便自己或他人后续使用。如果要创建包的话，可以学习
&lt;a href=&#34;https://twitter.com/hadleywickham&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Hadley Wickham&lt;/a&gt;的书
&lt;a href=&#34;http://r-pkgs.had.co.nz/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;R packages&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;sessioninfo&#34;&gt;SessionInfo&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;sessionInfo()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## R version 3.4.3 (2017-11-30)
## Platform: x86_64-pc-linux-gnu (64-bit)
## Running under: Ubuntu 17.10
## 
## Matrix products: default
## BLAS: /usr/lib/x86_64-linux-gnu/atlas/libblas.so.3.10.3
## LAPACK: /usr/lib/x86_64-linux-gnu/atlas/liblapack.so.3.10.3
## 
## locale:
##  [1] LC_CTYPE=zh_CN.UTF-8       LC_NUMERIC=C              
##  [3] LC_TIME=zh_CN.UTF-8        LC_COLLATE=zh_CN.UTF-8    
##  [5] LC_MONETARY=zh_CN.UTF-8    LC_MESSAGES=zh_CN.UTF-8   
##  [7] LC_PAPER=zh_CN.UTF-8       LC_NAME=C                 
##  [9] LC_ADDRESS=C               LC_TELEPHONE=C            
## [11] LC_MEASUREMENT=zh_CN.UTF-8 LC_IDENTIFICATION=C       
## 
## attached base packages:
## [1] stats     graphics  grDevices utils     datasets  methods   base     
## 
## other attached packages:
## [1] gapminder_0.3.0 ggplot2_2.2.1  
## 
## loaded via a namespace (and not attached):
##  [1] Rcpp_0.12.15     knitr_1.20       magrittr_1.5     munsell_0.4.3   
##  [5] colorspace_1.3-2 rlang_0.2.0      stringr_1.3.0    plyr_1.8.4      
##  [9] tools_3.4.3      grid_3.4.3       gtable_0.2.0     utf8_1.1.3      
## [13] cli_1.0.0        htmltools_0.3.6  assertthat_0.2.0 yaml_2.1.16     
## [17] lazyeval_0.2.1   rprojroot_1.3-2  digest_0.6.15    tibble_1.4.2    
## [21] crayon_1.3.4     evaluate_0.10.1  rmarkdown_1.8    labeling_0.3    
## [25] stringi_1.1.6    compiler_3.4.3   pillar_1.1.0     scales_0.5.0    
## [29] backports_1.1.2
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>利用gganimate可视化R-Ladies发展情况</title>
      <link>https://taoyan.netlify.app/post/2018-02-08.%E5%88%A9%E7%94%A8gganimate%E5%8F%AF%E8%A7%86%E5%8C%96r-ladies%E5%8F%91%E5%B1%95%E6%83%85%E5%86%B5/</link>
      <pubDate>Thu, 08 Feb 2018 12:19:05 +0000</pubDate>
      <guid>https://taoyan.netlify.app/post/2018-02-08.%E5%88%A9%E7%94%A8gganimate%E5%8F%AF%E8%A7%86%E5%8C%96r-ladies%E5%8F%91%E5%B1%95%E6%83%85%E5%86%B5/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/raw/master/g0hLljaEb9.gif&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;简介&#34;&gt;简介&lt;/h2&gt;
&lt;p&gt;这篇博客主要基于
&lt;a href=&#34;https://d4tagirl.com/2017/05/how-to-plot-animated-maps-with-gganimate&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;d4tagirl&lt;/strong&gt;&lt;/a&gt;,稍微有所修改。&lt;/p&gt;
&lt;h2 id=&#34;数据加载&#34;&gt;数据加载&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;library(pacman)
p_load(tidyverse, gganomate, maps, ggthemes)
rladies &amp;lt;- read_csv(url(&amp;quot;https://raw.githubusercontent.com/d4tagirl/R-Ladies-growth-maps/master/rladies.csv&amp;quot;))%&amp;gt;%
  select(-1)
head(rladies)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 6 x 7
##   screen_name     location     created_at followers age_days     lon   lat
##   &amp;lt;chr&amp;gt;           &amp;lt;chr&amp;gt;        &amp;lt;date&amp;gt;         &amp;lt;int&amp;gt;    &amp;lt;dbl&amp;gt;   &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;
## 1 RLadiesSF       San Francis~ 2012-10-15       916     1673 -122     37.8
## 2 RLadiesNYC      New York     2016-09-01       309      256 - 74.0   40.7
## 3 RLadiesIstanbul &amp;lt;U+0130&amp;gt;stanbul, T~ 2016-09-06       436      251   29.0   41.0
## 4 RLadiesBCN      Barcelona, ~ 2016-10-11       377      216    2.17  41.4
## 5 RLadiesColumbus Columbus, OH 2016-10-04       179      223 - 83.0   40.0
## 6 RLadiesBoston   Boston, MA   2016-09-06       259      251 - 71.1   42.4
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;可视化&#34;&gt;可视化&lt;/h2&gt;
&lt;p&gt;主要是根据地理位置信息映射到地图上&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r,fig.width=24,&#34;&gt;ggplot()+
  borders(&amp;quot;world&amp;quot;, color=&amp;quot;gray85&amp;quot;, fill=&amp;quot;grey80&amp;quot;)+
  geom_point(data = rladies, aes(lon, lat, size=followers), color=&amp;quot;purple&amp;quot;, alpha=0.5)+
  scale_size_continuous(range = c(8, 24), breaks = c(250, 500, 750, 1000))+
  labs(size=&amp;quot;Followers&amp;quot;, title=&amp;quot;                                             The development of R-Ladies’ Twitter accounts&amp;quot;,x=NULL,y=NULL)+
  theme(text = element_text(family = &amp;quot;Times New Roman&amp;quot;, color = &amp;quot;#EEEEEE&amp;quot;),
        plot.title = element_text(size=40,color = &amp;quot;#f9ba00&amp;quot;),
        plot.subtitle = element_text(size=14),
        axis.ticks = element_blank(),
        axis.text = element_blank(),
        panel.grid = element_blank(),
        panel.background = element_rect(fill=&amp;quot;#333333&amp;quot;),
        plot.background = element_rect(fill = &amp;quot;#333333&amp;quot;),
        legend.position = c(0.18,0.36),
        legend.background = element_blank(),
        legend.key = element_blank(),
        legend.text = element_text(size = 28),
        legend.title = element_text(size=28, color = &amp;quot;#f9ba00&amp;quot;))+
  annotate(geom = &amp;quot;text&amp;quot;,
           label=&amp;quot;Made by Logos ytlogos.github.io\nOriginally from d4tagirl https://d4tagirl.com&amp;quot;,
           x=70, y=-55, size=10, family=&amp;quot;Helvetica Black&amp;quot;, color=&amp;quot;#f9ba00&amp;quot;, hjust=&amp;quot;left&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/emDGG7e91G.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;动画展示&#34;&gt;动画展示&lt;/h2&gt;
&lt;p&gt;为了利用&lt;strong&gt;gganimate&lt;/strong&gt;进行动态展示，需要构建一个映射变量：时间。同时为了使得可视化开始和结尾呈现的是空白，又构建了两个空白图层&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ghost_points_ini &amp;lt;- tibble(created_at=as.Date(&amp;quot;2011-09-01&amp;quot;), followers=0, lon=0, lat=0)
ghost_points_fin &amp;lt;- tibble(created_at=seq(as.Date(&amp;quot;2017-05-16&amp;quot;), as.Date(&amp;quot;2017-05-30&amp;quot;),by=&amp;quot;days&amp;quot;), followers=0, lon=0,lat=0)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;添加frame映射&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;map &amp;lt;- ggplot()+
  borders(&amp;quot;world&amp;quot;, color=&amp;quot;gray85&amp;quot;, fill=&amp;quot;grey80&amp;quot;)+
  geom_point(data = rladies, aes(lon, lat, size=followers, frame=created_at, cumulative=TRUE), color=&amp;quot;purple&amp;quot;, alpha=0.5)+
  scale_size_continuous(range = c(4, 16), breaks = c(250, 500, 750, 1000))+
  geom_point(data = ghost_points_ini, aes(lon, lat, size=followers, frame=created_at, cumulative=TRUE), alpha=0)+
  geom_point(data = ghost_points_fin, aes(lon, lat, size=followers, frame=created_at, cumulative=TRUE), alpha=0)+
  labs(size=&amp;quot;Followers&amp;quot;, title=&amp;quot;The development of R-Ladies’ Twitter accounts&amp;quot;,x=NULL,y=NULL)+
  theme(text = element_text(family = &amp;quot;Times New Roman&amp;quot;, color = &amp;quot;#EEEEEE&amp;quot;),
        plot.title = element_text(size=28, color = &amp;quot;#f9ba00&amp;quot;),
        plot.subtitle = element_text(size=14),
        axis.ticks = element_blank(),
        axis.text = element_blank(),
        panel.grid = element_blank(),
        panel.background = element_rect(fill=&amp;quot;#333333&amp;quot;),
        plot.background = element_rect(fill = &amp;quot;#333333&amp;quot;),
        legend.position = c(0.18,0.36),
        legend.background = element_blank(),
        legend.key = element_blank(),
        legend.text = element_text(size = 18),
        legend.title = element_text(size=24, color = &amp;quot;#f9ba00&amp;quot;))+
  annotate(geom = &amp;quot;text&amp;quot;,
           label=&amp;quot;Made by Logos ytlogos.github.io\nOriginally from d4tagirl https://d4tagirl.com&amp;quot;,
           x=70, y=-55, size=6, family=&amp;quot;Helvetica Black&amp;quot;, color=&amp;quot;#f9ba00&amp;quot;, hjust=&amp;quot;left&amp;quot;)
animation::ani.options(interval=0.15, ani.width=1500, ani.height=800, units=&amp;quot;in&amp;quot;)
gganimate::gganimate(map, filename = &amp;quot;d4tagirlmap.gif&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/raw/master/g0hLljaEb9.gif&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;sessioninfo&#34;&gt;SessionInfo&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;sessionInfo()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## R version 3.4.3 (2017-11-30)
## Platform: x86_64-w64-mingw32/x64 (64-bit)
## Running under: Windows 10 x64 (build 16299)
## 
## Matrix products: default
## 
## locale:
## [1] LC_COLLATE=Chinese (Simplified)_China.936 
## [2] LC_CTYPE=Chinese (Simplified)_China.936   
## [3] LC_MONETARY=Chinese (Simplified)_China.936
## [4] LC_NUMERIC=C                              
## [5] LC_TIME=Chinese (Simplified)_China.936    
## 
## attached base packages:
## [1] stats     graphics  grDevices utils     datasets  methods   base     
## 
## other attached packages:
##  [1] ggthemes_3.4.0       maps_3.2.0           BiocInstaller_1.28.0
##  [4] forcats_0.2.0        stringr_1.2.0        dplyr_0.7.4         
##  [7] purrr_0.2.4          readr_1.1.1          tidyr_0.8.0         
## [10] tibble_1.4.2         ggplot2_2.2.1.9000   tidyverse_1.2.1     
## [13] pacman_0.4.6        
## 
## loaded via a namespace (and not attached):
##  [1] reshape2_1.4.3    haven_1.1.1       lattice_0.20-35  
##  [4] colorspace_1.3-2  htmltools_0.3.6   yaml_2.1.16      
##  [7] utf8_1.1.3        rlang_0.1.6       pillar_1.1.0     
## [10] foreign_0.8-69    glue_1.2.0        modelr_0.1.1     
## [13] readxl_1.0.0      bindrcpp_0.2      bindr_0.1        
## [16] plyr_1.8.4        munsell_0.4.3     gtable_0.2.0     
## [19] cellranger_1.1.0  rvest_0.3.2       psych_1.7.8      
## [22] evaluate_0.10.1   labeling_0.3      knitr_1.19       
## [25] parallel_3.4.3    broom_0.4.3       Rcpp_0.12.15     
## [28] scales_0.5.0.9000 backports_1.1.2   jsonlite_1.5     
## [31] mnormt_1.5-5      hms_0.4.1         digest_0.6.15    
## [34] stringi_1.1.6     grid_3.4.3        rprojroot_1.3-2  
## [37] cli_1.0.0         tools_3.4.3       magrittr_1.5     
## [40] lazyeval_0.2.1    crayon_1.3.4      pkgconfig_2.0.1  
## [43] xml2_1.2.0        lubridate_1.7.1   assertthat_0.2.0 
## [46] rmarkdown_1.8     httr_1.3.1        rstudioapi_0.7   
## [49] R6_2.2.2          nlme_3.1-131      compiler_3.4.3
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>利用R语言绘制世界航班路线图</title>
      <link>https://taoyan.netlify.app/post/2018-02-07.%E5%88%A9%E7%94%A8r%E8%AF%AD%E8%A8%80%E7%BB%98%E5%88%B6%E4%B8%96%E7%95%8C%E8%88%AA%E7%8F%AD%E8%B7%AF%E7%BA%BF%E5%9B%BE/</link>
      <pubDate>Wed, 07 Feb 2018 12:19:05 +0000</pubDate>
      <guid>https://taoyan.netlify.app/post/2018-02-07.%E5%88%A9%E7%94%A8r%E8%AF%AD%E8%A8%80%E7%BB%98%E5%88%B6%E4%B8%96%E7%95%8C%E8%88%AA%E7%8F%AD%E8%B7%AF%E7%BA%BF%E5%9B%BE/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/6HckGG7Jfc.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;简介&#34;&gt;简介&lt;/h2&gt;
&lt;p&gt;本文基于&lt;strong&gt;NASA&lt;/strong&gt;的
&lt;a href=&#34;https://www.nasa.gov/specials/blackmarble/2016/globalmaps/BlackMarble_2016_01deg.jpg&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;夜间地图&lt;/a&gt;的基础上进行世界航班路线可视化，参考多篇博客以及可视化案例。&lt;/p&gt;
&lt;h2 id=&#34;包加载&#34;&gt;包加载&lt;/h2&gt;
&lt;p&gt;本博客使用的包较多，利用&lt;strong&gt;pacman&lt;/strong&gt;包里的&lt;code&gt;p_load()&lt;/code&gt;函数进行加载&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;library(pacman)
p_load(tidyverse, data.table, geosphere, grid, jpeg, plyr)
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;数据准备&#34;&gt;数据准备&lt;/h2&gt;
&lt;p&gt;使用的数据来自于
&lt;a href=&#34;https://openflights.org/data.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;OpenFlights.org&lt;/a&gt;。&lt;/p&gt;
&lt;h3 id=&#34;数据下载&#34;&gt;数据下载&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;download.file(&amp;quot;https://raw.githubusercontent.com/jpatokal/openflights/master/data/airlines.dat&amp;quot;,
              destfile = &amp;quot;airlines.dat&amp;quot;, mode = &amp;quot;wb&amp;quot;)
download.file(&amp;quot;https://raw.githubusercontent.com/jpatokal/openflights/master/data/airports.dat&amp;quot;, 
              destfile = &amp;quot;airports.dat&amp;quot;, mode = &amp;quot;wb&amp;quot;)
download.file(&amp;quot;https://raw.githubusercontent.com/jpatokal/openflights/master/data/routes.dat&amp;quot;, 
              destfile = &amp;quot;routes.dat&amp;quot;, mode = &amp;quot;wb&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;数据导入&#34;&gt;数据导入&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;airlines &amp;lt;- fread(&amp;quot;airlines.dat&amp;quot;, sep = &amp;quot;,&amp;quot;, skip = 1)
airports &amp;lt;- fread(&amp;quot;airports.dat&amp;quot;, sep = &amp;quot;,&amp;quot;)
routes &amp;lt;- fread(&amp;quot;routes.dat&amp;quot;, sep = &amp;quot;,&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;数据整理&#34;&gt;数据整理&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;#添加列名
colnames(airlines) &amp;lt;- c(&amp;quot;airline_id&amp;quot;, &amp;quot;name&amp;quot;, &amp;quot;alias&amp;quot;, &amp;quot;iata&amp;quot;, &amp;quot;icao&amp;quot;, &amp;quot;callisign&amp;quot;, &amp;quot;country&amp;quot;, &amp;quot;active&amp;quot;)
colnames(airports) &amp;lt;- c(&amp;quot;airport_id&amp;quot;, &amp;quot;name&amp;quot;, &amp;quot;city&amp;quot;, &amp;quot;country&amp;quot;,&amp;quot;iata&amp;quot;, &amp;quot;icao&amp;quot;, &amp;quot;latitude&amp;quot;, &amp;quot;longitude&amp;quot;,&amp;quot;altitude&amp;quot;, &amp;quot;timezone&amp;quot;,&amp;quot;dst&amp;quot;,&amp;quot;tz_database_time_zone&amp;quot;,&amp;quot;type&amp;quot;, &amp;quot;source&amp;quot;)
colnames(routes) &amp;lt;- c(&amp;quot;airline&amp;quot;, &amp;quot;airline_id&amp;quot;, &amp;quot;source_airport&amp;quot;, &amp;quot;source_airport_id&amp;quot;,&amp;quot;destination_airport&amp;quot;,&amp;quot;destination_airport_id&amp;quot;,&amp;quot;codeshare&amp;quot;, &amp;quot;stops&amp;quot;,&amp;quot;equipment&amp;quot;)

#类型转换
routes$airline_id &amp;lt;- as.numeric(routes$airline_id)
# airlines与routes数据融合
flights &amp;lt;- left_join(routes, airlines, by=&amp;quot;airline_id&amp;quot;)
# flights与airports数据融合
airports_orig &amp;lt;- airports[,c(5,7,8)]
colnames(airports_orig) &amp;lt;- c(&amp;quot;source_airport&amp;quot;,&amp;quot;source_airport_lat&amp;quot;, &amp;quot;source_airport_long&amp;quot;)
airports_dest &amp;lt;- airports[, c(5, 7, 8)]
colnames(airports_dest) &amp;lt;- c(&amp;quot;destination_airport&amp;quot;, &amp;quot;destination_airport_lat&amp;quot;, &amp;quot;destination_airport_long&amp;quot;)
flights &amp;lt;- left_join(flights, airports_orig, by = &amp;quot;source_airport&amp;quot;)
flights &amp;lt;- left_join(flights, airports_dest, by = &amp;quot;destination_airport&amp;quot;)
#剔除缺失值
flights &amp;lt;- na.omit(flights, cols = c(&amp;quot;source_airport_long&amp;quot;, &amp;quot;source_airport_lat&amp;quot;, &amp;quot;destination_airport_long&amp;quot;, &amp;quot;destination_airport_lat&amp;quot;))
#最后数据如下
head(flights[,c(1:5)])
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;下面就是准备地理信息数据&lt;/p&gt;
&lt;p&gt;本文主要是可视化地理信息上的点与点之间的连接，这可以通过&lt;strong&gt;geosphere&lt;/strong&gt;包里的函数&lt;code&gt;gcIntermediate()&lt;/code&gt;很轻松实现。具体使用方法可以参考
&lt;a href=&#34;http://flowingdata.com/2011/05/11/how-to-map-connections-with-great-circles/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;这里&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;# 按航空公司拆分数据集
flights_split &amp;lt;- split(flights, flights$name)
# Calculate intermediate points between each two locations
flights_all &amp;lt;- lapply(flights_split, function(x) gcIntermediate(x[, c(&amp;quot;source_airport_long&amp;quot;, &amp;quot;source_airport_lat&amp;quot;)], x[, c(&amp;quot;destination_airport_long&amp;quot;, &amp;quot;destination_airport_lat&amp;quot;)], n=100, breakAtDateLine = FALSE, addStartEnd = TRUE, sp = TRUE))

# 转换为数据框
flights_fortified &amp;lt;- lapply(flights_all, function(x) ldply(x@lines, fortify))

# Unsplit lists
flights_fortified &amp;lt;- do.call(&amp;quot;rbind&amp;quot;, flights_fortified)

# Add and clean column with airline names
flights_fortified$name &amp;lt;- rownames(flights_fortified)
flights_fortified$name &amp;lt;- gsub(&amp;quot;\\..*&amp;quot;, &amp;quot;&amp;quot;, flights_fortified$name)

# Extract first and last observations for plotting source and destination points (i.e., airports)
flights_points &amp;lt;- flights_fortified %&amp;gt;%
  group_by(group) %&amp;gt;%
  filter(row_number() == 1 | row_number() == n())
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;可视化&#34;&gt;可视化&lt;/h2&gt;
&lt;p&gt;接下来就是进行可视化了，前面讲了我们只是在&lt;strong&gt;NASA&lt;/strong&gt;提供的夜间地球图上面进行数据映射，所以第一我们需要获取该背景地图。&lt;/p&gt;
&lt;h3 id=&#34;图片获取并渲染&#34;&gt;图片获取并渲染&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;#下载图片
download.file(&amp;quot;https://www.nasa.gov/specials/blackmarble/2016/globalmaps/BlackMarble_2016_01deg.jpg&amp;quot;,
              destfile = &amp;quot;BlackMarble_2016_01deg.jpg&amp;quot;, mode = &amp;quot;wb&amp;quot;)
#加载并渲染图片
earth &amp;lt;- readJPEG(&amp;quot;BlackMarble_2016_01deg.jpg&amp;quot;, native = TRUE)
earth &amp;lt;- rasterGrob(earth, interpolate = TRUE)
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;数据映射&#34;&gt;数据映射&lt;/h3&gt;
&lt;p&gt;由于航空公司十分多，就挑选几个有名的航空公司进行可视化。&lt;/p&gt;
&lt;h4 id=&#34;lufthansa德国汉莎航空公司&#34;&gt;Lufthansa(德国汉莎航空公司)&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;ggplot() +
  annotation_custom(earth, xmin = -180, xmax = 180, ymin = -90, ymax = 90) +
  geom_path(aes(long, lat, group = id, color = name), alpha = 0.0, size = 0.0, data = flights_fortified) + 
  geom_path(aes(long, lat, group = id, color = name), alpha = 0.2, size = 0.3, color = &amp;quot;#f9ba00&amp;quot;, data = flights_fortified[flights_fortified$name == &amp;quot;Lufthansa&amp;quot;, ]) + 
  geom_point(data = flights_points[flights_points$name == &amp;quot;Lufthansa&amp;quot;, ], aes(long, lat), alpha = 0.8, size = 0.1, colour = &amp;quot;white&amp;quot;) +
  theme(panel.background = element_rect(fill = &amp;quot;#05050f&amp;quot;, colour = &amp;quot;#05050f&amp;quot;), 
        panel.grid.major = element_blank(),
        panel.grid.minor = element_blank(), 
        axis.title = element_blank(), 
        axis.text = element_blank(), 
        axis.ticks.length = unit(0, &amp;quot;cm&amp;quot;),
        legend.position = &amp;quot;none&amp;quot;) +
  annotate(&amp;quot;text&amp;quot;, x = -150, y = -18, hjust = 0, size = 14,
           label = paste(&amp;quot;Lufthansa&amp;quot;), color = &amp;quot;#f9ba00&amp;quot;, family = &amp;quot;Helvetica Black&amp;quot;) +
  annotate(&amp;quot;text&amp;quot;, x = -150, y = -26, hjust = 0, size = 8, 
           label = paste(&amp;quot;Flight routes&amp;quot;), color = &amp;quot;white&amp;quot;) +
  annotate(&amp;quot;text&amp;quot;, x = -150, y = -30, hjust = 0, size = 7, 
           label = paste(&amp;quot;ytlogos.github.io || NASA.gov || OpenFlights.org&amp;quot;), color = &amp;quot;white&amp;quot;, alpha = 0.5) +
  coord_equal() 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/5g2k5l3afB.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;emirates阿联酋航空公司&#34;&gt;Emirates(阿联酋航空公司)&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;ggplot() +
  annotation_custom(earth, xmin = -180, xmax = 180, ymin = -90, ymax = 90) +
  geom_path(aes(long, lat, group = id, color = name), alpha = 0.0, size = 0.0, data = flights_fortified) + 
  geom_path(aes(long, lat, group = id, color = name), alpha = 0.2, size = 0.3, color = &amp;quot;#ff0000&amp;quot;, data = flights_fortified[flights_fortified$name == &amp;quot;Emirates&amp;quot;, ]) + 
  geom_point(data = flights_points[flights_points$name == &amp;quot;Emirates&amp;quot;, ], aes(long, lat), alpha = 0.8, size = 0.1, colour = &amp;quot;white&amp;quot;) +
  theme(panel.background = element_rect(fill = &amp;quot;#05050f&amp;quot;, colour = &amp;quot;#05050f&amp;quot;), 
        panel.grid.major = element_blank(),
        panel.grid.minor = element_blank(), 
        axis.title = element_blank(), 
        axis.text = element_blank(), 
        axis.ticks.length = unit(0, &amp;quot;cm&amp;quot;),
        legend.position = &amp;quot;none&amp;quot;) +
  annotate(&amp;quot;text&amp;quot;, x = -150, y = -18, hjust = 0, size = 14,
           label = paste(&amp;quot;Emirates&amp;quot;), color = &amp;quot;#ff0000&amp;quot;, family = &amp;quot;Fontin&amp;quot;) +
  annotate(&amp;quot;text&amp;quot;, x = -150, y = -26, hjust = 0, size = 8, 
           label = paste(&amp;quot;Flight routes&amp;quot;), color = &amp;quot;white&amp;quot;) +
  annotate(&amp;quot;text&amp;quot;, x = -150, y = -30, hjust = 0, size = 7, 
           label = paste(&amp;quot;ytlogos.github.io || NASA.gov || OpenFlights.org&amp;quot;), color = &amp;quot;white&amp;quot;, alpha = 0.5) +
  coord_equal() 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/mgl6B5ecaJ.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;british-airways英国航空公司&#34;&gt;British Airways(英国航空公司)&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;ggplot() +
  annotation_custom(earth, xmin = -180, xmax = 180, ymin = -90, ymax = 90) +
  geom_path(aes(long, lat, group = id, color = name), alpha = 0.0, size = 0.0, data = flights_fortified) + 
  geom_path(aes(long, lat, group = id, color = name), alpha = 0.2, size = 0.3, color = &amp;quot;#075aaa&amp;quot;, data = flights_fortified[flights_fortified$name == &amp;quot;British Airways&amp;quot;, ]) + 
  geom_point(data = flights_points[flights_points$name == &amp;quot;British Airways&amp;quot;, ], aes(long, lat), alpha = 0.8, size = 0.1, colour = &amp;quot;white&amp;quot;) +
  theme(panel.background = element_rect(fill = &amp;quot;#05050f&amp;quot;, colour = &amp;quot;#05050f&amp;quot;), 
        panel.grid.major = element_blank(),
        panel.grid.minor = element_blank(), 
        axis.title = element_blank(), 
        axis.text = element_blank(), 
        axis.ticks.length = unit(0, &amp;quot;cm&amp;quot;),
        legend.position = &amp;quot;none&amp;quot;) +
  annotate(&amp;quot;text&amp;quot;, x = -150, y = -18, hjust = 0, size = 14,
           label = paste(&amp;quot;BRITISH AIRWAYS&amp;quot;), color = &amp;quot;#075aaa&amp;quot;, family = &amp;quot;Baker Signet Std&amp;quot;) +
  annotate(&amp;quot;text&amp;quot;, x = -150, y = -26, hjust = 0, size = 8, 
           label = paste(&amp;quot;Flight routes&amp;quot;), color = &amp;quot;white&amp;quot;) +
  annotate(&amp;quot;text&amp;quot;, x = -150, y = -30, hjust = 0, size = 7, 
           label = paste(&amp;quot;ytlogos.github.io || NASA.gov || OpenFlights.org&amp;quot;), color = &amp;quot;white&amp;quot;, alpha = 0.5) +
  coord_equal() 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/7H0j1CdIka.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;air-china中国国航&#34;&gt;Air China(中国国航)&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;ggplot() +
  annotation_custom(earth, xmin = -180, xmax = 180, ymin = -90, ymax = 90) +
  geom_path(aes(long, lat, group = id, color = name), alpha = 0.0, size = 0.0, data = flights_fortified) + 
  geom_path(aes(long, lat, group = id, color = name), alpha = 0.2, size = 0.3, color = &amp;quot;#F70C15&amp;quot;, data = flights_fortified[flights_fortified$name == &amp;quot;Air China&amp;quot;, ]) + 
  geom_point(data = flights_points[flights_points$name == &amp;quot;Air China&amp;quot;, ], aes(long, lat), alpha = 0.8, size = 0.1, colour = &amp;quot;white&amp;quot;) +
  theme(panel.background = element_rect(fill = &amp;quot;#05050f&amp;quot;, colour = &amp;quot;#05050f&amp;quot;), 
        panel.grid.major = element_blank(),
        panel.grid.minor = element_blank(), 
        axis.title = element_blank(), 
        axis.text = element_blank(), 
        axis.ticks.length = unit(0, &amp;quot;cm&amp;quot;),
        legend.position = &amp;quot;none&amp;quot;) +
  annotate(&amp;quot;text&amp;quot;, x = -150, y = -18, hjust = 0, size = 14,
           label = paste(&amp;quot;Air China&amp;quot;), color = &amp;quot;#F70C15&amp;quot;, family = &amp;quot;Times New Roman&amp;quot;) +
  annotate(&amp;quot;text&amp;quot;, x = -150, y = -26, hjust = 0, size = 8, 
           label = paste(&amp;quot;Flight routes&amp;quot;), color = &amp;quot;white&amp;quot;) +
  annotate(&amp;quot;text&amp;quot;, x = -150, y = -30, hjust = 0, size = 7, 
           label = paste(&amp;quot;ytlogos.github.io || NASA.gov || OpenFlights.org&amp;quot;), color = &amp;quot;white&amp;quot;, alpha = 0.5) +
  coord_equal() 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/e9hHgKI1AE.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;china-southern-airlines中国南航&#34;&gt;China Southern Airlines(中国南航)&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;ggplot() +
  annotation_custom(earth, xmin = -180, xmax = 180, ymin = -90, ymax = 90) +
  geom_path(aes(long, lat, group = id, color = name), alpha = 0.0, size = 0.0, data = flights_fortified) + 
  geom_path(aes(long, lat, group = id, color = name), alpha = 0.2, size = 0.3, color = &amp;quot;#004D9D&amp;quot;, data = flights_fortified[flights_fortified$name == &amp;quot;China Southern Airlines&amp;quot;, ]) + 
  geom_point(data = flights_points[flights_points$name == &amp;quot;China Southern Airlines&amp;quot;, ], aes(long, lat), alpha = 0.8, size = 0.1, colour = &amp;quot;white&amp;quot;) +
  theme(panel.background = element_rect(fill = &amp;quot;#05050f&amp;quot;, colour = &amp;quot;#05050f&amp;quot;), 
        panel.grid.major = element_blank(),
        panel.grid.minor = element_blank(), 
        axis.title = element_blank(), 
        axis.text = element_blank(), 
        axis.ticks.length = unit(0, &amp;quot;cm&amp;quot;),
        legend.position = &amp;quot;none&amp;quot;) +
  annotate(&amp;quot;text&amp;quot;, x = -150, y = -18, hjust = 0, size = 14,
           label = paste(&amp;quot;China Southern Airlines&amp;quot;), color = &amp;quot;#004D9D&amp;quot;, family = &amp;quot;Times New Roman&amp;quot;) +
  annotate(&amp;quot;text&amp;quot;, x = -150, y = -26, hjust = 0, size = 8, 
           label = paste(&amp;quot;Flight routes&amp;quot;), color = &amp;quot;white&amp;quot;) +
  annotate(&amp;quot;text&amp;quot;, x = -150, y = -30, hjust = 0, size = 7, 
           label = paste(&amp;quot;ytlogos.github.io || NASA.gov || OpenFlights.org&amp;quot;), color = &amp;quot;white&amp;quot;, alpha = 0.5) +
  coord_equal() 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/D0GeF9BC62.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;一次性映射多家航空公司航行路线&#34;&gt;一次性映射多家航空公司航行路线&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;#抽取数据集
flights_subset &amp;lt;- c(&amp;quot;Lufthansa&amp;quot;, &amp;quot;Emirates&amp;quot;, &amp;quot;British Airways&amp;quot;)
flights_subset &amp;lt;- flights_fortified[flights_fortified$name %in% flights_subset, ]
flights_subset_points &amp;lt;- flights_subset%&amp;gt;%
  group_by(group)%&amp;gt;%
  filter(row_number()==1|row_number()==n())
#可视化
ggplot() +
  annotation_custom(earth, xmin = -180, xmax = 180, ymin = -90, ymax = 90) +
  geom_path(aes(long, lat, group = id, color = name), alpha = 0.2, size = 0.3, data = flights_subset) + 
  geom_point(data = flights_subset_points, aes(long, lat), alpha = 0.8, size = 0.1, colour = &amp;quot;white&amp;quot;) +
  scale_color_manual(values = c(&amp;quot;#f9ba00&amp;quot;, &amp;quot;#ff0000&amp;quot;, &amp;quot;#075aaa&amp;quot;)) +
  theme(panel.background = element_rect(fill = &amp;quot;#05050f&amp;quot;, colour = &amp;quot;#05050f&amp;quot;), 
        panel.grid.major = element_blank(),
        panel.grid.minor = element_blank(), 
        axis.title = element_blank(), 
        axis.text = element_blank(), 
        axis.ticks.length = unit(0, &amp;quot;cm&amp;quot;),
        legend.position = &amp;quot;none&amp;quot;) +
  annotate(&amp;quot;text&amp;quot;, x = -150, y = -4, hjust = 0, size = 14, 
           label = paste(&amp;quot;Lufthansa&amp;quot;), color = &amp;quot;#f9ba00&amp;quot;, family = &amp;quot;Helvetica Black&amp;quot;) +
  annotate(&amp;quot;text&amp;quot;, x = -150, y = -11, hjust = 0, size = 14, 
           label = paste(&amp;quot;Emirates&amp;quot;), color = &amp;quot;#ff0000&amp;quot;, family = &amp;quot;Fontin&amp;quot;) +
  annotate(&amp;quot;text&amp;quot;, x = -150, y = -18, hjust = 0, size = 14, 
           label = paste(&amp;quot;BRITISH AIRWAYS&amp;quot;), color = &amp;quot;#075aaa&amp;quot;, family = &amp;quot;Baker Signet Std&amp;quot;) + 
  annotate(&amp;quot;text&amp;quot;, x = -150, y = -30, hjust = 0, size = 8, 
           label = paste(&amp;quot;Flight routes&amp;quot;), color = &amp;quot;white&amp;quot;) +
  annotate(&amp;quot;text&amp;quot;, x = -150, y = -34, hjust = 0, size = 7, 
           label = paste(&amp;quot;ytlogos.github.io || NASA.gov || OpenFlights.org&amp;quot;), color = &amp;quot;white&amp;quot;, alpha = 0.5) +
  coord_equal() 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/6HckGG7Jfc.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;sessioninfo&#34;&gt;SessionInfo&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;sessionInfo()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;R version 3.4.3 (2017-11-30)
Platform: x86_64-w64-mingw32/x64 (64-bit)
Running under: Windows &amp;gt;= 8 x64 (build 9200)

Matrix products: default

locale:
[1] LC_COLLATE=Chinese (Simplified)_China.936  LC_CTYPE=Chinese (Simplified)_China.936   
[3] LC_MONETARY=Chinese (Simplified)_China.936 LC_NUMERIC=C                              
[5] LC_TIME=Chinese (Simplified)_China.936    

attached base packages:
[1] grid      stats     graphics  grDevices utils     datasets  methods   base     

other attached packages:
 [1] plyr_1.8.4          jpeg_0.1-8          geosphere_1.5-7     data.table_1.10.4-3
 [5] forcats_0.2.0       stringr_1.2.0       dplyr_0.7.4         purrr_0.2.4        
 [9] readr_1.1.1         tidyr_0.8.0         tibble_1.4.2        ggplot2_2.2.1.9000 
[13] tidyverse_1.2.1     pacman_0.4.6       

loaded via a namespace (and not attached):
 [1] Rcpp_0.12.15      cellranger_1.1.0  pillar_1.1.0      compiler_3.4.3    bindr_0.1        
 [6] tools_3.4.3       lubridate_1.7.1   jsonlite_1.5      nlme_3.1-131      gtable_0.2.0     
[11] lattice_0.20-35   pkgconfig_2.0.1   rlang_0.1.6       psych_1.7.8       cli_1.0.0        
[16] rstudioapi_0.7    yaml_2.1.16       parallel_3.4.3    haven_1.1.1       bindrcpp_0.2     
[21] xml2_1.2.0        httr_1.3.1        knitr_1.19        hms_0.4.1         glue_1.2.0       
[26] R6_2.2.2          readxl_1.0.0      foreign_0.8-69    sp_1.2-7          modelr_0.1.1     
[31] reshape2_1.4.3    magrittr_1.5      scales_0.5.0.9000 rvest_0.3.2       assertthat_0.2.0 
[36] mnormt_1.5-5      colorspace_1.3-2  stringi_1.1.6     lazyeval_0.2.1    munsell_0.4.3    
[41] broom_0.4.3       crayon_1.3.4 
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>R语言可视化学习笔记之gganimate包</title>
      <link>https://taoyan.netlify.app/post/2018-02-06.r%E8%AF%AD%E8%A8%80%E5%8F%AF%E8%A7%86%E5%8C%96%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%8Bgganimate%E5%8C%85/</link>
      <pubDate>Tue, 06 Feb 2018 14:19:05 +0000</pubDate>
      <guid>https://taoyan.netlify.app/post/2018-02-06.r%E8%AF%AD%E8%A8%80%E5%8F%AF%E8%A7%86%E5%8C%96%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%8Bgganimate%E5%8C%85/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/kHCkkicfkh.gif?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;简介&#34;&gt;简介&lt;/h2&gt;
&lt;p&gt;
&lt;a href=&#34;https://github.com/dgrtwo/gganimate&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;gganimate&lt;/strong&gt;&lt;/a&gt;包是&lt;strong&gt;ggplot2&lt;/strong&gt;的扩展包，主要用于绘制动画。它在&lt;strong&gt;ggplot2&lt;/strong&gt;的基础上了补充了一个美学映射&lt;code&gt;frame&lt;/code&gt;，就像x,y,size,color,fill一样进行映射。&lt;/p&gt;
&lt;h2 id=&#34;安装&#34;&gt;安装&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;if(!require(devtools)) install.packages(&amp;quot;devtools&amp;quot;)
devtools::install_github(&amp;quot;dgrtwo/gganimate&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;需要注意的是这个包依赖于&lt;strong&gt;ImageMagick&lt;/strong&gt;来产生动画，如果自行安装的话在调用&lt;strong&gt;ImageMagick&lt;/strong&gt;很容易出错，所以推荐在&lt;strong&gt;RStudio&lt;/strong&gt;里面安装。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;install.packages(&amp;quot;installr&amp;quot;)
installr::install.ImageMagick(&amp;quot;http://www.imagemagick.org/script/download.php&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;安装好之后以管理员身份运行&lt;strong&gt;RStudio&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;可视化&#34;&gt;可视化&lt;/h2&gt;
&lt;p&gt;这里我们使用&lt;strong&gt;gapminder&lt;/strong&gt;包里的数据集&lt;code&gt;gapminder&lt;/code&gt;进行可视化&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;library(gapminder)
library(ggplot2)
library(gganimate)
theme_set(theme_bw())
head(gapminder)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;# A tibble: 6 x 6
  country     continent  year lifeExp      pop gdpPercap
  &amp;lt;fct&amp;gt;       &amp;lt;fct&amp;gt;     &amp;lt;int&amp;gt;   &amp;lt;dbl&amp;gt;    &amp;lt;int&amp;gt;     &amp;lt;dbl&amp;gt;
1 Afghanistan Asia       1952    28.8  8425333       779
2 Afghanistan Asia       1957    30.3  9240934       821
3 Afghanistan Asia       1962    32.0 10267083       853
4 Afghanistan Asia       1967    34.0 11537966       836
5 Afghanistan Asia       1972    36.1 13079460       740
6 Afghanistan Asia       1977    38.4 14880372       786
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;p &amp;lt;- ggplot(gapminder, aes(gdpPercap, lifeExp, size=pop, color=continent,frame=year))+
  geom_point()+
  scale_x_log10()
 gganimate(p)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/cIEhbkd1CE.gif?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;p&gt;不管动画中的图形如何移动，坐标轴、图例等都是固定的。&lt;/p&gt;
&lt;h2 id=&#34;定制化&#34;&gt;定制化&lt;/h2&gt;
&lt;p&gt;将&lt;strong&gt;gganimate&lt;/strong&gt;与&lt;strong&gt;ggplot2&lt;/strong&gt;结合起来可以定制化很多复杂的动画&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;p2 &amp;lt;- ggplot(gapminder, aes(gdpPercap, lifeExp, size=pop))+
  geom_point()+
  geom_point(aes(frame=year), color=&amp;quot;red&amp;quot;)+
  scale_x_log10()
gganimate(p2)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/lcD6kdcA73.gif?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;p&gt;如果要绘制累积效果图，&lt;strong&gt;gganimate&lt;/strong&gt;提供了&lt;code&gt;cumalative&lt;/code&gt;参数，这对于路径图来说十分是有效的&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;p3 &amp;lt;- ggplot(gapminder, aes(gdpPercap, lifeExp, frame=year, color=continent))+
  geom_path(aes(cumulative=TRUE, group=country))+
  scale_x_log10()+
  facet_wrap(~continent)
gganimate(p3)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/D2g6l8d18K.gif?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;p&gt;一般来说我们都是将时间映射给&lt;code&gt;frame&lt;/code&gt;，这也符合我们的直觉，但是这并不意味着我们只能将时间映射给&lt;code&gt;frame&lt;/code&gt;，我们可以将任何想要的变量映射给&lt;code&gt;frame&lt;/code&gt;。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;p4 &amp;lt;- ggplot(gapminder, aes(gdpPercap, lifeExp, size=pop, frame=continent))+
  geom_point(color=&amp;quot;blue&amp;quot;)+
  scale_x_log10()
gganimate(p4)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/jcbklhff47.gif?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;需要注意的是如何我们绘制的图形涉及到统计汇总比如geom_smooth()，那么在geom_smooth()图层中需要添加group映射。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;p5 &amp;lt;- ggplot(gapminder,aes(gdpPercap, lifeExp, size=pop, frame=year))+
  geom_point()+
  geom_smooth(aes(group=year),method = &amp;quot;lm&amp;quot;, show.legend = FALSE)+
  facet_wrap(~continent, scales = &amp;quot;free&amp;quot;)+
  scale_x_log10()
gganimate(p5)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/Hb2aac620H.gif?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;p&gt;最后如果需要控制动画播放速度，使用&lt;code&gt;interval&lt;/code&gt;参数控制&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;gganimate(p, interval = .2)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/kHCkkicfkh.gif?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;sessioninfo&#34;&gt;SessionInfo&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;sessionInfo()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;R version 3.4.3 (2017-11-30)
Platform: x86_64-w64-mingw32/x64 (64-bit)
Running under: Windows &amp;gt;= 8 x64 (build 9200)

Matrix products: default

locale:
[1] LC_COLLATE=Chinese (Simplified)_China.936 
[2] LC_CTYPE=Chinese (Simplified)_China.936   
[3] LC_MONETARY=Chinese (Simplified)_China.936
[4] LC_NUMERIC=C                              
[5] LC_TIME=Chinese (Simplified)_China.936    

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods  
[7] base     

other attached packages:
[1] gganimate_0.1.0.9000 ggplot2_2.2.1.9000  
[3] gapminder_0.3.0     

loaded via a namespace (and not attached):
 [1] Rcpp_0.12.15      rstudioapi_0.7    magrittr_1.5     
 [4] munsell_0.4.3     colorspace_1.3-2  rlang_0.1.6      
 [7] stringr_1.2.0     plyr_1.8.4        tools_3.4.3      
[10] grid_3.4.3        gtable_0.2.0      utf8_1.1.3       
[13] cli_1.0.0         withr_2.1.1.9000  htmltools_0.3.6  
[16] yaml_2.1.16       lazyeval_0.2.1    assertthat_0.2.0 
[19] digest_0.6.15     tibble_1.4.2      crayon_1.3.4     
[22] base64enc_0.1-3   animation_2.5     labeling_0.3     
[25] stringi_1.1.6     compiler_3.4.3    pillar_1.1.0     
[28] installr_0.19.0   scales_0.5.0.9000
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>R语言可视化学习笔记之ggridges包</title>
      <link>https://taoyan.netlify.app/post/2018-02-05.r%E8%AF%AD%E8%A8%80%E5%8F%AF%E8%A7%86%E5%8C%96%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%8Bggridges%E5%8C%85/</link>
      <pubDate>Mon, 05 Feb 2018 14:19:05 +0000</pubDate>
      <guid>https://taoyan.netlify.app/post/2018-02-05.r%E8%AF%AD%E8%A8%80%E5%8F%AF%E8%A7%86%E5%8C%96%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%8Bggridges%E5%8C%85/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/bhlKJ09j0e.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;简介&#34;&gt;简介&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;ggridges&lt;/strong&gt;包主要用来绘制山峦图。尤其是针对时间或者空间分布份可视化具有十分好的效果。&lt;strong&gt;ggridges&lt;/strong&gt;主要提供两个几何图像函数：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;geom_ridgeline():主要绘制山脊线图&lt;/li&gt;
&lt;li&gt;geom_density_ridges()：主要根据密度绘制山脊线图&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;具体用法可以参考
&lt;a href=&#34;https://cran.r-project.org/web/packages/ggridges/vignettes/introduction.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;官方文档&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;geom_ridgeline&#34;&gt;geom_ridgeline()&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;library(ggridges)
library(tidyverse)
library(gridExtra)
my_data &amp;lt;- data.frame(x=1:5, y=rep(1,5), height=c(0,1,-1,3,2))
plot_base &amp;lt;- ggplot(my_data, aes(x, y, height=height))
grid.arrange(plot_base+geom_ridgeline(), 
             plot_base+geom_ridgeline(min_height=-2), ncol=2)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/JjFA48a46m.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;geom_density_ridges&#34;&gt;geom_density_ridges()&lt;/h2&gt;
&lt;p&gt;geom_density_ridges()函数首先会根据数据计算密度然后绘图，此时美学映射&lt;code&gt;height&lt;/code&gt;没有必要写入函数中。下面使用&lt;strong&gt;lincoln_weather&lt;/strong&gt;数据集。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;library(viridis)
head(lincoln_weather[ ,1:4])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 6 x 4
##   CST      `Max Temperature [F]` `Mean Temperature [F]` `Min Temperature ~
##   &amp;lt;chr&amp;gt;                    &amp;lt;int&amp;gt;                  &amp;lt;int&amp;gt;              &amp;lt;int&amp;gt;
## 1 2016-1-1                    37                     24                 11
## 2 2016-1-2                    41                     23                  5
## 3 2016-1-3                    37                     23                  8
## 4 2016-1-4                    30                     17                  4
## 5 2016-1-5                    38                     29                 19
## 6 2016-1-6                    34                     33                 32
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;ggplot(lincoln_weather, aes(x=`Mean Temperature [F]`, y=`Month`, fill=..x..))+
  geom_density_ridges_gradient(scale=3, rel_min_height=0.01, gradient_lwd = 1.)+
  scale_x_continuous(expand = c(0.01, 0))+
  scale_y_discrete(expand = c(0.01,0))+
  scale_fill_viridis(name=&amp;quot;Temp. [F]&amp;quot;, option = &amp;quot;C&amp;quot;)+
  labs(title=&amp;quot;Temperature in Lincoln NE&amp;quot;,
       subtitle=&amp;quot;Mean temperature (Fahrenheit) by month for 2016\nData:Orogin CSV from the Weather Underground &amp;quot;)+
  theme_ridges(font_size = 13, grid = FALSE)+
  theme(axis.title.y = element_blank())
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/bhlKJ09j0e.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;cyclinal-scales&#34;&gt;cyclinal scales&lt;/h2&gt;
&lt;p&gt;为了使得&lt;strong&gt;ggridges&lt;/strong&gt;绘制的图形可视化效果最好，同时为了减少用户对颜色设置的困难，作者提供了&lt;strong&gt;cyclinal scales&lt;/strong&gt;用于颜色轮转映射。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;ggplot(diamonds, aes(x=price, y=cut, fill=cut))+
  geom_density_ridges(scale=4)+
  scale_fill_cyclical(values = c(&amp;quot;blue&amp;quot;, &amp;quot;green&amp;quot;))+
  theme_ridges(grid = FALSE)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/ljf8Gcjh08.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;p&gt;默认的，&lt;strong&gt;cyclinal scales&lt;/strong&gt;为了防止误解是不绘制图例的，但是可以通过选项&lt;code&gt;guide=&amp;quot;legend&amp;quot;&lt;/code&gt;添加图例。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;ggplot(diamonds, aes(x=price, y=cut, fill=cut))+
  geom_density_ridges(scale=4)+
  scale_fill_cyclical(values = c(&amp;quot;blue&amp;quot;, &amp;quot;green&amp;quot;), guide=&amp;quot;legend&amp;quot;)+
  theme_ridges(grid = FALSE)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/iGh734gaCG.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;p&gt;跟&lt;strong&gt;ggplot2&lt;/strong&gt;一样，图例是可以修改的,其他参数比如大小、透明度、形状等都是可以通过&lt;strong&gt;cyclinal scales&lt;/strong&gt;修改。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;ggplot(diamonds, aes(x=price, y=cut, fill=cut))+
  geom_density_ridges(scale=4)+
  scale_fill_cyclical(values = c(&amp;quot;blue&amp;quot;, &amp;quot;green&amp;quot;), guide=&amp;quot;legend&amp;quot;,
                      labels=c(&amp;quot;Fair&amp;quot;=&amp;quot;blue&amp;quot;, &amp;quot;Good&amp;quot;=&amp;quot;green&amp;quot;),
                      name=&amp;quot;Fill colors&amp;quot;)+
  theme_ridges(grid = FALSE)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/5kmJIcg7EB.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;p&gt;还有很多用法有兴趣的可以查看
&lt;a href=&#34;https://cran.r-project.org/web/packages/ggridges/vignettes/introduction.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;官方文档&lt;/a&gt;继续学习。&lt;/p&gt;
&lt;h2 id=&#34;sessioninfo&#34;&gt;SessionInfo&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;sessionInfo()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## R version 3.4.3 (2017-11-30)
## Platform: x86_64-w64-mingw32/x64 (64-bit)
## Running under: Windows 10 x64 (build 16299)
## 
## Matrix products: default
## 
## locale:
## [1] LC_COLLATE=Chinese (Simplified)_China.936 
## [2] LC_CTYPE=Chinese (Simplified)_China.936   
## [3] LC_MONETARY=Chinese (Simplified)_China.936
## [4] LC_NUMERIC=C                              
## [5] LC_TIME=Chinese (Simplified)_China.936    
## 
## attached base packages:
## [1] stats     graphics  grDevices utils     datasets  methods   base     
## 
## other attached packages:
##  [1] viridis_0.5.0       viridisLite_0.3.0   gridExtra_2.3      
##  [4] forcats_0.2.0       stringr_1.2.0       dplyr_0.7.4        
##  [7] purrr_0.2.4         readr_1.1.1         tidyr_0.8.0        
## [10] tibble_1.4.2        tidyverse_1.2.1     ggridges_0.4.1.9990
## [13] ggplot2_2.2.1.9000 
## 
## loaded via a namespace (and not attached):
##  [1] reshape2_1.4.3    haven_1.1.1       lattice_0.20-35  
##  [4] colorspace_1.3-2  htmltools_0.3.6   yaml_2.1.16      
##  [7] utf8_1.1.3        rlang_0.1.6       pillar_1.1.0     
## [10] foreign_0.8-69    glue_1.2.0        modelr_0.1.1     
## [13] readxl_1.0.0      bindrcpp_0.2      bindr_0.1        
## [16] plyr_1.8.4        munsell_0.4.3     gtable_0.2.0     
## [19] cellranger_1.1.0  rvest_0.3.2       psych_1.7.8      
## [22] evaluate_0.10.1   labeling_0.3      knitr_1.19       
## [25] parallel_3.4.3    broom_0.4.3       Rcpp_0.12.15     
## [28] scales_0.5.0.9000 backports_1.1.2   jsonlite_1.5     
## [31] mnormt_1.5-5      hms_0.4.1         digest_0.6.15    
## [34] stringi_1.1.6     grid_3.4.3        rprojroot_1.3-2  
## [37] cli_1.0.0         tools_3.4.3       magrittr_1.5     
## [40] lazyeval_0.2.1    crayon_1.3.4      pkgconfig_2.0.1  
## [43] xml2_1.2.0        lubridate_1.7.1   assertthat_0.2.0 
## [46] rmarkdown_1.8     httr_1.3.1        rstudioapi_0.7   
## [49] R6_2.2.2          nlme_3.1-131      compiler_3.4.3
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>关于如何修改坐标轴表达式以及分面图例的一个例子</title>
      <link>https://taoyan.netlify.app/post/2018-01-31.%E5%85%B3%E4%BA%8E%E5%A6%82%E4%BD%95%E4%BF%AE%E6%94%B9%E5%9D%90%E6%A0%87%E8%BD%B4%E8%A1%A8%E8%BE%BE%E5%BC%8F%E4%BB%A5%E5%8F%8A%E5%88%86%E9%9D%A2%E5%9B%BE%E4%BE%8B%E7%9A%84%E4%B8%80%E4%B8%AA%E4%BE%8B%E5%AD%90/</link>
      <pubDate>Wed, 31 Jan 2018 19:43:11 +0000</pubDate>
      <guid>https://taoyan.netlify.app/post/2018-01-31.%E5%85%B3%E4%BA%8E%E5%A6%82%E4%BD%95%E4%BF%AE%E6%94%B9%E5%9D%90%E6%A0%87%E8%BD%B4%E8%A1%A8%E8%BE%BE%E5%BC%8F%E4%BB%A5%E5%8F%8A%E5%88%86%E9%9D%A2%E5%9B%BE%E4%BE%8B%E7%9A%84%E4%B8%80%E4%B8%AA%E4%BE%8B%E5%AD%90/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/ElKca96m2c.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;ggplot2&lt;/strong&gt;绘制的图形如果需要修改细节的话，没有对&lt;strong&gt;ggplot2&lt;/strong&gt;有一定的了解的话是十分困难的，毕竟连创建这个包的作者&lt;strong&gt;Hadley Wickham&lt;/strong&gt;都自称自己使用&lt;strong&gt;ggplot2&lt;/strong&gt;的时候都需要查文档。在对&lt;strong&gt;ggplot2&lt;/strong&gt;有一定了解的基础上如果需要修改ggplot图的话稍微查查文档基本能解决。&lt;/p&gt;
&lt;h2 id=&#34;来源&#34;&gt;来源&lt;/h2&gt;
&lt;p&gt;这两天有人问我如何修改她的图形，她绘制的图如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/5fA4FDKGJB.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;p&gt;她希望修改三点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;各个分面的图例比如DK、NL等是否可以修改，使得大一点&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Y轴标题中的-1如何变成上标&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;平均值虚线如何针对不同物种画相对应的虚线平均值&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;她是使用&lt;strong&gt;ggpubr&lt;/strong&gt;包绘制的，这个包就是对一些&lt;strong&gt;ggplot2&lt;/strong&gt;函数的一些封装及继承，本质上来说是可以通过&lt;strong&gt;ggplot2&lt;/strong&gt;来修改参数的。我参考了一部分的官方文档之后解决了这三个问题，所以写了这篇博客。&lt;/p&gt;
&lt;h2 id=&#34;数据&#34;&gt;数据&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;library(tidyverse)
library(ggpubr)
ICP&amp;lt;-read.csv(&amp;quot;C:/Users/taoyan/Desktop/element.csv&amp;quot;)
ICP$Order &amp;lt;- factor(ICP$Species, levels = c(&amp;quot;DK&amp;quot;, &amp;quot;NL&amp;quot;, &amp;quot;RO&amp;quot;, &amp;quot;IT&amp;quot;, &amp;quot;TL&amp;quot;, &amp;quot;AP&amp;quot;, &amp;quot;AD&amp;quot;))
head(ICP)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   Species Treatment       Na       Ca        P
## 1      DK         A 268.4234 3021.933 1791.317
## 2      DK         A 301.9390 3314.308 1595.479
## 3      DK         A 261.1024 3417.643 1547.596
## 4      DK         A 229.1169 3069.978 1735.703
## 5      DK         A 265.1454 3205.965 1667.524
## 6      DK         B 330.7135 4028.279 1638.113
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;构造数据&#34;&gt;构造数据&lt;/h2&gt;
&lt;p&gt;由于后面需要用到平均值，所以需要构造含有平均值的数据集&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;meanvalue &amp;lt;- ICP%&amp;gt;%group_by(Species)%&amp;gt;%summarise(mean=mean(Na))
data &amp;lt;- left_join(ICP,meanvalue,by=c(&#39;Species&#39;=&#39;Species&#39;))
head(data[,c(1:4,13)])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   Species Treatment       Na       Ca     mean
## 1      DK         A 268.4234 3021.933 426.6542
## 2      DK         A 301.9390 3314.308 426.6542
## 3      DK         A 261.1024 3417.643 426.6542
## 4      DK         A 229.1169 3069.978 426.6542
## 5      DK         A 265.1454 3205.965 426.6542
## 6      DK         B 330.7135 4028.279 426.6542
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;绘图&#34;&gt;绘图&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;p &amp;lt;- ggboxplot(ICP, x=&amp;quot;Treatment&amp;quot;, y=&amp;quot;Na&amp;quot;,group=&amp;quot;Species&amp;quot;, color=&amp;quot;Treatment&amp;quot;,
add=&amp;quot;mean_se&amp;quot;,facet.by = &amp;quot;Order&amp;quot;,ncol=4, legend=&amp;quot;none&amp;quot;)+
geom_hline(aes(yintercept=mean),data,linetype=2)+ #由于要在不同的分面里绘制水平线，这里要mapping
stat_compare_means(method=&amp;quot;anova&amp;quot;,label=&amp;quot;p.format&amp;quot;,label.y=3500,size=8)+
stat_compare_means(label=&amp;quot;p.signif&amp;quot;,size=8,method=&amp;quot;wilcox.test&amp;quot;,ref.group=&amp;quot;.all.&amp;quot;,hide.ns=TRUE)
ggpar(p,palette = &amp;quot;npg&amp;quot;,font.tickslab = c(18,&amp;quot;bold&amp;quot;))+
  theme(strip.text = element_text(size=15,face = &amp;quot;bold&amp;quot;))+ #调整分面legend
  labs(x=&amp;quot;Treatment&amp;quot;, y=expression(bold(paste(&amp;quot;Na (  &amp;quot;, &#39;mg Kg&#39;^{-1},&amp;quot;)&amp;quot;,&#39; DM&#39;))))+
  theme(axis.title = element_text(face = &amp;quot;bold&amp;quot;, size=18))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/ElKca96m2c.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;sessioninfo&#34;&gt;SessionInfo()&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;sessionInfo()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## R version 3.4.3 (2017-11-30)
## Platform: x86_64-w64-mingw32/x64 (64-bit)
## Running under: Windows 10 x64 (build 16299)
## 
## Matrix products: default
## 
## locale:
## [1] LC_COLLATE=Chinese (Simplified)_China.936 
## [2] LC_CTYPE=Chinese (Simplified)_China.936   
## [3] LC_MONETARY=Chinese (Simplified)_China.936
## [4] LC_NUMERIC=C                              
## [5] LC_TIME=Chinese (Simplified)_China.936    
## 
## attached base packages:
## [1] stats     graphics  grDevices utils     datasets  methods   base     
## 
## other attached packages:
##  [1] bindrcpp_0.2       ggpubr_0.1.6       magrittr_1.5      
##  [4] forcats_0.2.0      stringr_1.2.0      dplyr_0.7.4       
##  [7] purrr_0.2.4        readr_1.1.1        tidyr_0.7.2       
## [10] tibble_1.4.2       ggplot2_2.2.1.9000 tidyverse_1.2.1   
## 
## loaded via a namespace (and not attached):
##  [1] tidyselect_0.2.3  reshape2_1.4.3    haven_1.1.1      
##  [4] lattice_0.20-35   colorspace_1.3-2  htmltools_0.3.6  
##  [7] yaml_2.1.16       rlang_0.1.6       pillar_1.1.0     
## [10] foreign_0.8-69    glue_1.2.0        modelr_0.1.1     
## [13] readxl_1.0.0      bindr_0.1         plyr_1.8.4       
## [16] munsell_0.4.3     gtable_0.2.0      cellranger_1.1.0 
## [19] rvest_0.3.2       ggsci_2.8         psych_1.7.8      
## [22] evaluate_0.10.1   labeling_0.3      knitr_1.18       
## [25] parallel_3.4.3    broom_0.4.3       Rcpp_0.12.15     
## [28] scales_0.5.0.9000 backports_1.1.2   jsonlite_1.5     
## [31] mnormt_1.5-5      hms_0.4.1         digest_0.6.14    
## [34] stringi_1.1.6     grid_3.4.3        rprojroot_1.3-2  
## [37] cli_1.0.0         tools_3.4.3       lazyeval_0.2.1   
## [40] crayon_1.3.4      pkgconfig_2.0.1   xml2_1.2.0       
## [43] lubridate_1.7.1   assertthat_0.2.0  rmarkdown_1.8    
## [46] httr_1.3.1        rstudioapi_0.7    R6_2.2.2         
## [49] nlme_3.1-131      compiler_3.4.3
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>Lesson 08 for Plotting in R for Biologists</title>
      <link>https://taoyan.netlify.app/post/2018-01-31.lesson-08-for-plotting-in-r-for-biologists/</link>
      <pubDate>Wed, 31 Jan 2018 12:19:05 +0000</pubDate>
      <guid>https://taoyan.netlify.app/post/2018-01-31.lesson-08-for-plotting-in-r-for-biologists/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/Jfea06AiAF.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;p&gt;这节课是最后一节课，主要将如何绘制热图(heatmap)。实际上关于热图的绘制，我以前写了一篇博客：
&lt;a href=&#34;https://ytlogos.github.io/2017/08/21/R%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%8B%E7%83%AD%E5%9B%BE%E7%BB%98%E5%88%B6/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;R语言学习笔记之热图绘制&lt;/a&gt;，里面写的十分详细。但是今天热图绘制主要利用一个新的R包&lt;strong&gt;ComplexHeatmap&lt;/strong&gt;进行绘制。&lt;/p&gt;
&lt;h2 id=&#34;包安装&#34;&gt;包安装&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;source(&amp;quot;https://bioconductor.org/biocLite.R&amp;quot;)
options(BioC_mirror=&amp;quot;http://mirrors.ustc.edu.cn/bioc/&amp;quot;)
biocLite(&amp;quot;ComplexHeatmap&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;数据加载&#34;&gt;数据加载&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;library(ComplexHeatmap)
my_data &amp;lt;- read.table(&amp;quot;copy_number_data.txt&amp;quot;, sep = &amp;quot;\t&amp;quot;, quote=&amp;quot;&amp;quot;, stringsAsFactors = FALSE, header = TRUE)
head(my_data[,1:6])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    CHR     START       END X.SRR089523. X.SRR089526. X.SRR089529.
## 1 chr1  53440429  53494914    1.1002112    1.1000844    1.0487301
## 2 chr1 105459037 105514187    1.1860780    0.6553897    0.4980016
## 3 chr1 183998520 184048557    1.3791250    1.2024487    0.5735184
## 4 chr1 236135655 236186012    0.8987158    1.1182392    0.6396842
## 5 chr2  38944803  38996507    1.0788216    0.9663390    1.0473623
## 6 chr2  97248366  97298651    1.0459629    1.0658991    1.0473623
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;#绘制热图前先进行矩阵化
my_matrix &amp;lt;- as.matrix(my_data[, c(4:100)])
head(my_matrix[,1:4])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##      X.SRR089523. X.SRR089526. X.SRR089529. X.SRR089533.
## [1,]    1.1002112    1.1000844    1.0487301    0.5656784
## [2,]    1.1860780    0.6553897    0.4980016    0.5656784
## [3,]    1.3791250    1.2024487    0.5735184    1.0362551
## [4,]    0.8987158    1.1182392    0.6396842    0.4659238
## [5,]    1.0788216    0.9663390    1.0473623    1.1702930
## [6,]    1.0459629    1.0658991    1.0473623    1.2298119
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;#将染色体信息存储好以便后续热图注释
chromosome_info &amp;lt;- data.frame(chrom=my_data$CHR)
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;可视化&#34;&gt;可视化&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;Heatmap(my_matrix)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/Aj4Gc126K4.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;p&gt;可以看到使用默认参数热图时十分不美观，可以进行部分调整&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;#坐标旋转
my_matrix &amp;lt;- t(my_matrix)
Heatmap(my_matrix)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/f2bambd0De.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;p&gt;坐标标签还是十分乱，还得进行调整&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;Heatmap(my_matrix, cluster_columns = FALSE)#列不聚类
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/j5Aabgh1hH.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;p&gt;将坐标标签位置置于左边&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;Heatmap(my_matrix, 
        cluster_columns = FALSE, 
        row_names_side = &amp;quot;left&amp;quot;, 
        row_hclust_side = &amp;quot;left&amp;quot;, 
        row_names_gp = gpar(cex=0.6)
        )
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/FAIF0CElla.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;Heatmap(my_matrix,
        cluster_columns = FALSE,
        row_names_side = &amp;quot;left&amp;quot;,
        row_hclust_side = &amp;quot;left&amp;quot;,
        row_names_gp = gpar(cex=0.6),
        row_hclust_width = unit(3, &amp;quot;cm&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/c34HgC083C.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;p&gt;热图绘制的时候可以使用不同的距离计算方式以及聚类方法，具体的用法可以参考我以前的博客：
&lt;a href=&#34;https://ytlogos.github.io/2017/08/21/R%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%8B%E7%83%AD%E5%9B%BE%E7%BB%98%E5%88%B6/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;R语言学习笔记之热图绘制&lt;/a&gt;。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;Heatmap(my_matrix,
        cluster_columns = FALSE,
        row_names_side = &amp;quot;left&amp;quot;,
        row_hclust_side = &amp;quot;left&amp;quot;,
        row_names_gp = gpar(cex=0.6),
        row_hclust_width = unit(3, &amp;quot;cm&amp;quot;),
        clustering_distance_rows = &amp;quot;maximum&amp;quot;,
        clustering_method_rows = &amp;quot;ward.D&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/iEiafB44Ad.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;热图注释&#34;&gt;热图注释&lt;/h2&gt;
&lt;p&gt;主要是对聚成的类进行颜色标记&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;library(dendextend)
dend &amp;lt;- hclust(dist(my_matrix, method = &amp;quot;maximum&amp;quot;), method = &amp;quot;ward.D&amp;quot;)
Heatmap(my_matrix,
        cluster_columns = FALSE,
        row_names_side = &amp;quot;left&amp;quot;,
        row_hclust_side = &amp;quot;left&amp;quot;,
        row_names_gp = gpar(cex=0.6),
        row_hclust_width = unit(3, &amp;quot;cm&amp;quot;),
        cluster_rows = color_branches(dend, k=3))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/k0d1H4Fahj.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;将热图分类&#34;&gt;将热图分类&lt;/h3&gt;
&lt;p&gt;随便你先分成几类，但是一般来说有一个最佳分类数，可参考我的另一篇博客：
&lt;a href=&#34;https://ytlogos.github.io/2017/06/25/R%e8%af%ad%e8%a8%80%e5%ad%a6%e4%b9%a0%e7%ac%94%e8%ae%b0%e4%b9%8b%e8%81%9a%e7%b1%bb%e5%88%86%e6%9e%90/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;R语言学习笔记之聚类分析&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;Heatmap(my_matrix,
        cluster_columns = FALSE,
        row_names_side = &amp;quot;left&amp;quot;,
        row_hclust_side = &amp;quot;left&amp;quot;,
        row_names_gp = gpar(cex=0.6),
        row_hclust_width = unit(3, &amp;quot;cm&amp;quot;),
        clustering_distance_rows = &amp;quot;maximum&amp;quot;,
        clustering_method_rows = &amp;quot;ward.D&amp;quot;,
        km=2)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/d4hLf0EfgF.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;根据染色体信息进行注释&#34;&gt;根据染色体信息进行注释&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;chromosome_colors &amp;lt;- c(rep(c(&amp;quot;black&amp;quot;,&amp;quot;white&amp;quot;),11), &amp;quot;red&amp;quot;)
names(chromosome_colors) &amp;lt;- paste(&amp;quot;chr&amp;quot;,c(seq(1:22), &amp;quot;X&amp;quot;), sep = &amp;quot;&amp;quot;)
Heatmap(my_matrix,
        cluster_columns = FALSE,
        row_names_side = &amp;quot;left&amp;quot;,
        row_hclust_side = &amp;quot;left&amp;quot;,
        row_names_gp = gpar(cex=0.6),
        row_hclust_width = unit(3, &amp;quot;cm&amp;quot;),
        clustering_distance_rows = &amp;quot;maximum&amp;quot;,
        clustering_method_rows = &amp;quot;ward.D&amp;quot;,
        km=2,
        bottom_annotation = HeatmapAnnotation(chromosome_info, col = list(chrom=chromosome_colors), show_legend = FALSE))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/Jfea06AiAF.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;sessioninfo&#34;&gt;SessionInfo&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;sessionInfo()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## R version 3.4.3 (2017-11-30)
## Platform: x86_64-w64-mingw32/x64 (64-bit)
## Running under: Windows 10 x64 (build 16299)
## 
## Matrix products: default
## 
## locale:
## [1] LC_COLLATE=Chinese (Simplified)_China.936 
## [2] LC_CTYPE=Chinese (Simplified)_China.936   
## [3] LC_MONETARY=Chinese (Simplified)_China.936
## [4] LC_NUMERIC=C                              
## [5] LC_TIME=Chinese (Simplified)_China.936    
## 
## attached base packages:
## [1] grid      stats     graphics  grDevices utils     datasets  methods  
## [8] base     
## 
## other attached packages:
## [1] dendextend_1.6.0      ComplexHeatmap_1.17.1
## 
## loaded via a namespace (and not attached):
##  [1] Rcpp_0.12.15         DEoptimR_1.0-8       compiler_3.4.3      
##  [4] pillar_1.1.0         RColorBrewer_1.1-2   plyr_1.8.4          
##  [7] viridis_0.4.1        class_7.3-14         prabclus_2.2-6      
## [10] tools_3.4.3          digest_0.6.15        mclust_5.4          
## [13] viridisLite_0.3.0    evaluate_0.10.1      tibble_1.4.2        
## [16] gtable_0.2.0         lattice_0.20-35      rlang_0.1.6         
## [19] yaml_2.1.16          mvtnorm_1.0-7        gridExtra_2.3       
## [22] trimcluster_0.1-2    stringr_1.2.0        knitr_1.19          
## [25] cluster_2.0.6        GlobalOptions_0.0.12 fpc_2.1-11          
## [28] diptest_0.75-7       nnet_7.3-12          stats4_3.4.3        
## [31] rprojroot_1.3-2      robustbase_0.92-8    GetoptLong_0.1.6    
## [34] flexmix_2.3-14       rmarkdown_1.8        kernlab_0.9-25      
## [37] ggplot2_2.2.1.9000   magrittr_1.5         whisker_0.3-2       
## [40] modeltools_0.2-21    backports_1.1.2      scales_0.5.0.9000   
## [43] htmltools_0.3.6      MASS_7.3-48          shape_1.4.3         
## [46] circlize_0.4.3       colorspace_1.3-2     stringi_1.1.6       
## [49] lazyeval_0.2.1       munsell_0.4.3        rjson_0.2.15
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>Lesson 05 for Plotting in R for Biologists</title>
      <link>https://taoyan.netlify.app/post/2018-01-28.lesson-05-for-plotting-in-r-for-biologists/</link>
      <pubDate>Sun, 28 Jan 2018 12:19:05 +0000</pubDate>
      <guid>https://taoyan.netlify.app/post/2018-01-28.lesson-05-for-plotting-in-r-for-biologists/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/g2ed2h7ckd.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;p&gt;这节课作者命名为&amp;quot;Tweaking everything in a plot&amp;quot;。主要是对图形细节进行优化，包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;题目(title)、坐标轴标签、图例标签等&lt;/li&gt;
&lt;li&gt;字体&lt;/li&gt;
&lt;li&gt;颜色&lt;/li&gt;
&lt;li&gt;背景&lt;/li&gt;
&lt;li&gt;网格线等&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;数据加载及清洗&#34;&gt;数据加载及清洗&lt;/h2&gt;
&lt;p&gt;这部分在上节课已经讲过了，这里就不再详述了。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;library(tidyverse)
library(plyr)
my_data &amp;lt;- read.csv(&amp;quot;Encode_HMM_data.txt&amp;quot;, sep = &amp;quot;\t&amp;quot;, header = FALSE)
names(my_data)[1:4] &amp;lt;- c(&amp;quot;chrom&amp;quot;,&amp;quot;start&amp;quot;,&amp;quot;stop&amp;quot;,&amp;quot;type&amp;quot;)
my_data$chrom &amp;lt;- factor(gsub(&amp;quot;chr&amp;quot;,&amp;quot;&amp;quot;, my_data$chrom, fixed = TRUE), levels = c(seq(1:22),&amp;quot;X&amp;quot;,&amp;quot;Y&amp;quot;))
my_data &amp;lt;- my_data[my_data$type %in% c(&amp;quot;1_Active_Promoter&amp;quot;,&amp;quot;4_Strong_Enhancer&amp;quot;,&amp;quot;8_Insulator&amp;quot;), ]
my_data$type &amp;lt;- revalue(my_data$type, c(&amp;quot;1_Active_Promoter&amp;quot;=&amp;quot;Promoter&amp;quot;, &amp;quot;4_Strong_Enhancer&amp;quot;=&amp;quot;Enhancer&amp;quot;,&amp;quot;8_Insulator&amp;quot;=&amp;quot;Insulator&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;可视化&#34;&gt;可视化&lt;/h2&gt;
&lt;p&gt;接下来就针对图形进行优化调整&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;ggplot(my_data, aes(x=chrom, fill=type))+geom_bar()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/L5cljj8kja.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;添加标题&#34;&gt;添加标题&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;ggplot(my_data, aes(x=chrom, fill=type))+geom_bar()+labs(title=&amp;quot;Regulatory features by chromosomes&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/gdJ67ALBG6.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;需要注意的一点是，添加的title默认是位于左上角，如果要居中显示的话最简单的办法就是在标题前添加空格。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;修改坐标轴以及图例标签&#34;&gt;修改坐标轴以及图例标签&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;ggplot(my_data, aes(x=chrom, fill=type))+
  geom_bar()+
  labs(x=&amp;quot;Chromosome&amp;quot;, y=&amp;quot;Count&amp;quot;, fill=&amp;quot;Feature&amp;quot;)#这里fill是对应ampping里面的fill映射，显示于图例
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/A7i5la4BCJ.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;主题修改&#34;&gt;主题修改&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;basic &amp;lt;- ggplot(my_data, aes(x=chrom, fill=type))+
  geom_bar()+
  labs(x=&amp;quot;Chromosome&amp;quot;, y=&amp;quot;Count&amp;quot;, fill=&amp;quot;Feature&amp;quot;)
#设置文本大小
(basic+theme_gray(base_size = 20))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/9D6dAECeh3.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;如果想要使得主题适用于所有的图形，可以通过theme_set()进行设置。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;theme_set(theme_gray(base_size = 20))
basic
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/gbGkg7GcmF.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;p&gt;恢复默认设置主题&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;theme_set(theme_gray())
basic
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/LaC06a2e4E.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;颜色&#34;&gt;颜色&lt;/h2&gt;
&lt;p&gt;R有个包&lt;strong&gt;RColorNBrewer&lt;/strong&gt;提供调色板&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;library(RColorBrewer)
display.brewer.all()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/lEAGAHh6gI.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;p&gt;下面测试一下这些调色板&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;basic+scale_fill_brewer(palette = &amp;quot;Set1&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/B5cHCji0cJ.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;basic+scale_fill_brewer(palette = &amp;quot;Pastel1&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/l9FJI7DLHi.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;basic+scale_fill_brewer(palette = &amp;quot;YlorRd&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/khfcGCelbA.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;p&gt;不使用调色板的话也可以自己设置颜色，结合取色器的话很是很赞的&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;basic+scale_fill_manual(values = c(&amp;quot;green&amp;quot;, &amp;quot;blue&amp;quot;, &amp;quot;red&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/e0J65fm8IL.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;head(colors())
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;white&amp;quot;         &amp;quot;aliceblue&amp;quot;     &amp;quot;antiquewhite&amp;quot;  &amp;quot;antiquewhite1&amp;quot;
## [5] &amp;quot;antiquewhite2&amp;quot; &amp;quot;antiquewhite3&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;有的时候我们需要很多种颜色，多到一个调色板都满足不了时怎么办？&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;chrom_plot &amp;lt;- ggplot(my_data, aes(x=type, fill=chrom))+geom_bar()
chrom_plot
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/4bhEI643Lb.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;chrom_plot+scale_fill_brewer(type = &amp;quot;qual&amp;quot;, palette = 1)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/mFkFIEJKk7.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;ggplot&lt;/strong&gt;默认调用的是rainbpw调色板，颜色容易让人误解，不好分辨，但是其他的调色板颜色数量是不足的。这时可以通过将好几个palette合并在一起组成一个新的palette。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;palette1 &amp;lt;- brewer.pal(9, &amp;quot;Set1&amp;quot;)
palette1
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;#E41A1C&amp;quot; &amp;quot;#377EB8&amp;quot; &amp;quot;#4DAF4A&amp;quot; &amp;quot;#984EA3&amp;quot; &amp;quot;#FF7F00&amp;quot; &amp;quot;#FFFF33&amp;quot; &amp;quot;#A65628&amp;quot;
## [8] &amp;quot;#F781BF&amp;quot; &amp;quot;#999999&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;palette2 &amp;lt;- brewer.pal(8, &amp;quot;Set2&amp;quot;)
palette2
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;#66C2A5&amp;quot; &amp;quot;#FC8D62&amp;quot; &amp;quot;#8DA0CB&amp;quot; &amp;quot;#E78AC3&amp;quot; &amp;quot;#A6D854&amp;quot; &amp;quot;#FFD92F&amp;quot; &amp;quot;#E5C494&amp;quot;
## [8] &amp;quot;#B3B3B3&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;palette3 &amp;lt;- brewer.pal(9, &amp;quot;Set3&amp;quot;)
palette3
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;#8DD3C7&amp;quot; &amp;quot;#FFFFB3&amp;quot; &amp;quot;#BEBADA&amp;quot; &amp;quot;#FB8072&amp;quot; &amp;quot;#80B1D3&amp;quot; &amp;quot;#FDB462&amp;quot; &amp;quot;#B3DE69&amp;quot;
## [8] &amp;quot;#FCCDE5&amp;quot; &amp;quot;#D9D9D9&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;通过饼图来查看一下这几个调色板&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;pie(rep(1, length(palette1)), col = palette1)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/12IiLb3k9C.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;pie(rep(1, length(palette2)), col = palette2)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/lEmK5k4hBc.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;pie(rep(1, length(palette3)), col = palette3)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/64ckLkAA69.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;p&gt;将这几个色斑合并成一个大的调色板&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;big_palette &amp;lt;- c(palette1, palette2, palette3)
pie(rep(1, length(big_palette)), col = big_palette)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/Deg5894HDl.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;chrom_plot+scale_fill_manual(values = big_palette)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/kAAB7AKgfl.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;p&gt;也可以打乱颜色顺序&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;chrom_plot+scale_fill_manual(values = sample(big_palette))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/lc0I79KfL3.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;字体&#34;&gt;字体&lt;/h2&gt;
&lt;p&gt;后续大部分调整都是通过theme来实现的。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;#对所有字体进行调整
basic+theme_gray(base_size = 24, base_family = &amp;quot;Times New Roman&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/e4F5cgcLj7.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;p&gt;但是很多时候我们都是对特定字体、标签、颜色等进行特定的调整，这时就可以通过theme逐一调整。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;basic+theme(axis.text = element_text(size=20))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/3kGEkff3f3.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;basic+theme(axis.title = element_text(size = 20))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/ai6HcGJAJc.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;basic+theme(legend.title = element_text(size = 20))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/756Fj36m0m.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;basic+theme(legend.text = element_text(size=20, family = &amp;quot;Times New Roman&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/K43IGFii0k.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;basic+theme(legend.text = element_text(size=20, family = &amp;quot;Times New Roman&amp;quot;),
            axis.title = element_text(size=30),
            axis.text = element_text(size=20))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/fej6fe0E22.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;背景&#34;&gt;背景&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;basic+theme(panel.background = element_rect(fill=&amp;quot;pink&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/blhiiLg5lB.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;basic+theme(panel.background = element_rect(fill=&amp;quot;white&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/06BCjfh0dF.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;网格线&#34;&gt;网格线&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;basic+theme(panel.grid.major = element_line(colour = &amp;quot;blue&amp;quot;), panel.grid.minor = element_line(colour = &amp;quot;red&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/GBe6CG68Ib.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;移除所有的网格线&#34;&gt;移除所有的网格线&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;basic+theme(panel.grid.major = element_line(NA),
            panel.grid.minor = element_line(NA))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/eL008ADBkA.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;只保留y轴线&#34;&gt;只保留y轴线&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;basic+theme(panel.grid.major.y = element_line(colour = &amp;quot;black&amp;quot;, size = 0.20),
            panel.grid.major.x = element_line(NA),
            panel.grid.minor = element_line(NA))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/IBAb1m2be4.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;修改刻度&#34;&gt;修改刻度&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;basic+theme(axis.ticks = element_line(size=0.2))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/96ckHBC006.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;basic+theme(axis.ticks = element_line(NA))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/FBJ2k0J7bB.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;basic+theme(axis.ticks = element_line(colour = &amp;quot;blue&amp;quot;, size = 2))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/blhAmIg3gF.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;basic+theme(axis.ticks = element_line(size=2),
            axis.ticks.x = element_line(colour = &amp;quot;blue&amp;quot;),
            axis.ticks.y = element_line(colour = &amp;quot;red&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/b20AiC7AAC.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;图例&#34;&gt;图例&lt;/h2&gt;
&lt;h3 id=&#34;修改图例位置&#34;&gt;修改图例位置&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;basic+theme(legend.position = &amp;quot;top&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/6kJ5DLG298.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;basic+theme(legend.position = &amp;quot;bottom&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/I6GeiH36C1.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;basic+theme(legend.position = c(0,0))#左下角
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/65Gh1EfA0J.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;basic+theme(legend.position = c(1,1))#右上角
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/ci77mHfc1H.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;basic+theme(legend.position = c(0.8,0.8))#通过坐标设置可以将图例置于任意位置
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/eBe2ee3KLB.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;移除图例&#34;&gt;移除图例&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;basic+labs(fill=&amp;quot;&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/7A21F6hEmD.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;basic+labs(fill=&amp;quot;&amp;quot;)+theme(legend.position = c(0.8,0.8))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/6fg1A8l715.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;p&gt;看看文章发表样式图形&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;publication_style &amp;lt;- basic+guides(fill=FALSE)+
  theme(axis.line = element_line(size = 0.5), 
        panel.background = element_rect(fill=NA, size = rel(20)),
        panel.grid.minor = element_line(colour = NA),
        axis.text = element_text(size=16),
        axis.title = element_text(size = 18))
publication_style
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/LLJ69769c9.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;p&gt;将柱形图与x轴之间的距离消除&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;publication_style+scale_y_continuous(expand = c(0,0))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/69eLJ7CI2b.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;p&gt;可以看到上述图形基本达到了文章发表的水平，因此我们可以将主题theme保存下来以后使用，通过设置全局主题来使所有图形有相同版式。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;theme_set(theme_gray()+
            theme(axis.line = element_line(size = 0.5),
                  panel.background = element_rect(fill=NA, size = rel(20)),
                  panel.grid.minor = element_line(colour = NA),
                  axis.text = element_text(size = 16),
                  axis.title = element_text(size = 18)))
basic
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/CK9CgB5Cme.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;basic+scale_y_continuous(expand = c(0,0))+guides(fill=FALSE)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/g2ed2h7ckd.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;p&gt;如果需要还原主题设定的话，只要运行以下命令就行：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;theme_set(theme_gray())
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;sessioninfo&#34;&gt;SessionInfO()&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;sessionInfo()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## R version 3.4.3 (2017-11-30)
## Platform: x86_64-w64-mingw32/x64 (64-bit)
## Running under: Windows 10 x64 (build 16299)
## 
## Matrix products: default
## 
## locale:
## [1] LC_COLLATE=Chinese (Simplified)_China.936 
## [2] LC_CTYPE=Chinese (Simplified)_China.936   
## [3] LC_MONETARY=Chinese (Simplified)_China.936
## [4] LC_NUMERIC=C                              
## [5] LC_TIME=Chinese (Simplified)_China.936    
## 
## attached base packages:
## [1] stats     graphics  grDevices utils     datasets  methods   base     
## 
## other attached packages:
##  [1] RColorBrewer_1.1-2 plyr_1.8.4         forcats_0.2.0     
##  [4] stringr_1.2.0      dplyr_0.7.4        purrr_0.2.4       
##  [7] readr_1.1.1        tidyr_0.7.2        tibble_1.4.2      
## [10] ggplot2_2.2.1.9000 tidyverse_1.2.1   
## 
## loaded via a namespace (and not attached):
##  [1] Rcpp_0.12.15      cellranger_1.1.0  pillar_1.1.0     
##  [4] compiler_3.4.3    bindr_0.1         tools_3.4.3      
##  [7] digest_0.6.14     lubridate_1.7.1   jsonlite_1.5     
## [10] evaluate_0.10.1   nlme_3.1-131      gtable_0.2.0     
## [13] lattice_0.20-35   pkgconfig_2.0.1   rlang_0.1.6      
## [16] psych_1.7.8       cli_1.0.0         rstudioapi_0.7   
## [19] yaml_2.1.16       parallel_3.4.3    haven_1.1.1      
## [22] bindrcpp_0.2      xml2_1.2.0        httr_1.3.1       
## [25] knitr_1.18        hms_0.4.1         rprojroot_1.3-2  
## [28] grid_3.4.3        glue_1.2.0        R6_2.2.2         
## [31] readxl_1.0.0      foreign_0.8-69    rmarkdown_1.8    
## [34] modelr_0.1.1      reshape2_1.4.3    magrittr_1.5     
## [37] backports_1.1.2   scales_0.5.0.9000 htmltools_0.3.6  
## [40] rvest_0.3.2       assertthat_0.2.0  mnormt_1.5-5     
## [43] colorspace_1.3-2  labeling_0.3      stringi_1.1.6    
## [46] lazyeval_0.2.1    munsell_0.4.3     broom_0.4.3      
## [49] crayon_1.3.4
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>Lesson 04 for Plotting in R for Biologists</title>
      <link>https://taoyan.netlify.app/post/2018-01-25.lesson-04-for-plotting-in-r-for-biologists/</link>
      <pubDate>Thu, 25 Jan 2018 12:19:05 +0000</pubDate>
      <guid>https://taoyan.netlify.app/post/2018-01-25.lesson-04-for-plotting-in-r-for-biologists/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/gHcHm3FdLC.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;p&gt;上次将Lesson 02&amp;amp;03一起讲解完了，在Lesson 04中主要解决下面几个问题&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;剔除掉染色体前缀chr&lt;/li&gt;
&lt;li&gt;对染色体进行正确排序&lt;/li&gt;
&lt;li&gt;对数据进行过滤&lt;/li&gt;
&lt;li&gt;对部分type重命名&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;加载数据&#34;&gt;加载数据&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;library(tidyverse)
my_data &amp;lt;- read.csv(&amp;quot;Encode_HMM_data.txt&amp;quot;, sep = &amp;quot;\t&amp;quot;, header = FALSE)
head(my_data[, c(1:6)])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##     V1    V2    V3                V4 V5 V6
## 1 chr1 10000 10600 15_Repetitive/CNV  0  .
## 2 chr1 10600 11137 13_Heterochrom/lo  0  .
## 3 chr1 11137 11737       8_Insulator  0  .
## 4 chr1 11737 11937       11_Weak_Txn  0  .
## 5 chr1 11937 12137   7_Weak_Enhancer  0  .
## 6 chr1 12137 14537       11_Weak_Txn  0  .
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;对数据部分列进行重命名&#34;&gt;对数据部分列进行重命名&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;names(my_data)[1:4] &amp;lt;- c(&amp;quot;chrom&amp;quot;, &amp;quot;start&amp;quot;, &amp;quot;stop&amp;quot;,&amp;quot;type&amp;quot;)
head(my_data[, c(1:4)])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   chrom start  stop              type
## 1  chr1 10000 10600 15_Repetitive/CNV
## 2  chr1 10600 11137 13_Heterochrom/lo
## 3  chr1 11137 11737       8_Insulator
## 4  chr1 11737 11937       11_Weak_Txn
## 5  chr1 11937 12137   7_Weak_Enhancer
## 6  chr1 12137 14537       11_Weak_Txn
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;绘图&#34;&gt;绘图&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;ggplot(my_data, aes(x=chrom, fill=type))+geom_bar()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/j2IB94I12k.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;数据调整&#34;&gt;数据调整&lt;/h2&gt;
&lt;p&gt;主要是针对上面提出的几个问题对数据进行调整&lt;/p&gt;
&lt;h3 id=&#34;剔除染色体前缀chr&#34;&gt;剔除染色体前缀chr&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;my_data$chrom &amp;lt;- factor(gsub(&amp;quot;chr&amp;quot;, &amp;quot;&amp;quot;, my_data$chrom))
ggplot(my_data, aes(x=chrom, fill=type))+geom_bar()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/2ibGfgm9Gg.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;对染色体进行排序&#34;&gt;对染色体进行排序&lt;/h3&gt;
&lt;p&gt;这个关于人类的基因组数据，所以染色体顺序应该是1：22,X,Y。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;my_data$chrom &amp;lt;- factor(my_data$chrom, levels = c(seq(1:22), &amp;quot;X&amp;quot;, &amp;quot;Y&amp;quot;))
ggplot(my_data, aes(x=chrom, fill=type))+geom_bar()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/G0i0aBH43a.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;p&gt;这下看起来相对好一点&lt;/p&gt;
&lt;h3 id=&#34;选取type&#34;&gt;选取type&lt;/h3&gt;
&lt;p&gt;只选取我们感兴趣的type进行可视化&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;my_data &amp;lt;- my_data[my_data$type %in% c(&amp;quot;1_Active_Promoter&amp;quot;, &amp;quot;4_Strong_Enhancer&amp;quot;, &amp;quot;8_Insulator&amp;quot;), ]
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;对选取的type进行重命名&#34;&gt;对选取的type进行重命名&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;library(plyr)
my_data$type &amp;lt;- revalue(my_data$type,c(&amp;quot;1_Active_Promoter&amp;quot;=&amp;quot;Promoter&amp;quot;,&amp;quot;4_Strong_Enhancer&amp;quot;=&amp;quot;Enhancer&amp;quot;,&amp;quot;8_Insulator&amp;quot;=&amp;quot;Insulator&amp;quot;))
ggplot(my_data, aes(x=chrom, fill=type))+geom_bar()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/gHcHm3FdLC.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;sessioninfo&#34;&gt;SessionInfo&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;sessionInfo()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## R version 3.4.3 (2017-11-30)
## Platform: x86_64-w64-mingw32/x64 (64-bit)
## Running under: Windows 10 x64 (build 16299)
## 
## Matrix products: default
## 
## locale:
## [1] LC_COLLATE=Chinese (Simplified)_China.936 
## [2] LC_CTYPE=Chinese (Simplified)_China.936   
## [3] LC_MONETARY=Chinese (Simplified)_China.936
## [4] LC_NUMERIC=C                              
## [5] LC_TIME=Chinese (Simplified)_China.936    
## 
## attached base packages:
## [1] stats     graphics  grDevices utils     datasets  methods   base     
## 
## other attached packages:
##  [1] plyr_1.8.4         forcats_0.2.0      stringr_1.2.0     
##  [4] dplyr_0.7.4        purrr_0.2.4        readr_1.1.1       
##  [7] tidyr_0.7.2        tibble_1.4.2       ggplot2_2.2.1.9000
## [10] tidyverse_1.2.1   
## 
## loaded via a namespace (and not attached):
##  [1] Rcpp_0.12.15      cellranger_1.1.0  pillar_1.1.0     
##  [4] compiler_3.4.3    bindr_0.1         tools_3.4.3      
##  [7] digest_0.6.14     lubridate_1.7.1   jsonlite_1.5     
## [10] evaluate_0.10.1   nlme_3.1-131      gtable_0.2.0     
## [13] lattice_0.20-35   pkgconfig_2.0.1   rlang_0.1.6      
## [16] psych_1.7.8       cli_1.0.0         rstudioapi_0.7   
## [19] yaml_2.1.16       parallel_3.4.3    haven_1.1.1      
## [22] bindrcpp_0.2      xml2_1.2.0        httr_1.3.1       
## [25] knitr_1.18        hms_0.4.1         rprojroot_1.3-2  
## [28] grid_3.4.3        glue_1.2.0        R6_2.2.2         
## [31] readxl_1.0.0      foreign_0.8-69    rmarkdown_1.8    
## [34] modelr_0.1.1      reshape2_1.4.3    magrittr_1.5     
## [37] backports_1.1.2   scales_0.5.0.9000 htmltools_0.3.6  
## [40] rvest_0.3.2       assertthat_0.2.0  mnormt_1.5-5     
## [43] colorspace_1.3-2  labeling_0.3      stringi_1.1.6    
## [46] lazyeval_0.2.1    munsell_0.4.3     broom_0.4.3      
## [49] crayon_1.3.4
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>“Lesson 02&amp;03 for Plotting in R for Biologists”</title>
      <link>https://taoyan.netlify.app/post/2018-01-20.lesson-0203-for-plotting-in-r-for-biologists/</link>
      <pubDate>Sat, 20 Jan 2018 12:19:05 +0000</pubDate>
      <guid>https://taoyan.netlify.app/post/2018-01-20.lesson-0203-for-plotting-in-r-for-biologists/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/dBhf13K3Ge.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;p&gt;Lesson02主要讲了如何从Excel导入数据以及如何从UCSC、ENSEMBL和RENCODE上下载数据，因此我就将Lesson02并入Lesson03一起讲了。&lt;/p&gt;
&lt;h2 id=&#34;从ecxel中导入数据&#34;&gt;从ECXEl中导入数据&lt;/h2&gt;
&lt;p&gt;数据来源于文献
&lt;a href=&#34;https://www.nature.com/articles/1209254&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&amp;ldquo;Gene expression profiling of breast cell lines identifies potential new basal markers&amp;rdquo;&lt;/a&gt;的补充数据集Supplementary Table 1。将之下载到工作目录区。数据读取的话只需要用&lt;code&gt;read.csv()&lt;/code&gt;即可，指定&lt;code&gt;sep&lt;/code&gt;。&lt;strong&gt;gtf&lt;/strong&gt;、&lt;strong&gt;bed&lt;/strong&gt;文件都可以通过&lt;code&gt;read.csv()&lt;/code&gt;读取。即使是没有后缀的文件，只要知道其分隔符，就可以通过设置&lt;code&gt;sep&lt;/code&gt;来读取数据。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;my_data &amp;lt;- read.csv(&amp;quot;micro_array_results_table1.txt&amp;quot;, sep = &#39;\t&#39;, header = TRUE)
head(my_data[,c(1:6)])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   Probe.Set.ID Gene.Symbol Type  X184B5 BrCa.MZ.01   BT.20
## 1    1007_s_at        DDR1 gene 1113.91     815.53 1564.76
## 2      1053_at        RFC2 gene  159.02     253.24  320.22
## 3       117_at       HSPA6 gene   60.76      33.91   26.39
## 4       121_at        PAX8 gene  197.76     121.33  122.81
## 5    1255_g_at      GUCA1A gene    6.73       7.88    6.28
## 6      1294_at       UBE1L gene  118.82      57.24  432.24
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;试试读取&lt;strong&gt;gtf&lt;/strong&gt;文件&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;Brassica_gtf &amp;lt;- read.csv(&amp;quot;E:/Brassica napus database/Brassica_napus.annotation_v5.gtf&amp;quot;, sep = &amp;quot;\t&amp;quot;, header = FALSE)
head(Brassica_gtf)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##       V1     V2   V3   V4   V5   V6 V7 V8                           V9
## 1 chrA01 GazeA2 exon  831 1437 7.80  +  . transcript_id BnaA01g00010D;
## 2 chrA01 GazeA2  CDS 1070 1345    .  +  0 transcript_id BnaA01g00010D;
## 3 chrA01 GazeA2 exon 1487 2124 2.15  -  . transcript_id BnaA01g00020D;
## 4 chrA01 GazeA2 exon 2256 2436 3.19  -  . transcript_id BnaA01g00020D;
## 5 chrA01 GazeA2  CDS 1645 2124    .  -  0 transcript_id BnaA01g00020D;
## 6 chrA01 GazeA2  CDS 2256 2282    .  -  0 transcript_id BnaA01g00020D;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;其他格式文件我这里就不试了，有兴趣的话可以自己去尝试。&lt;/p&gt;
&lt;h2 id=&#34;数据探索&#34;&gt;数据探索&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;library(tidyverse)
#读取数据
my_data &amp;lt;- read.csv(&amp;quot;Encode_HMM_data.txt&amp;quot;, sep = &amp;quot;\t&amp;quot;, header = FALSE)
dim(my_data)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 571339      9
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;head(my_data[, c(1:6)])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##     V1    V2    V3                V4 V5 V6
## 1 chr1 10000 10600 15_Repetitive/CNV  0  .
## 2 chr1 10600 11137 13_Heterochrom/lo  0  .
## 3 chr1 11137 11737       8_Insulator  0  .
## 4 chr1 11737 11937       11_Weak_Txn  0  .
## 5 chr1 11937 12137   7_Weak_Enhancer  0  .
## 6 chr1 12137 14537       11_Weak_Txn  0  .
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;对数据部分列进行重命名&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;names(my_data)[1:4] &amp;lt;- c(&amp;quot;chrom&amp;quot;, &amp;quot;start&amp;quot;, &amp;quot;stop&amp;quot;, &amp;quot;type&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;可视化&#34;&gt;可视化&lt;/h2&gt;
&lt;p&gt;先初步看一下不同染色体上的type类型&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;ggplot(my_data, aes(x=chrom, fill=type))+geom_bar()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/dBhf13K3Ge.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;p&gt;从这个图中可以看到还有很多缺陷&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;染色体顺序错乱，前缀chr在坐标轴上排列乱&lt;/li&gt;
&lt;li&gt;类型太多了，我们只需要可视化我们感兴趣的type&lt;/li&gt;
&lt;li&gt;类型的名字乱&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这几个问题将在Lesson04解决&lt;/p&gt;
&lt;h2 id=&#34;sessioninfo&#34;&gt;SessionInfo()&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;sessionInfo()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## R version 3.4.3 (2017-11-30)
## Platform: x86_64-w64-mingw32/x64 (64-bit)
## Running under: Windows 10 x64 (build 16299)
## 
## Matrix products: default
## 
## locale:
## [1] LC_COLLATE=Chinese (Simplified)_China.936 
## [2] LC_CTYPE=Chinese (Simplified)_China.936   
## [3] LC_MONETARY=Chinese (Simplified)_China.936
## [4] LC_NUMERIC=C                              
## [5] LC_TIME=Chinese (Simplified)_China.936    
## 
## attached base packages:
## [1] stats     graphics  grDevices utils     datasets  methods   base     
## 
## other attached packages:
## [1] forcats_0.2.0      stringr_1.2.0      dplyr_0.7.4       
## [4] purrr_0.2.4        readr_1.1.1        tidyr_0.7.2       
## [7] tibble_1.4.2       ggplot2_2.2.1.9000 tidyverse_1.2.1   
## 
## loaded via a namespace (and not attached):
##  [1] Rcpp_0.12.15      cellranger_1.1.0  pillar_1.1.0     
##  [4] compiler_3.4.3    plyr_1.8.4        bindr_0.1        
##  [7] tools_3.4.3       digest_0.6.14     lubridate_1.7.1  
## [10] jsonlite_1.5      evaluate_0.10.1   nlme_3.1-131     
## [13] gtable_0.2.0      lattice_0.20-35   pkgconfig_2.0.1  
## [16] rlang_0.1.6       psych_1.7.8       cli_1.0.0        
## [19] rstudioapi_0.7    yaml_2.1.16       parallel_3.4.3   
## [22] haven_1.1.1       bindrcpp_0.2      xml2_1.2.0       
## [25] httr_1.3.1        knitr_1.18        hms_0.4.1        
## [28] rprojroot_1.3-2   grid_3.4.3        glue_1.2.0       
## [31] R6_2.2.2          readxl_1.0.0      foreign_0.8-69   
## [34] rmarkdown_1.8     modelr_0.1.1      reshape2_1.4.3   
## [37] magrittr_1.5      backports_1.1.2   scales_0.5.0.9000
## [40] htmltools_0.3.6   rvest_0.3.2       assertthat_0.2.0 
## [43] mnormt_1.5-5      colorspace_1.3-2  labeling_0.3     
## [46] stringi_1.1.6     lazyeval_0.2.1    munsell_0.4.3    
## [49] broom_0.4.3       crayon_1.3.4
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>Lesson 01 for Plotting in R for Biologists</title>
      <link>https://taoyan.netlify.app/post/2018-01-15.lesson-01-for-plotting-in-r-for-biologists/</link>
      <pubDate>Mon, 15 Jan 2018 12:19:05 +0000</pubDate>
      <guid>https://taoyan.netlify.app/post/2018-01-15.lesson-01-for-plotting-in-r-for-biologists/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/f6L6BHLm15.png?raw=true?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;简介&#34;&gt;简介&lt;/h2&gt;
&lt;p&gt;老早之前就知道了这门课
&lt;a href=&#34;http://omgenomics.com/plotting-in-r-for-biologists/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;Plotting in R for Biologists&lt;/strong&gt;&lt;/a&gt;,一直没有去学习一下，最近花时间看了一遍videos，发现讲的很不错，虽然有一节有一知识点讲的不是很清楚。学了一遍之后记点笔记，这是lesson1的学习笔记。这一节主要讲了数据读取、快速绘图以及图形保存。&lt;/p&gt;
&lt;h2 id=&#34;数据&#34;&gt;数据&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;library(ggplot2)
filename &amp;lt;- &amp;quot;/home/taoyan/Plotting in R for Biologists/Lesson-01/Encode_HMM_data.txt&amp;quot;
my_data &amp;lt;- read.csv(filename, sep=&amp;quot;\t&amp;quot;, header=FALSE)
# 查看一下数据
head(my_data)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##     V1    V2    V3                V4 V5 V6    V7    V8          V9
## 1 chr1 10000 10600 15_Repetitive/CNV  0  . 10000 10600 245,245,245
## 2 chr1 10600 11137 13_Heterochrom/lo  0  . 10600 11137 245,245,245
## 3 chr1 11137 11737       8_Insulator  0  . 11137 11737  10,190,254
## 4 chr1 11737 11937       11_Weak_Txn  0  . 11737 11937 153,255,102
## 5 chr1 11937 12137   7_Weak_Enhancer  0  . 11937 12137   255,252,4
## 6 chr1 12137 14537       11_Weak_Txn  0  . 12137 14537 153,255,102
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;对数据列名重命名&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;names(my_data)[1:4] &amp;lt;- c(&amp;quot;chrom&amp;quot;,&amp;quot;start&amp;quot;,&amp;quot;end&amp;quot;,&amp;quot;type&amp;quot;)
head(my_data)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   chrom start   end              type V5 V6    V7    V8          V9
## 1  chr1 10000 10600 15_Repetitive/CNV  0  . 10000 10600 245,245,245
## 2  chr1 10600 11137 13_Heterochrom/lo  0  . 10600 11137 245,245,245
## 3  chr1 11137 11737       8_Insulator  0  . 11137 11737  10,190,254
## 4  chr1 11737 11937       11_Weak_Txn  0  . 11737 11937 153,255,102
## 5  chr1 11937 12137   7_Weak_Enhancer  0  . 11937 12137   255,252,4
## 6  chr1 12137 14537       11_Weak_Txn  0  . 12137 14537 153,255,102
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;绘图&#34;&gt;绘图&lt;/h2&gt;
&lt;p&gt;对不同染色体上的不同type绘制柱形图&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;ggplot(data = my_data, aes(x= chrom, fill= type))+geom_bar()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/A6geh7Hf22.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;保存&#34;&gt;保存&lt;/h2&gt;
&lt;p&gt;如果想直接保存图片到文件中，可以用&lt;code&gt;dev.off&lt;/code&gt;，R语言支持多种图形类型&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;png(&amp;quot;Lesson-01/plot.png&amp;quot;)
ggplot(my_data,aes(x=chrom,fill=type)) + geom_bar()
dev.off()

tiff(&amp;quot;Lesson-01/plot.tiff&amp;quot;)
ggplot(my_data,aes(x=chrom,fill=type)) + geom_bar()
dev.off()

jpeg(&amp;quot;Lesson-01/plot.jpg&amp;quot;)
ggplot(my_data,aes(x=chrom,fill=type)) + geom_bar()
dev.off()

pdf(&amp;quot;Lesson-01/plot.pdf&amp;quot;)
ggplot(my_data,aes(x=chrom,fill=type)) + geom_bar()
dev.off()

# 设置清晰度
png(&amp;quot;Lesson-01/plot_hi_res.png&amp;quot;,1000,1000)
ggplot(my_data,aes(x=chrom,fill=type)) + geom_bar()
dev.off()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这节课比较简单，没什么知识点，当然如果R语言没入门的话读个数据都困难重重，所以如果基础不太好的可以直接去youtube看视频，讲的很详细。&lt;/p&gt;
&lt;p&gt;##SessionInfo&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;sessionInfo()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## R version 3.4.3 (2017-11-30)
## Platform: x86_64-pc-linux-gnu (64-bit)
## Running under: Ubuntu 17.10
## 
## Matrix products: default
## BLAS: /usr/lib/x86_64-linux-gnu/atlas/libblas.so.3.10.3
## LAPACK: /usr/lib/x86_64-linux-gnu/atlas/liblapack.so.3.10.3
## 
## locale:
##  [1] LC_CTYPE=zh_CN.UTF-8       LC_NUMERIC=C              
##  [3] LC_TIME=zh_CN.UTF-8        LC_COLLATE=zh_CN.UTF-8    
##  [5] LC_MONETARY=zh_CN.UTF-8    LC_MESSAGES=zh_CN.UTF-8   
##  [7] LC_PAPER=zh_CN.UTF-8       LC_NAME=C                 
##  [9] LC_ADDRESS=C               LC_TELEPHONE=C            
## [11] LC_MEASUREMENT=zh_CN.UTF-8 LC_IDENTIFICATION=C       
## 
## attached base packages:
## [1] stats     graphics  grDevices utils     datasets  methods   base     
## 
## other attached packages:
## [1] ggplot2_2.2.1
## 
## loaded via a namespace (and not attached):
##  [1] Rcpp_0.12.14     digest_0.6.14    rprojroot_1.3-2  plyr_1.8.4      
##  [5] grid_3.4.3       gtable_0.2.0     backports_1.1.2  magrittr_1.5    
##  [9] evaluate_0.10.1  scales_0.5.0     pillar_1.1.0     rlang_0.1.6     
## [13] stringi_1.1.6    lazyeval_0.2.1   rmarkdown_1.8    labeling_0.3    
## [17] tools_3.4.3      stringr_1.2.0    munsell_0.4.3    yaml_2.1.16     
## [21] compiler_3.4.3   colorspace_1.3-2 htmltools_0.3.6  knitr_1.18      
## [25] tibble_1.4.1
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>Lesson 06 for Plotting in R for Biologists</title>
      <link>https://taoyan.netlify.app/post/2018-01-29.lesson-06-for-plotting-in-r-for-biologists/</link>
      <pubDate>Mon, 15 Jan 2018 12:19:05 +0000</pubDate>
      <guid>https://taoyan.netlify.app/post/2018-01-29.lesson-06-for-plotting-in-r-for-biologists/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/AFLB2JBHc7.png?raw=true&#34; alt=&#34;veendiagram&#34;&gt;&lt;/p&gt;
&lt;p&gt;前面几节课绘制的图形只有条形图，但是我们科研过程中需要绘制各种各样的图形来展现我们的数据，这节课就主要讲一下利用&lt;strong&gt;ggplot2&lt;/strong&gt;绘制各种图形，这也是&lt;strong&gt;ggplot2&lt;/strong&gt;的魔力所在。相同的数据可以通过不同类型的图形来可视化。本节课主要将绘制以下几类图形：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;条形图&lt;/li&gt;
&lt;li&gt;直方图&lt;/li&gt;
&lt;li&gt;散点图&lt;/li&gt;
&lt;li&gt;箱线图&lt;/li&gt;
&lt;li&gt;小提琴图&lt;/li&gt;
&lt;li&gt;密度图&lt;/li&gt;
&lt;li&gt;点状图&lt;/li&gt;
&lt;li&gt;线图&lt;/li&gt;
&lt;li&gt;饼图&lt;/li&gt;
&lt;li&gt;韦恩图&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;数据加载清洗&#34;&gt;数据加载清洗&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;library(tidyverse)
theme_set(theme_gray(base_size = 18))
my_data &amp;lt;- read.csv(&amp;quot;variants_from_assembly.bed&amp;quot;, sep = &amp;quot;\t&amp;quot;, quote = &#39;&#39;, stringsAsFactors = FALSE)
names(my_data) &amp;lt;- c(&amp;quot;chrom&amp;quot;,&amp;quot;start&amp;quot;,&amp;quot;stop&amp;quot;,&amp;quot;name&amp;quot;,&amp;quot;size&amp;quot;,&amp;quot;strand&amp;quot;,&amp;quot;type&amp;quot;,&amp;quot;ref.dist&amp;quot;,&amp;quot;query.dist&amp;quot;)
head(my_data)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   chrom     start      stop name size strand      type ref.dist query.dist
## 1     6 102958468 102958469  SV2  317      + Insertion      -14        303
## 2     6 102741692 102741693  SV3  130      +  Deletion      130          0
## 3     6 102283759 102283760  SV4 1271      + Insertion      -12       1259
## 4     6 101194032 101194033  SV5 2864      + Insertion      -13       2851
## 5     6 101056644 101056645  SV6  265      + Insertion        0        265
## 6     6 100407499 100407500  SV7  334      + Insertion        0        334
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;summary(my_data$chrom)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    Length     Class      Mode 
##      9555 character character
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;#数据过滤
my_data &amp;lt;- my_data[my_data$chrom %in% c(seq(1:22), &amp;quot;X&amp;quot;, &amp;quot;Y&amp;quot;,&amp;quot;MT&amp;quot;), ]
#染色体排序
my_data$chrom &amp;lt;- factor(my_data$chrom, levels = c(seq(1:22), &amp;quot;X&amp;quot;, &amp;quot;Y&amp;quot;,&amp;quot;MT&amp;quot;))
#类型(type)排序
my_data$type &amp;lt;- factor(my_data$type, levels = c(&amp;quot;Insertion&amp;quot;,&amp;quot;Deletion&amp;quot;,&amp;quot;Expansion&amp;quot;,&amp;quot;Contraction&amp;quot;))
head(my_data)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   chrom     start      stop name size strand      type ref.dist query.dist
## 1     6 102958468 102958469  SV2  317      + Insertion      -14        303
## 2     6 102741692 102741693  SV3  130      +  Deletion      130          0
## 3     6 102283759 102283760  SV4 1271      + Insertion      -12       1259
## 4     6 101194032 101194033  SV5 2864      + Insertion      -13       2851
## 5     6 101056644 101056645  SV6  265      + Insertion        0        265
## 6     6 100407499 100407500  SV7  334      + Insertion        0        334
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;可视化&#34;&gt;可视化&lt;/h2&gt;
&lt;h3 id=&#34;条形图&#34;&gt;条形图&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;ggplot(my_data, aes(x=chrom, fill=type))+geom_bar()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/Ij6mC3GFm8.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;直方图&#34;&gt;直方图&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;ggplot(my_data, aes(x=size, fill=type))+geom_histogram()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/4ILKighKlg.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ggplot(my_data, aes(x=size, fill=type))+geom_histogram()+xlim(0,500)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/fI2i1chIJ9.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ggplot(my_data, aes(x=size, fill=type))+geom_histogram(binwidth = 5)+xlim(0,500)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/IKebffc1EI.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;散点图&#34;&gt;散点图&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;#将type映射给颜色
ggplot(my_data, aes(x=ref.dist, y=query.dist, color=type))+geom_point()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/f4fEKhAd35.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ggplot(my_data, aes(x=ref.dist, y=query.dist, color=type))+geom_point()+xlim(-500,500)+ylim(-500,500)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/EGkhk29KlI.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#将数值型变量size映射给颜色
ggplot(my_data, aes(x=ref.dist, y=query.dist, color=size))+geom_point()+xlim(-500,500)+ylim(-500,500)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/je4lgmC970.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ggplot(my_data, aes(x=ref.dist, y=query.dist,color=size))+geom_point()+xlim(-500,500)+ylim(-500,500)+scale_color_gradient(limits=c(0, 500))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/fDg6K877F7.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;箱线图&#34;&gt;箱线图&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;ggplot(my_data, aes(type, y=size))+geom_boxplot()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/dI07A0I0Ah.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ggplot(my_data, aes(x=type, y=size, fill=type))+geom_boxplot()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/76bb7i9f2F.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ggplot(my_data, aes(x=type, y=size, fill=type))+geom_boxplot()+coord_flip()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/E8klE3m6EA.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;小提琴图&#34;&gt;小提琴图&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;ggplot(my_data, aes(x=type, y=size, fill=type))+geom_violin()+ylim(0,1000)+guides(fill=FALSE)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/AFkf5JgLAL.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ggplot(my_data, aes(x=type, y=size, fill=type))+geom_violin(adjust=0.2)+ylim(0,1000)+guides(fill=FALSE)#adjust调整分辨率，默认为1，值越低，分辨率越高
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/51IFgFDCDc.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#坐标变换
ggplot(my_data, aes(x=type, y=size, fill=type))+geom_violin()+scale_y_log10()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/JGjBHIKc80.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;密度图&#34;&gt;密度图&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;ggplot(my_data, aes(x=size, fill=type))+geom_density()+xlim(0,500)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/HjB54KeclD.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ggplot(my_data, aes(x=size, fill=type))+geom_density(position = &amp;quot;stack&amp;quot;)+xlim(0,500)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/GDI76ijEJ8.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ggplot(my_data, aes(x=size, fill=type))+geom_density(alpha=0.5)+xlim(0,500)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/BlLGm4G75l.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#图形分面
ggplot(my_data, aes(x=size, fill=type))+geom_density()+xlim(0,500)+facet_grid(type~.)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/353a4gh1bK.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;点状图&#34;&gt;点状图&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;ggplot(my_data, aes(x=size, fill=type))+geom_dotplot()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/9AElbGEB3G.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;线图&#34;&gt;线图&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;time_cource &amp;lt;- read.csv(&amp;quot;time_course_data.txt&amp;quot;, sep = &amp;quot;,&amp;quot;, quote = &#39;&#39;, stringsAsFactors = TRUE, header = TRUE)
head(time_cource)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   seconds value sample
## 1       0  0.00      A
## 2       1  5.97      A
## 3       2 13.42      A
## 4       3 56.08      A
## 5       4 98.04      A
## 6       5 27.11      A
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;ggplot(time_cource, aes(x=seconds, y=value, color=sample))+geom_line()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/kiA5jFAdCK.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ggplot(time_cource, aes(x=seconds, y=value, color=sample))+geom_line(size=3)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/bcGfGALGHl.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;饼图&#34;&gt;饼图&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;type_counts &amp;lt;- summary(my_data$type)
type_counts
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   Insertion    Deletion   Expansion Contraction 
##        3141        2256        2476        1674
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;library(RColorBrewer)
pie(type_counts, col = brewer.pal(length(type_counts), &amp;quot;Set1&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/90jhF097Fl.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;韦恩图&#34;&gt;韦恩图&lt;/h3&gt;
&lt;p&gt;这里利用四个基因集&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;listA &amp;lt;- read.csv(&amp;quot;genes_list_A.txt&amp;quot;, header = FALSE)
A &amp;lt;- listA$V1
listB &amp;lt;- read.csv(&amp;quot;genes_list_B.txt&amp;quot;, header = FALSE)
B &amp;lt;- listB$V1
listC &amp;lt;- read.csv(&amp;quot;genes_list_C.txt&amp;quot;, header = FALSE)
C &amp;lt;- listC$V1
listD &amp;lt;- read.csv(&amp;quot;genes_list_D.txt&amp;quot;, header = FALSE)
D &amp;lt;- listD$V1
library(VennDiagram)
#注意这个包绘制的图只能直接保存在文件中，无法实时显示
venn.diagram(list(A=A, B=B, C=C, D=D), fill=c(&amp;quot;yellow&amp;quot;,&amp;quot;red&amp;quot;,&amp;quot;cyan&amp;quot;,&amp;quot;forestgreen&amp;quot;), cex=1.5, filename = &amp;quot;Venn_diagram_genes_4.png&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/AFLB2JBHc7.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;sessioninfo&#34;&gt;SessionInfo&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;sessionInfo()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## R version 3.4.3 (2017-11-30)
## Platform: x86_64-w64-mingw32/x64 (64-bit)
## Running under: Windows 10 x64 (build 16299)
## 
## Matrix products: default
## 
## locale:
## [1] LC_COLLATE=Chinese (Simplified)_China.936 
## [2] LC_CTYPE=Chinese (Simplified)_China.936   
## [3] LC_MONETARY=Chinese (Simplified)_China.936
## [4] LC_NUMERIC=C                              
## [5] LC_TIME=Chinese (Simplified)_China.936    
## 
## attached base packages:
## [1] grid      stats     graphics  grDevices utils     datasets  methods  
## [8] base     
## 
## other attached packages:
##  [1] VennDiagram_1.6.18  futile.logger_1.4.3 RColorBrewer_1.1-2 
##  [4] forcats_0.2.0       stringr_1.2.0       dplyr_0.7.4        
##  [7] purrr_0.2.4         readr_1.1.1         tidyr_0.7.2        
## [10] tibble_1.4.2        ggplot2_2.2.1.9000  tidyverse_1.2.1    
## 
## loaded via a namespace (and not attached):
##  [1] reshape2_1.4.3       haven_1.1.1          lattice_0.20-35     
##  [4] colorspace_1.3-2     htmltools_0.3.6      yaml_2.1.16         
##  [7] rlang_0.1.6          pillar_1.1.0         foreign_0.8-69      
## [10] glue_1.2.0           lambda.r_1.2         modelr_0.1.1        
## [13] readxl_1.0.0         bindrcpp_0.2         bindr_0.1           
## [16] plyr_1.8.4           munsell_0.4.3        gtable_0.2.0        
## [19] cellranger_1.1.0     rvest_0.3.2          psych_1.7.8         
## [22] evaluate_0.10.1      labeling_0.3         knitr_1.18          
## [25] parallel_3.4.3       broom_0.4.3          Rcpp_0.12.15        
## [28] scales_0.5.0.9000    backports_1.1.2      jsonlite_1.5        
## [31] mnormt_1.5-5         hms_0.4.1            digest_0.6.14       
## [34] stringi_1.1.6        rprojroot_1.3-2      cli_1.0.0           
## [37] tools_3.4.3          magrittr_1.5         lazyeval_0.2.1      
## [40] futile.options_1.0.0 crayon_1.3.4         pkgconfig_2.0.1     
## [43] xml2_1.2.0           lubridate_1.7.1      assertthat_0.2.0    
## [46] rmarkdown_1.8        httr_1.3.1           rstudioapi_0.7      
## [49] R6_2.2.2             nlme_3.1-131         compiler_3.4.3
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>Lesson 07 for Plotting in R for Biologists</title>
      <link>https://taoyan.netlify.app/post/2018-01-30.lesson-07-for-plotting-in-r-for-biologists/</link>
      <pubDate>Mon, 15 Jan 2018 12:19:05 +0000</pubDate>
      <guid>https://taoyan.netlify.app/post/2018-01-30.lesson-07-for-plotting-in-r-for-biologists/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/BcHLAECm5L.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;p&gt;这节课主要两个知识点，一个是图形分面，一个是图形嵌入。&lt;/p&gt;
&lt;h2 id=&#34;数据加载及清洗&#34;&gt;数据加载及清洗&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;library(tidyverse)
theme_set(theme_gray())
my_data &amp;lt;- read.csv(&amp;quot;variants_from_assembly.bed&amp;quot;, sep = &amp;quot;\t&amp;quot;, quote = &#39;&#39;, stringsAsFactors = TRUE, header = FALSE)
names(my_data) &amp;lt;- c(&amp;quot;chrom&amp;quot;,&amp;quot;start&amp;quot;,&amp;quot;stop&amp;quot;,&amp;quot;name&amp;quot;,&amp;quot;size&amp;quot;,&amp;quot;strand&amp;quot;,&amp;quot;type&amp;quot;,&amp;quot;ref.dist&amp;quot;,&amp;quot;query.dist&amp;quot;)
head(my_data)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   chrom     start      stop name size strand      type ref.dist query.dist
## 1     6 103832058 103832059  SV1  185      + Insertion        0        185
## 2     6 102958468 102958469  SV2  317      + Insertion      -14        303
## 3     6 102741692 102741693  SV3  130      +  Deletion      130          0
## 4     6 102283759 102283760  SV4 1271      + Insertion      -12       1259
## 5     6 101194032 101194033  SV5 2864      + Insertion      -13       2851
## 6     6 101056644 101056645  SV6  265      + Insertion        0        265
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;my_data &amp;lt;- my_data[my_data$chrom %in% c(seq(1:22), &amp;quot;X&amp;quot;,&amp;quot;Y&amp;quot;), ]
my_data$chrom &amp;lt;- factor(gsub(&amp;quot;chr&amp;quot;, &amp;quot;&amp;quot;,my_data$chrom), levels = c(seq(1:22),&amp;quot;X&amp;quot;,&amp;quot;Y&amp;quot;))
my_data$type &amp;lt;- factor(my_data$type, levels = c(&amp;quot;Insertion&amp;quot;,&amp;quot;Deletion&amp;quot;,&amp;quot;Expansion&amp;quot;,&amp;quot;Contraction&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;可视化分面&#34;&gt;可视化&amp;amp;分面&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;ggplot(my_data, aes(x=size, fill=type))+geom_density(alpha=0.5)+xlim(0,500)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/Ella96CC28.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ggplot(my_data, aes(x=size, fill=type))+geom_density(alpha=0.5)+xlim(0,500)+facet_grid(type~.)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/G1jDEc7HFj.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ggplot(my_data, aes(x=size, fill=type))+geom_density(alpha=0.5)+xlim(0,500)+facet_grid(.~type)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/e9jJEl1EHl.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;p&gt;分面的规则语法是：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;plot+facet_grid(rows~columns)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;比如下面的图按染色体为行、type为列进行分面&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;ggplot(my_data, aes(x=size, fill=type))+geom_density()+xlim(0,500)+facet_grid(chrom~type)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/BG7kecbglg.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#也可以反过来
ggplot(my_data, aes(x=size, fill=type))+geom_density()+xlim(0,500)+facet_grid(type~chrom)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/lIL4kkDecH.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;可以根据自己的喜好以及数据的分布进行分面，有的时候数据不是很适合分面操作，需要慎重，不然越分越乱，无法直观地展示数据。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;图形嵌入&#34;&gt;图形嵌入&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;#先设置主题
theme_set(theme_gray()+
            theme(
              axis.line = element_line(size=0.5),
              panel.background = element_rect(fill=NA, size = rel(20)),
              panel.grid.minor = element_line(colour = NA),
              axis.text = element_text(size = 16),
              axis.title = element_text(size = 16)
            )
          )
big_plot &amp;lt;- ggplot(my_data, aes(x=size, fill=type))+
  geom_bar(binwidth = 100)+
  guides(fill=FALSE)+
  scale_y_continuous(expand = c(0,0))
big_plot
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/Jj3lGDhBE1.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;small_plot &amp;lt;- ggplot(my_data, aes(x=size, fill=type))+
  geom_bar(binwidth = 5)+
  xlim(0, 500)+
  theme(axis.title = element_blank())+
  scale_y_continuous(expand = c(0,0))
small_plot
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/Af79gm2c4B.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;p&gt;图形嵌入需要使用包&lt;strong&gt;grid&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;library(grid)
#构造画布，这一步需要不断调整位置
vp &amp;lt;- viewport(width = 0.8, height = 0.7, x=0.65, y=0.65)#分别设置需要嵌入的图形的宽度、高度以及坐标位置
png(&amp;quot;insert_plot.png&amp;quot;)
print(big_plot)
print(small_plot, vp = vp)
dev.off()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/BcHLAECm5L.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;sessioninfo&#34;&gt;SessionInfo&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;sessionInfo()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## R version 3.4.3 (2017-11-30)
## Platform: x86_64-w64-mingw32/x64 (64-bit)
## Running under: Windows 10 x64 (build 16299)
## 
## Matrix products: default
## 
## locale:
## [1] LC_COLLATE=Chinese (Simplified)_China.936 
## [2] LC_CTYPE=Chinese (Simplified)_China.936   
## [3] LC_MONETARY=Chinese (Simplified)_China.936
## [4] LC_NUMERIC=C                              
## [5] LC_TIME=Chinese (Simplified)_China.936    
## 
## attached base packages:
## [1] grid      stats     graphics  grDevices utils     datasets  methods  
## [8] base     
## 
## other attached packages:
## [1] forcats_0.2.0      stringr_1.2.0      dplyr_0.7.4       
## [4] purrr_0.2.4        readr_1.1.1        tidyr_0.7.2       
## [7] tibble_1.4.2       ggplot2_2.2.1.9000 tidyverse_1.2.1   
## 
## loaded via a namespace (and not attached):
##  [1] Rcpp_0.12.15      cellranger_1.1.0  pillar_1.1.0     
##  [4] compiler_3.4.3    plyr_1.8.4        bindr_0.1        
##  [7] tools_3.4.3       digest_0.6.15     lubridate_1.7.1  
## [10] jsonlite_1.5      evaluate_0.10.1   nlme_3.1-131     
## [13] gtable_0.2.0      lattice_0.20-35   pkgconfig_2.0.1  
## [16] rlang_0.1.6       psych_1.7.8       cli_1.0.0        
## [19] rstudioapi_0.7    yaml_2.1.16       parallel_3.4.3   
## [22] haven_1.1.1       bindrcpp_0.2      xml2_1.2.0       
## [25] httr_1.3.1        knitr_1.19        hms_0.4.1        
## [28] rprojroot_1.3-2   glue_1.2.0        R6_2.2.2         
## [31] readxl_1.0.0      foreign_0.8-69    rmarkdown_1.8    
## [34] modelr_0.1.1      reshape2_1.4.3    magrittr_1.5     
## [37] backports_1.1.2   scales_0.5.0.9000 htmltools_0.3.6  
## [40] rvest_0.3.2       assertthat_0.2.0  mnormt_1.5-5     
## [43] colorspace_1.3-2  labeling_0.3      stringi_1.1.6    
## [46] lazyeval_0.2.1    munsell_0.4.3     broom_0.4.3      
## [49] crayon_1.3.4
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>利用ggmap绘制简单地图</title>
      <link>https://taoyan.netlify.app/post/2018-01-03.%E5%88%A9%E7%94%A8ggmap%E7%BB%98%E5%88%B6%E7%AE%80%E5%8D%95%E5%9C%B0%E5%9B%BE/</link>
      <pubDate>Wed, 03 Jan 2018 08:47:05 +0000</pubDate>
      <guid>https://taoyan.netlify.app/post/2018-01-03.%E5%88%A9%E7%94%A8ggmap%E7%BB%98%E5%88%B6%E7%AE%80%E5%8D%95%E5%9C%B0%E5%9B%BE/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/BDJF5FajDc.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;简介&#34;&gt;简介&lt;/h2&gt;
&lt;p&gt;
&lt;a href=&#34;http://stat405.had.co.nz/ggmap.pdf&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;ggmap&lt;/strong&gt;&lt;/a&gt;允许用户从Google地图下载并绘制地图。并且&lt;strong&gt;ggmap&lt;/strong&gt;完美契合&lt;strong&gt;ggplot2&lt;/strong&gt;，因此经&lt;strong&gt;ggmap&lt;/strong&gt;绘制的图形可以作为&lt;strong&gt;ggplot2&lt;/strong&gt;的图层，进而在此基础上不断添加图形元素形成十分复杂的图形。&lt;strong&gt;ggplot2&lt;/strong&gt;+&lt;strong&gt;ggmap&lt;/strong&gt;是地理可视化的利器。&lt;/p&gt;
&lt;h2 id=&#34;安装&#34;&gt;安装&lt;/h2&gt;
&lt;p&gt;安装方法有两种：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# From CRAN
install.packages(&amp;quot;ggmap&amp;quot;)
# From Github,必须先安装devtools
devtools::install_github(&amp;quot;dkahle/ggmap&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;绘制&#34;&gt;绘制&lt;/h2&gt;
&lt;p&gt;先画个杭州的地图，由于调用的是Google地图，可能需要翻墙，同时速度有点慢（访问的是Google地图数据库，由于网络限制数据抓取可能不完整）。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;library(tidyverse)
library(ggmap)
map.hangzhou &amp;lt;- get_map(&amp;quot;Hangzhou&amp;quot;)
ggmap(map.hangzhou)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/j1EhiFDl3B.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;p&gt;这里我们只使用了两个函数，分别是&lt;code&gt;get_map()从Google&lt;/code&gt;中检索并下载地图，之后使用函数&lt;code&gt;ggmap()&lt;/code&gt;绘制地图。同时&lt;strong&gt;ggmap&lt;/strong&gt;支持管道操作(%&amp;gt;%)。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;get_map(&amp;quot;Hangzhou&amp;quot;)%&amp;gt;%ggmap()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/1kf8fI3KH7.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;p&gt;现在我们绘制中国地图&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;get_map(&amp;quot;China&amp;quot;)%&amp;gt;%ggmap()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/jICh8268jb.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;p&gt;可以看出画出来的图形十分不美观，加上&lt;code&gt;zoom&lt;/code&gt;参数之后好看一点。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;get_map(&amp;quot;China&amp;quot;, zoom=4)%&amp;gt;%ggmap()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/kImdmk2DEm.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;p&gt;我们再来看一下天安门&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;get_map(&amp;quot;Tiananmen&amp;quot;,zoom=18)%&amp;gt;%ggmap()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/DL0JHKhK20.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;p&gt;应该足够清晰了
再来看看浙江大学的情形,这里默认显示的是玉泉校区&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;get_map(&amp;quot;ZheJiang University Zijingang Campus&amp;quot;, zoom = 17)%&amp;gt;%ggmap()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/KIIH9be09L.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;p&gt;接下来我们将浙江大学在杭州的几个校区标识出来，分别是紫金港、玉泉、华家池、西溪、之江&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;# 首先创建含有校区名字的数据集
df.zjucampus_locations &amp;lt;- tibble(location=c(&amp;quot;Zhejiang university Zijingang Campus,Hangzhou,China&amp;quot;,&amp;quot;Zhejiang university Yuquan Campus,Hangzhou,China&amp;quot;,&amp;quot;Zhejiang university Zhijiang Campus,Hangzhou,China&amp;quot;,&amp;quot;Zhejiang university Huajiachi Campus,Hangzhou,China&amp;quot;,&amp;quot;Zhejiang university Xixi Campus,Hangzhou,China&amp;quot;))
# 获取经纬度
geo.zjucampus_locations &amp;lt;- geocode(df.zjucampus_locations$location)
# 合并数据集
df.zjucampus_locations &amp;lt;- cbind(df.zjucampus_locations,geo.zjucampus_locations)
# 绘制图形，在地图上将几个校区标识出来
get_map(&amp;quot;Hangzhou&amp;quot;, zoom = 11)%&amp;gt;%ggmap()+
  geom_point(data=df.zjucampus_locations, aes(x=lon, y=lat), color=&amp;quot;red&amp;quot;, size=5)+
  geom_text(data = df.zjucampus_locations,aes(lon, lat, label=c(&amp;quot;Zhejiang university Zijingang Campus&amp;quot;,&amp;quot;Zhejiang university Yuquan Campus&amp;quot;,&amp;quot;Zhejiang university Zhijiang Campus&amp;quot;,&amp;quot;Zhejiang university Huajiachi Campus&amp;quot;,&amp;quot;Zhejiang university Xixi Campus&amp;quot;)), size=3, color=&amp;quot;blue&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/hkgfJKdEeH.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;p&gt;由于网络限制就不调整了，这次能出图已经不容易了。可以看到玉泉校区与华家池校区竟然重叠在一起，通过它们的经纬度数据也发现相同，可能Google地图数据库对于国内来说还不是很好用，但是没办法调用百度地图只能很好的获取国内地图数据，一遇到国外的就歇菜了！&lt;/p&gt;
&lt;h2 id=&#34;sessioninfo&#34;&gt;SessionInfo&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;sessionInfo()
R version 3.4.3 (2017-11-30)
Platform: x86_64-w64-mingw32/x64 (64-bit)
Running under: Windows &amp;gt;= 8 x64 (build 9200)

Matrix products: default

locale:
[1] LC_COLLATE=Chinese (Simplified)_China.936  LC_CTYPE=Chinese (Simplified)_China.936   
[3] LC_MONETARY=Chinese (Simplified)_China.936 LC_NUMERIC=C                              
[5] LC_TIME=Chinese (Simplified)_China.936    

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base     

other attached packages:
 [1] ggmap_2.6.1        forcats_0.2.0      stringr_1.2.0      dplyr_0.7.4        purrr_0.2.4       
 [6] readr_1.1.1        tidyr_0.7.2        tibble_1.4.1       ggplot2_2.2.1.9000 tidyverse_1.2.1   

loaded via a namespace (and not attached):
 [1] reshape2_1.4.3    haven_1.1.0       lattice_0.20-35   colorspace_1.3-2  yaml_2.1.16      
 [6] rlang_0.1.6       pillar_1.0.1      foreign_0.8-69    glue_1.2.0        sp_1.2-5         
[11] modelr_0.1.1      readxl_1.0.0      bindrcpp_0.2      jpeg_0.1-8        bindr_0.1        
[16] plyr_1.8.4        munsell_0.4.3     gtable_0.2.0      cellranger_1.1.0  rvest_0.3.2      
[21] RgoogleMaps_1.4.1 mapproj_1.2-5     psych_1.7.8       knitr_1.18        parallel_3.4.3   
[26] proto_1.0.0       broom_0.4.3       Rcpp_0.12.14      geosphere_1.5-7   scales_0.5.0.9000
[31] jsonlite_1.5      mnormt_1.5-5      rjson_0.2.15      hms_0.4.0         png_0.1-7        
[36] stringi_1.1.6     grid_3.4.3        cli_1.0.0         tools_3.4.3       maps_3.2.0       
[41] magrittr_1.5      lazyeval_0.2.1    crayon_1.3.4      pkgconfig_2.0.1   xml2_1.1.1       
[46] lubridate_1.7.1   assertthat_0.2.0  httr_1.3.1        rstudioapi_0.7    R6_2.2.2         
[51] nlme_3.1-131      compiler_3.4.3   
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>图形组合R包patchwork</title>
      <link>https://taoyan.netlify.app/post/2017-12-18.r%E8%AF%AD%E8%A8%80%E5%8F%AF%E8%A7%86%E5%8C%96%E4%B9%8B%E5%9B%BE%E5%BD%A2%E7%BB%84%E5%90%88r%E5%8C%85patchwork/</link>
      <pubDate>Mon, 18 Dec 2017 16:47:05 +0000</pubDate>
      <guid>https://taoyan.netlify.app/post/2017-12-18.r%E8%AF%AD%E8%A8%80%E5%8F%AF%E8%A7%86%E5%8C%96%E4%B9%8B%E5%9B%BE%E5%BD%A2%E7%BB%84%E5%90%88r%E5%8C%85patchwork/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/9dEjEbJ8kI.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;p&gt;平常我们绘制图形的时候常常要将几幅图形组合在一起，有很多R包可以用于图形组合，经典的是&lt;strong&gt;gridExtra&lt;/strong&gt;，还有&lt;strong&gt;egg&lt;/strong&gt;。今天介绍一个新包
&lt;a href=&#34;https://github.com/thomasp85/patchwork&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;patchwork&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;安装&#34;&gt;安装&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;# install.packages(&amp;quot;devtools&amp;quot;)
devtools::install_github(&amp;quot;thomasp85/patchwork&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;例子&#34;&gt;例子&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;patchwork&lt;/strong&gt;的使用非常简单，就是利用**+**将图形组合起来。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;library(ggplot2)
library(patchwork)
p1 &amp;lt;- ggplot(mtcars)+geom_point(aes(mpg, disp))
p2 &amp;lt;- ggplot(mtcars)+geom_boxplot(aes(gear, disp, group=gear))
# Combine these two plots together
p1+p2
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/7Dd5CG5fgB.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;布局&#34;&gt;布局&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;patchwork&lt;/strong&gt;提供了一个专门用于图形布局的函数&lt;code&gt;plot_layout()&lt;/code&gt;，这样我们就可以自定义布局的行列数了&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;p1+p2+plot_layout(ncol = 1, heights = c(3,1))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/aa0KGc5l3f.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;p&gt;如果需要在组合的图形之间留点空间，使用&lt;code&gt;plot_spacer()&lt;/code&gt;就行了&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;p1+plot_spacer()+p2
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/H2hD8BcCk4.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;p&gt;还可以将不同图形用{}封装，这样可以实现双重布局&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;p3 &amp;lt;- ggplot(mtcars)+geom_smooth(aes(disp, qsec))
p4 &amp;lt;- ggplot(mtcars)+geom_bar(aes(carb))
# nested plots layout
p4+{
  p1+{
    p2+
      p3+
      plot_layout(ncol = 1)
  }
}+
  plot_layout(ncol = 1)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/cG64Jhh0IB.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;高级参数&#34;&gt;高级参数&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;patchwork&lt;/strong&gt;还提供了一些高级参数，比如&lt;code&gt;/&lt;/code&gt;,&lt;code&gt;/&lt;/code&gt;类似于操作符&lt;code&gt;+&lt;/code&gt;，但是它可以将不同plots至于同一个nesting水平，具体如下：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;# first we use + to add plots and layout
(p1+p2)+p3+plot_layout(ncol = 1)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/EKbJdE82IK.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;p&gt;可以看出p1+p2组合之后并没有处于同一nesting水平&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;# then we use /
(p1+p2)/p3 + plot_layout(ncol = 1)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/7HL49dJ1EI.png?raw=true&#34; alt=&#34;mark&#34;&gt;
此时p1+p2先组合在同一水平再与p3组合&lt;/p&gt;
&lt;p&gt;另外再介绍两个操作符：&lt;code&gt;*&lt;/code&gt;和&lt;code&gt;^&lt;/code&gt;
这两个有点类似于正则表达式里的通配符了，主要是为了减轻代码量。比如如果我们需要修改所有plots的背景，就没必要每个plot都修改一遍了。这两个操作符的主要区别是&lt;code&gt;*&lt;/code&gt;只改变处于当前nesting水平的所有plots，&lt;code&gt;^&lt;/code&gt;则修改所有plots，具体如下：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;(p1+(p2+p3)+p4+plot_layout(ncol = 1))*theme_bw()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/KCjBgd0KHg.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;p&gt;可以看到这里只修改了p1和p4的背景主题，(p2+p3)没有修改&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;(p1+(p2+p3)+p4+plot_layout(ncol = 1))^theme_bw()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/CFGBjB6GLK.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;p&gt;这里所有的plots的主题背景都被修改了。
目前这个包还处于开发阶段，将来还有很多功能会被加进去，我们拭目以待吧&lt;/p&gt;
&lt;h2 id=&#34;sessioninfo&#34;&gt;SessionInfo&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;sessionInfo()
## R version 3.4.3 (2017-11-30)
## Platform: x86_64-w64-mingw32/x64 (64-bit)
## Running under: Windows 10 x64 (build 16299)
## 
## Matrix products: default
## 
## locale:
## [1] LC_COLLATE=Chinese (Simplified)_China.936 
## [2] LC_CTYPE=Chinese (Simplified)_China.936   
## [3] LC_MONETARY=Chinese (Simplified)_China.936
## [4] LC_NUMERIC=C                              
## [5] LC_TIME=Chinese (Simplified)_China.936    
## 
## attached base packages:
## [1] stats     graphics  grDevices utils     datasets  methods   base     
## 
## other attached packages:
## [1] patchwork_0.0.1    ggplot2_2.2.1.9000
## 
## loaded via a namespace (and not attached):
##  [1] Rcpp_0.12.14      digest_0.6.13     rprojroot_1.2    
##  [4] plyr_1.8.4        grid_3.4.3        gtable_0.2.0     
##  [7] backports_1.1.2   magrittr_1.5      evaluate_0.10.1  
## [10] scales_0.5.0.9000 rlang_0.1.4       stringi_1.1.6    
## [13] lazyeval_0.2.1    rmarkdown_1.8     labeling_0.3     
## [16] tools_3.4.3       stringr_1.2.0     munsell_0.4.3    
## [19] yaml_2.1.16       compiler_3.4.3    colorspace_1.3-2 
## [22] htmltools_0.3.6   knitr_1.17        tibble_1.3.4
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>R语言可视化之UpSetR包</title>
      <link>https://taoyan.netlify.app/post/2017-10-15.r%E8%AF%AD%E8%A8%80%E5%8F%AF%E8%A7%86%E5%8C%96%E4%B9%8Bupsetr%E5%8C%85/</link>
      <pubDate>Sun, 15 Oct 2017 12:34:08 -0500</pubDate>
      <guid>https://taoyan.netlify.app/post/2017-10-15.r%E8%AF%AD%E8%A8%80%E5%8F%AF%E8%A7%86%E5%8C%96%E4%B9%8Bupsetr%E5%8C%85/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/JK4Hhj821g.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;简介&#34;&gt;简介&lt;/h2&gt;
&lt;p&gt;集合可视化我们用得最多的是韦恩图，韦恩图在集合数少的时候是很好用的，但是当集合数多比如五个以上的时候那就会看花眼了，比如下面这副含有6个集合韦恩图，是发表在&lt;strong&gt;Nature&lt;/strong&gt;上的文章里的，漂亮是漂亮，但是眼都快看花了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/Khec36GlKg.png?raw=true&#34; alt=&#34;banana&#34;&gt;&lt;/p&gt;
&lt;p&gt;今天介绍一个R包&lt;strong&gt;UpSetR&lt;/strong&gt;，专门用来集合可视化，来源于
&lt;a href=&#34;http://caleydo.org/tools/upset/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;UpSet&lt;/a&gt;，Python里面也有一个相似的包&lt;strong&gt;py-upset&lt;/strong&gt;。此外还有个
&lt;a href=&#34;https://gehlenborglab.shinyapps.io/upsetr/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;UpSetR shiny app&lt;/a&gt;以及
&lt;a href=&#34;https://github.com/hms-dbmi/UpSetR-shiny&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;源代码&lt;/a&gt;.&lt;/p&gt;
&lt;!--more--&gt;
&lt;h2 id=&#34;安装&#34;&gt;安装&lt;/h2&gt;
&lt;p&gt;两种方式安装：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#从CRAN安装
install.packages(&amp;quot;UpSetR&amp;quot;)
#从Github上安装
devtools::install_github(&amp;quot;hms-dbmi/UpSetR&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;数据导入&#34;&gt;数据导入&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;UpSetR&lt;/strong&gt;提供了两个函数&lt;code&gt;fromList&lt;/code&gt;以及&lt;code&gt;fromExpression&lt;/code&gt;将数据转换为&lt;strong&gt;UpsetR&lt;/strong&gt;适用的数据格式。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;#fromList
listinput &amp;lt;- list(one = c(1, 2, 3, 5, 7, 8, 11, 12, 13), two = c(1, 2, 4, 5, 
    10), three = c(1, 5, 6, 7, 8, 9, 10, 12, 13))
#fromExpression
expressionInput &amp;lt;- c(one = 2, two = 1, three = 2, `one&amp;amp;two` = 1, `one&amp;amp;three` = 4, 
    `two&amp;amp;three` = 1, `one&amp;amp;two&amp;amp;three` = 2)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;接下来就可以绘制绘制图形了&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;library(UpSetR)
upset(fromList(listinput), order.by = &amp;quot;freq&amp;quot;)
#下面绘制的图形等同于上图
upset(fromExpression(expressionInput), order.by = &amp;quot;freq&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/m0KhE6H1EG.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;参数详解&#34;&gt;参数详解&lt;/h2&gt;
&lt;p&gt;下面所有的例子都将使用&lt;strong&gt;UpSetR&lt;/strong&gt;内置的数据集&lt;code&gt;movies&lt;/code&gt;来绘制。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;#导入数据
movies &amp;lt;- read.csv(system.file(&amp;quot;extdata&amp;quot;, &amp;quot;movies.csv&amp;quot;, package = &amp;quot;UpSetR&amp;quot;), header = TRUE, sep = &amp;quot;;&amp;quot;)
#先大致浏览一下该数据集,数据集太长，就只看前几列
knitr::kable(head(movies[,1:10]))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/56g2k8ba7B.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;该数据集展示的是电影名（name）、发行时间（ReleaseDate）以及电影类型，多了去了就不详讲了，自个可以看去。
&lt;strong&gt;UpsetR&lt;/strong&gt;绘制集合可视化图形使用函数&lt;code&gt;upset()&lt;/code&gt;。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;upset(movies, nsets = 6, number.angles = 30, point.size = 2, line.size = 1, mainbar.y.label = &amp;quot;Genre Intersections&amp;quot;, sets.x.label = &amp;quot;Movies Per Genre&amp;quot;, text.scale = c(1.3, 1.3, 1, 1, 1.5, 1))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/claalIAdBg.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;解释一下上面部分参数：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;nsets: 顾名思义，就是展示几个集合，&lt;code&gt;movies&lt;/code&gt;数据集由20几个集合，不可能全部展示，另外从图中可以看出，这6个集合应该不是按顺序选择的。&lt;/li&gt;
&lt;li&gt;numble.angle: 柱子上的数字看到了吧，这个参数就是调整数字角度的，可有可无的&lt;/li&gt;
&lt;li&gt;mainbar.y.label/sets.x.label：坐标轴名称&lt;/li&gt;
&lt;li&gt;text.scale(): 有六个数字，分别控制c(intersection size title, intersection size tick labels, set size title, set size tick labels, set names, numbers above bars)。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;很多时候我们想要看特定的几个集合，&lt;strong&gt;UpSetR&lt;/strong&gt;满足我们的需求。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;upset(movies, sets = c(&amp;quot;Action&amp;quot;, &amp;quot;Adventure&amp;quot;, &amp;quot;Comedy&amp;quot;, &amp;quot;Drama&amp;quot;, &amp;quot;Mystery&amp;quot;, 
    &amp;quot;Thriller&amp;quot;, &amp;quot;Romance&amp;quot;, &amp;quot;War&amp;quot;, &amp;quot;Western&amp;quot;), mb.ratio = c(0.55, 0.45), order.by = &amp;quot;freq&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/KC6gI5kg3H.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;文中的参数：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;mb.ratio: 控制上方条形图以及下方点图的比例&lt;/li&gt;
&lt;li&gt;order.by: 如何排序，这里&lt;code&gt;freq&lt;/code&gt;表示从大到小排序展示，其他选项有&lt;code&gt;degree&lt;/code&gt;以及先按&lt;code&gt;freq&lt;/code&gt;再按&lt;code&gt;degree&lt;/code&gt;排序。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;各个变量也可以通过参数&lt;code&gt;keep.order&lt;/code&gt;来排序&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;upset(movies, sets = c(&amp;quot;Action&amp;quot;, &amp;quot;Adventure&amp;quot;, &amp;quot;Comedy&amp;quot;, &amp;quot;Drama&amp;quot;, &amp;quot;Mystery&amp;quot;, 
    &amp;quot;Thriller&amp;quot;, &amp;quot;Romance&amp;quot;, &amp;quot;War&amp;quot;, &amp;quot;Western&amp;quot;), mb.ratio = c(0.55, 0.45), order.by = &amp;quot;freq&amp;quot;, 
    keep.order = TRUE)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/KC2EhHf71g.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;也可以按&lt;code&gt;group&lt;/code&gt;进行展示，这图展示的就是按各个变量自身、两个交集、三个交集&amp;hellip;依次展示。参数&lt;code&gt;cutoff&lt;/code&gt;控制每个&lt;code&gt;group&lt;/code&gt;显示几个交集。
参数&lt;code&gt;intersects&lt;/code&gt;控制总共显示几个交集。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;upset(movies, nintersects = 70, group.by = &amp;quot;sets&amp;quot;, cutoff = 7)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/29DlaBFaKc.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;还有很多参数比如控制颜色的参数，点、线大小等，具体可查看?upset&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;queries参数&#34;&gt;queries参数&lt;/h2&gt;
&lt;p&gt;queries参数分为四个部分：&lt;code&gt;query&lt;/code&gt;, &lt;code&gt;param&lt;/code&gt;, &lt;code&gt;color&lt;/code&gt;, &lt;code&gt;active&lt;/code&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;query: 指定哪个query，&lt;strong&gt;UpSetR&lt;/strong&gt;有内置的，也可以自定义，说到底就是一个查询函数&lt;/li&gt;
&lt;li&gt;param: list, query作用于哪个交集&lt;/li&gt;
&lt;li&gt;color：每个query都是一个list，里面可以设置颜色,没设置的话将调用包里默认的调色板&lt;/li&gt;
&lt;li&gt;active：被指定的条形图是否需要颜色覆盖，TRUE的话显示颜色，FALSE的话则在条形图顶端显示三角形&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;内置的intersects-query&#34;&gt;内置的intersects query&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;upset(movies, queries = list(list(query=intersects, params=list(&amp;quot;Drama&amp;quot;, &amp;quot;Comedy&amp;quot;, &amp;quot;Action&amp;quot;), color=&amp;quot;orange&amp;quot;, active=T),
                             list(query=intersects, params=list(&amp;quot;Drama&amp;quot;), color=&amp;quot;red&amp;quot;, active=F),
                             list(query=intersects, params=list(&amp;quot;Action&amp;quot;, &amp;quot;Drama&amp;quot;), active=T)))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/IF81B9E86k.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;内置的elements-query&#34;&gt;内置的&lt;code&gt;elements&lt;/code&gt; query&lt;/h3&gt;
&lt;p&gt;此query可以可视化特定交集在不同条件下的情况&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;upset(movies, queries = list(list(query=elements, params=list(&amp;quot;AvgRating&amp;quot;, 3.5, 4.1), color=&amp;quot;blue&amp;quot;, active=T),
                             list(query=elements, params=list(&amp;quot;ReleaseDate&amp;quot;, 1980, 1990, 2000), color=&amp;quot;red&amp;quot;, active=F)))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/66a2m1gmE2.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;自定义一个query&#34;&gt;自定义一个&lt;code&gt;query&lt;/code&gt;&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;myfunc &amp;lt;- function(row, release, rating){
  newdata &amp;lt;- (row[&amp;quot;ReleaseDate&amp;quot;]%in%release)&amp;amp;(row[&amp;quot;AvgRating&amp;quot;]&amp;gt;rating)
}
upset(movies, queries = list(list(query=myfunc, params=list(c(1950,1960,1990,2000), 3.0), color=&amp;quot;red&amp;quot;, active=T)))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/2B75j4641e.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;添加query图例&#34;&gt;添加&lt;code&gt;query&lt;/code&gt;图例&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;upset(movies, query.legend = &amp;quot;top&amp;quot;, queries = list(list(query = intersects, 
    params = list(&amp;quot;Drama&amp;quot;, &amp;quot;Comedy&amp;quot;, &amp;quot;Action&amp;quot;), color = &amp;quot;orange&amp;quot;, active = T, 
    query.name = &amp;quot;Funny action&amp;quot;), list(query = intersects, params = list(&amp;quot;Drama&amp;quot;), 
    color = &amp;quot;red&amp;quot;, active = F), list(query = intersects, params = list(&amp;quot;Action&amp;quot;, 
    &amp;quot;Drama&amp;quot;), active = T, query.name = &amp;quot;Emotional action&amp;quot;)))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/jffFG8aKD6.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;参数attributeplots&#34;&gt;参数&lt;code&gt;attribute.plots&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;主要是用于添加属性图，内置有柱形图、散点图、热图等&lt;/p&gt;
&lt;h3 id=&#34;柱形图&#34;&gt;柱形图&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;upset(movies, main.bar.color = &amp;quot;black&amp;quot;, queries = list(list(query = intersects, 
    params = list(&amp;quot;Drama&amp;quot;), active = T)), attribute.plots = list(gridrows = 50, 
    plots = list(list(plot = histogram, x = &amp;quot;ReleaseDate&amp;quot;, queries = F), list(plot = histogram, 
        x = &amp;quot;AvgRating&amp;quot;, queries = T)), ncols = 2))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/gfc18maAjI.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;散点图&#34;&gt;散点图&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;upset(movies, main.bar.color = &amp;quot;black&amp;quot;, queries = list(list(query = intersects, 
    params = list(&amp;quot;Drama&amp;quot;), color = &amp;quot;red&amp;quot;, active = F), list(query = intersects, 
    params = list(&amp;quot;Action&amp;quot;, &amp;quot;Drama&amp;quot;), active = T), list(query = intersects, 
    params = list(&amp;quot;Drama&amp;quot;, &amp;quot;Comedy&amp;quot;, &amp;quot;Action&amp;quot;), color = &amp;quot;orange&amp;quot;, active = T)), 
    attribute.plots = list(gridrows = 45, plots = list(list(plot = scatter_plot, 
        x = &amp;quot;ReleaseDate&amp;quot;, y = &amp;quot;AvgRating&amp;quot;, queries = T), list(plot = scatter_plot, 
        x = &amp;quot;AvgRating&amp;quot;, y = &amp;quot;Watches&amp;quot;, queries = F)), ncols = 2), query.legend = &amp;quot;bottom&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/JK4Hhj821g.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;箱线图&#34;&gt;箱线图&lt;/h3&gt;
&lt;p&gt;箱线图可以展示数据的分布,通过参数&lt;code&gt;boxplot.summary&lt;/code&gt;控制，最多可以一次性显示两个箱线图&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;upset(movies, boxplot.summary = c(&amp;quot;AvgRating&amp;quot;, &amp;quot;ReleaseDate&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/FAH4If1bgh.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;还有一个十分重要的功能&lt;strong&gt;Incorporating Set Metadata&lt;/strong&gt;这里就不讲了，有兴趣的可以参考这份
&lt;a href=&#34;https://cran.rstudio.com/web/packages/UpSetR/vignettes/set.metadata.plots.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;文档&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;sessioninfo&#34;&gt;SessionInfo&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;sessionInfo()
## R version 3.4.2 (2017-09-28)
## Platform: x86_64-w64-mingw32/x64 (64-bit)
## Running under: Windows 10 x64 (build 15063)
## 
## Matrix products: default
## 
## locale:
## [1] LC_COLLATE=Chinese (Simplified)_China.936 
## [2] LC_CTYPE=Chinese (Simplified)_China.936   
## [3] LC_MONETARY=Chinese (Simplified)_China.936
## [4] LC_NUMERIC=C                              
## [5] LC_TIME=Chinese (Simplified)_China.936    
## 
## attached base packages:
## [1] stats     graphics  grDevices utils     datasets  methods   base     
## 
## other attached packages:
## [1] UpSetR_1.3.3
## 
## loaded via a namespace (and not attached):
##  [1] Rcpp_0.12.13     knitr_1.17       magrittr_1.5     munsell_0.4.3   
##  [5] colorspace_1.3-2 rlang_0.1.2      stringr_1.2.0    highr_0.6       
##  [9] plyr_1.8.4       tools_3.4.2      grid_3.4.2       gtable_0.2.0    
## [13] htmltools_0.3.6  yaml_2.1.14      lazyeval_0.2.0   rprojroot_1.2   
## [17] digest_0.6.12    tibble_1.3.4     gridExtra_2.3    ggplot2_2.2.1   
## [21] evaluate_0.10.1  rmarkdown_1.6    labeling_0.3     stringi_1.1.5   
## [25] compiler_3.4.2   scales_0.5.0     backports_1.1.1
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>ggplot2高效实用指南</title>
      <link>https://taoyan.netlify.app/post/2017-09-19.ggplot2%E9%AB%98%E6%95%88%E5%AE%9E%E7%94%A8%E6%8C%87%E5%8D%97/</link>
      <pubDate>Tue, 19 Sep 2017 08:29:46 +0000</pubDate>
      <guid>https://taoyan.netlify.app/post/2017-09-19.ggplot2%E9%AB%98%E6%95%88%E5%AE%9E%E7%94%A8%E6%8C%87%E5%8D%97/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/emJBf4A306.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;简介&#34;&gt;简介&lt;/h2&gt;
&lt;p&gt;本文内容基本是来源于
&lt;a href=&#34;http://www.sthda.com/english/wiki/be-awesome-in-ggplot2-a-practical-guide-to-be-highly-effective-r-software-and-data-visualization&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;STHDA&lt;/a&gt;，这是一份十分详细的&lt;strong&gt;ggplot2&lt;/strong&gt;使用指南，因此我将其翻译成中文，一是有助于我自己学习理解，另外其他R语言爱好者或者可视化爱好者可以用来学习。翻译过程肯定不能十全十美，各位读者有建议或改进的话，十分欢迎发&lt;strong&gt;Email&lt;/strong&gt;(&lt;a href=&#34;mailto:tyan@zju.edu.cn&#34;&gt;tyan@zju.edu.cn&lt;/a&gt;)给我。&lt;/p&gt;
&lt;p&gt;
&lt;a href=&#34;https://ggplot2.tidyverse.org/reference/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;ggplot2&lt;/strong&gt;&lt;/a&gt;是由&lt;strong&gt;Hadley Wickham&lt;/strong&gt;创建的一个十分强大的可视化R包。按照&lt;strong&gt;ggplot2&lt;/strong&gt;的绘图理念，Plot(图)= data(数据集)+ Aesthetics(美学映射)+ Geometry(几何对象)：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;data: 数据集，主要是data frame；&lt;/li&gt;
&lt;li&gt;Aesthetics: 美学映射，比如将变量映射给x,y坐标轴，或者映射给颜色、大小、形状等图形属性；&lt;/li&gt;
&lt;li&gt;Geometry: 几何对象，比如柱形图、直方图、散点图、线图、密度图等。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在&lt;strong&gt;ggplot2&lt;/strong&gt;中有两个主要绘图函数：qplot()以及ggplot()。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;qplot(): 顾名思义，快速绘图；&lt;/li&gt;
&lt;li&gt;ggplot()：此函数才是&lt;strong&gt;ggplot2&lt;/strong&gt;的精髓，远比qplot()强大，可以一步步绘制十分复杂的图形。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;由&lt;strong&gt;ggplot2&lt;/strong&gt;绘制出来的ggplot图可以作为一个变量，然后由print()显示出来。&lt;/p&gt;
&lt;h2 id=&#34;图形类型&#34;&gt;图形类型&lt;/h2&gt;
&lt;p&gt;根据数据集，&lt;strong&gt;ggplot2&lt;/strong&gt;提供不同的方法绘制图形，主要是为下面几类数据类型提供绘图方法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一个变量x: 连续或离散&lt;/li&gt;
&lt;li&gt;两个变量x&amp;amp;y：连续和(或)离散&lt;/li&gt;
&lt;li&gt;连续双变量分布x&amp;amp;y: 都是连续&lt;/li&gt;
&lt;li&gt;误差棒&lt;/li&gt;
&lt;li&gt;地图&lt;/li&gt;
&lt;li&gt;三变量&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;安装及加载&#34;&gt;安装及加载&lt;/h2&gt;
&lt;p&gt;安装&lt;strong&gt;ggplot2&lt;/strong&gt;提供三种方式：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#直接安装tidyverse，一劳永逸（推荐,数据分析大礼包）
install.packages(&amp;quot;tidyverse&amp;quot;)
#直接安装ggplot2
install.packages(&amp;quot;ggplot2&amp;quot;)
#从Github上安装最新的版本，先安装devtools(如果没安装的话)
devtools::install_github(&amp;quot;tidyverse/ggplot2&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;加载&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;library(ggplot2)
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;数据准备&#34;&gt;数据准备&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;数据集应该数据框data.frame&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;本文将使用数据集&lt;strong&gt;mtcars&lt;/strong&gt;。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;#load the data set
data(mtcars)
df &amp;lt;- mtcars[, c(&amp;quot;mpg&amp;quot;,&amp;quot;cyl&amp;quot;,&amp;quot;wt&amp;quot;)]
#将cyl转为因子型factor
df$cyl &amp;lt;- as.factor(df$cyl)
head(df)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##                    mpg cyl    wt
## Mazda RX4         21.0   6 2.620
## Mazda RX4 Wag     21.0   6 2.875
## Datsun 710        22.8   4 2.320
## Hornet 4 Drive    21.4   6 3.215
## Hornet Sportabout 18.7   8 3.440
## Valiant           18.1   6 3.460
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;qplot&#34;&gt;qplot()&lt;/h2&gt;
&lt;p&gt;qplot()类似于R基本绘图函数plot(),可以快速绘制常见的几种图形：散点图、箱线图、小提琴图、直方图以及密度曲线图。其绘图格式为：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;qplot(x, y=NULL, data, geom=&amp;quot;auto&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;其中：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;x,y: 根据需要绘制的图形使用;&lt;/li&gt;
&lt;li&gt;data：数据集;&lt;/li&gt;
&lt;li&gt;geom：几何图形，变量x,y同时指定的话默认为散点图，只指定x的话默认为直方图。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;散点图&#34;&gt;散点图&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;qplot(x=mpg, y=wt, data=df, geom = &amp;quot;point&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/DlJaE4eke3.png?raw=true&#34; alt=&#34;&#34;&gt;
也可以添加平滑曲线&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;qplot(x=mpg, y=wt, data = df, geom = c(&amp;quot;point&amp;quot;, &amp;quot;smooth&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/i3lHIh2jdD.png?raw=true&#34; alt=&#34;&#34;&gt;
还有其他参数可以修改，比如点的形状、大小、颜色等&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;#将变量cyl映射给颜色和形状
qplot(x=mpg, y=wt, data = df, colour=cyl, shape=cyl)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/D6Aflkkhab.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;箱线图小提琴图点图&#34;&gt;箱线图、小提琴图、点图&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;#构造数据集
set.seed(1234)
wdata &amp;lt;- data.frame(
  sex=factor(rep(c(&amp;quot;F&amp;quot;, &amp;quot;M&amp;quot;), each=200)),
  weight=c(rnorm(200, 55), rnorm(200, 58))
)
head(wdata)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   sex   weight
## 1   F 53.79293
## 2   F 55.27743
## 3   F 56.08444
## 4   F 52.65430
## 5   F 55.42912
## 6   F 55.50606
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;箱线图&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;qplot(sex, weight, data = wdata, geom = &amp;quot;boxplot&amp;quot;, fill=sex)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/92K2e20idg.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;小提琴图&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;qplot(sex, weight, data = wdata, geom = &amp;quot;violin&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/3m8H660Cl9.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;点图&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;qplot(sex, weight, data = wdata, geom = &amp;quot;dotplot&amp;quot;, stackdir=&amp;quot;center&amp;quot;, binaxis=&amp;quot;y&amp;quot;, dotsize=0.5, color=sex)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/Hb7G4J8875.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;直方图密度图&#34;&gt;直方图、密度图&lt;/h3&gt;
&lt;p&gt;直方图&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;qplot(weight, data = wdata, geom = &amp;quot;histogram&amp;quot;, fill=sex)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/gd448CcLDb.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;密度图&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;qplot(weight, data = wdata, geom = &amp;quot;density&amp;quot;, color=sex, linetype=sex)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/dl77b5BDdm.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;ggplot&#34;&gt;ggplot()&lt;/h2&gt;
&lt;p&gt;上文中的qplot()绘制散点图：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;qplot(x=mpg, y=wt, data=df, geom = &amp;quot;point&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;在ggplot()中完全可以如下实现：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;ggplot(data=df, aes(x=mpg, y=wt))+
  geom_point()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/80fkCC4Kgh.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;改变点形状、大小、颜色等属性&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;ggplot(data=df, aes(x=mpg, y=wt))+geom_point(color=&amp;quot;blue&amp;quot;, size=2, shape=23)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/6LbL12Jmhm.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;绘图过程中常常要用到转换(transformation),这时添加图层的另一个方法是用stat_*()函数。
下例中的geom_density()与stat_density()是等价的&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ggplot(wdata, aes(x=weight))+geom_density()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;等价于&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;ggplot(wdata, aes(x=weight))+stat_density()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/D3ca6EAf3F.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;对于每一种几何图形。&lt;strong&gt;ggplot2&lt;/strong&gt; 基本都提供了 geom_*()*和 stat_*()*&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;一个变量连续型&#34;&gt;一个变量：连续型&lt;/h3&gt;
&lt;p&gt;使用数据集wdata，先计算出不同性别的体重平均值&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;library(plyr)
mu &amp;lt;- ddply(wdata, &amp;quot;sex&amp;quot;, summarise, grp.mean=mean(weight))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;先绘制一个图层a,后面逐步添加图层&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;a &amp;lt;- ggplot(wdata, aes(x=weight))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;可能添加的图层有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对于一个连续变量：
&lt;ul&gt;
&lt;li&gt;面积图geom_area()&lt;/li&gt;
&lt;li&gt;密度图geom_density()&lt;/li&gt;
&lt;li&gt;点图geom_dotplot()&lt;/li&gt;
&lt;li&gt;频率多边图geom_freqpoly()&lt;/li&gt;
&lt;li&gt;直方图geom_histogram()&lt;/li&gt;
&lt;li&gt;经验累积密度图stat_ecdf()&lt;/li&gt;
&lt;li&gt;QQ图stat_qq()&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;对于一个离散变量：
&lt;ul&gt;
&lt;li&gt;条形图geom_bar()&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/gcLBC7cG47.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;面积图&#34;&gt;面积图&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;a+geom_area(stat = &amp;quot;bin&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/J288ccH2m5.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;改变颜色&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;a+geom_area(aes(fill=sex), stat = &amp;quot;bin&amp;quot;, alpha=0.6)+
  theme_classic()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/LIj4mJbKb2.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注意：y轴默认为变量weight的数量即count，如果y轴要显示密度，可用以下代码：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;a+geom_area(aes(y=..density..), stat = &amp;quot;bin&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/kkCc85KCeJ.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;可以通过修改不同属性如透明度、填充颜色、大小、线型等自定义图形：&lt;/p&gt;
&lt;h4 id=&#34;密度图&#34;&gt;密度图&lt;/h4&gt;
&lt;p&gt;使用以下函数：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;geom_density():绘制密度图&lt;/li&gt;
&lt;li&gt;geom_vline():添加竖直线&lt;/li&gt;
&lt;li&gt;scale_color_manual():手动修改颜色&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;a+geom_density()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/c1EL7I2a49.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;根据sex修改颜色，将sex映射给line颜色&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;a+geom_density(aes(color=sex))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/72Ahbf7K6h.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;修改填充颜色以及透明度&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;a+geom_density(aes(fill=sex), alpha=0.4)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/ejijLE9IfG.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;添加均值线以及手动修改颜色&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;a+geom_density(aes(color=sex))+
  geom_vline(data=mu, aes(xintercept=grp.mean, color=sex), linetype=&amp;quot;dashed&amp;quot;)+
  scale_color_manual(values = c(&amp;quot;red&amp;quot;, &amp;quot;blue&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/mAFhH7lleK.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;点图&#34;&gt;点图&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;a+geom_dotplot()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/H1mDL0HCJI.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;将sex映射给颜色&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;a+geom_dotplot(aes(fill=sex))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/6bfHaEcBAl.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;手动修改颜色&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;a+geom_dotplot(aes(fill=sex))+
  scale_fill_manual(values=c(&amp;quot;#999999&amp;quot;, &amp;quot;#E69F00&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/kiE9Lci30h.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;频率多边图&#34;&gt;频率多边图&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;a+geom_freqpoly()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/K40Fch448J.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;y轴显示为密度&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;a+geom_freqpoly(aes(y=..density..))+
  theme_minimal()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/CgCf1eAgf8.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;修改颜色以及线型&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;a+geom_freqpoly(aes(color=sex, linetype=sex))+
  theme_minimal()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/jaaBibcFjH.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;直方图&#34;&gt;直方图&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;a+geom_histogram()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/bHilai3a9l.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;将sex映射给线颜色&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;a+geom_histogram(aes(color=sex), fill=&amp;quot;white&amp;quot;, position = &amp;quot;dodge&amp;quot;)+theme_classic()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/eD7iLDJId1.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;经验累积密度图&#34;&gt;经验累积密度图&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;a+stat_ecdf()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/f83Imkm4jm.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;qq图&#34;&gt;QQ图&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;ggplot(data = mtcars, aes(sample=mpg))+stat_qq()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/e7G7hbeLID.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;一个离散变量&#34;&gt;一个离散变量&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;#加载数据集
data(mpg)
b &amp;lt;- ggplot(mpg, aes(x=fl))
b+geom_bar()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/b4FJFb7H99.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;修改填充颜色&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;b+geom_bar(fill=&amp;quot;steelblue&amp;quot;, color=&amp;quot;black&amp;quot;)+theme_classic()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/ih6I2ammG4.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;两个变量xy皆连续&#34;&gt;两个变量：x,y皆连续&lt;/h3&gt;
&lt;p&gt;使用数据集mtcars， 先创建一个ggplot图层&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;b &amp;lt;- ggplot(data = mtcars, aes(x=wt, y=mpg))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;可能添加的图层有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;geom_point():散点图&lt;/li&gt;
&lt;li&gt;geom_smooth():平滑线&lt;/li&gt;
&lt;li&gt;geom_quantile():分位线&lt;/li&gt;
&lt;li&gt;geom_rug():边际地毯线&lt;/li&gt;
&lt;li&gt;geom_jitter():避免重叠&lt;/li&gt;
&lt;li&gt;geom_text():添加文本注释&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/ld1EAJgd88.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;散点图-1&#34;&gt;散点图&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;b+geom_point()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/796GlJi3Al.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;将变量cyl映射给点的颜色和形状&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;b + geom_point(aes(color = factor(cyl), shape = factor(cyl)))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/J6dfJ1EL33.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;自定义颜色&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;b+geom_point(aes(color=factor(cyl), shape=factor(cyl)))+
  scale_color_manual(values=c(&amp;quot;#999999&amp;quot;, &amp;quot;#E69F00&amp;quot;, &amp;quot;#56B4E9&amp;quot;))+theme_classic()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/3695bEj0Ha.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;平滑线&#34;&gt;平滑线&lt;/h4&gt;
&lt;p&gt;可以添加回归曲线&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;b+geom_smooth()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/1hJGKGeLc2.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;散点图+回归线&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;b+geom_point()+
  geom_smooth(method = &amp;quot;lm&amp;quot;, se=FALSE)#去掉置信区间
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/Gl47fkb2c2.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;使用loess方法&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;b+geom_point()+
  geom_smooth(method = &amp;quot;loess&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/6jaCLAL3Fc.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;将变量映射给颜色和形状&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;b+geom_point(aes(color=factor(cyl), shape=factor(cyl)))+
  geom_smooth(aes(color=factor(cyl), shape=factor(cyl)), method = &amp;quot;lm&amp;quot;, se=FALSE, fullrange=TRUE)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/7hjfJ89K4c.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;分位线&#34;&gt;分位线&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;ggplot(data = mpg, aes(cty, hwy))+
  geom_point()+geom_quantile()+
  theme_minimal()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/l0F005kgih.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;边际地毯线&#34;&gt;边际地毯线&lt;/h4&gt;
&lt;p&gt;使用数据集&lt;strong&gt;faithful&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;ggplot(data = faithful, aes(x=eruptions, y=waiting))+
  geom_point()+geom_rug()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/7H7BlJE35k.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;避免重叠&#34;&gt;避免重叠&lt;/h4&gt;
&lt;p&gt;实际上&lt;code&gt;geom_jitter()&lt;/code&gt;是&lt;code&gt;geom_point(position=&amp;quot;jitter&amp;quot;)&lt;/code&gt;的简称,下面使用数据集&lt;strong&gt;mpg&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;p &amp;lt;- ggplot(data = mpg, aes(displ, hwy))
p+geom_point()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/Ad2aBaaEED.png?raw=true&#34; alt=&#34;&#34;&gt;
增加抖动防止重叠&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;p+geom_jitter(width = 0.5, height = 0.5)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/DmKBbIGK2c.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;其中两个参数：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;width：x轴方向的抖动幅度&lt;/li&gt;
&lt;li&gt;height：y轴方向的抖动幅度&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;文本注释&#34;&gt;文本注释&lt;/h4&gt;
&lt;p&gt;参数label用来指定注释标签&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;b+geom_text(aes(label=rownames(mtcars)))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/L6CaLD26ga.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;两个变量连续二元分布&#34;&gt;两个变量：连续二元分布&lt;/h3&gt;
&lt;p&gt;使用数据集&lt;strong&gt;diamonds&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;head(diamonds[, c(&amp;quot;carat&amp;quot;, &amp;quot;price&amp;quot;)])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 6 x 2
##   carat price
##   &amp;lt;dbl&amp;gt; &amp;lt;int&amp;gt;
## 1  0.23   326
## 2  0.21   326
## 3  0.23   327
## 4  0.29   334
## 5  0.31   335
## 6  0.24   336
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;创建ggplot图层,后面再逐步添加图层&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;c &amp;lt;- ggplot(data=diamonds, aes(carat, price))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;可添加的图层有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;geom_bin2d(): 二维封箱热图&lt;/li&gt;
&lt;li&gt;geom_hex(): 六边形封箱图&lt;/li&gt;
&lt;li&gt;geom_density_2d(): 二维等高线密度图&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/mIdJKh6F1G.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;二维封箱热图&#34;&gt;二维封箱热图&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;geom_bin2d()&lt;/code&gt;将点的数量用矩形封装起来，通过颜色深浅来反映点密度&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;c+geom_bin2d()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/BgC3g377mE.png?raw=true&#34; alt=&#34;&#34;&gt;
设置bin的数量&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;c+geom_bin2d(bins=150)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/4ejegHkcbF.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;六边形封箱图&#34;&gt;六边形封箱图&lt;/h4&gt;
&lt;p&gt;geom_hex()依赖于另一个R包&lt;strong&gt;hexbin&lt;/strong&gt;，所以没安装的先安装：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;install.packages(&amp;quot;hexbin&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;library(hexbin)
c+geom_hex()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/f9Fbl2IAKj.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;修改bin的数目&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;c+geom_hex(bins=10)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/bIc44CGdC8.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;二维等高线密度图&#34;&gt;二维等高线密度图&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;sp &amp;lt;- ggplot(faithful, aes(x=eruptions, y=waiting))
sp+geom_point()+ geom_density_2d()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/imG9fLLlb6.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;两个变量连续函数&#34;&gt;两个变量：连续函数&lt;/h3&gt;
&lt;p&gt;主要是如何通过线来连接两个变量，使用数据集&lt;strong&gt;economics&lt;/strong&gt;。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;head(economics)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 6 x 6
##         date   pce    pop psavert uempmed unemploy
##       &amp;lt;date&amp;gt; &amp;lt;dbl&amp;gt;  &amp;lt;int&amp;gt;   &amp;lt;dbl&amp;gt;   &amp;lt;dbl&amp;gt;    &amp;lt;int&amp;gt;
## 1 1967-07-01 507.4 198712    12.5     4.5     2944
## 2 1967-08-01 510.5 198911    12.5     4.7     2945
## 3 1967-09-01 516.3 199113    11.7     4.6     2958
## 4 1967-10-01 512.9 199311    12.5     4.9     3143
## 5 1967-11-01 518.1 199498    12.5     4.7     3066
## 6 1967-12-01 525.8 199657    12.1     4.8     3018
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;先创建一个ggplot图层，后面逐步添加图层&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;d &amp;lt;- ggplot(data = economics, aes(x=date, y=unemploy))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;可添加的图层有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;geom_area():面积图&lt;/li&gt;
&lt;li&gt;geom_line()：折线图&lt;/li&gt;
&lt;li&gt;geom_step(): 阶梯图&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;面积图-1&#34;&gt;面积图&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;d+geom_area()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/dj4fHa6Kh2.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;线图&#34;&gt;线图&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;d+geom_line()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/DhLc531J92.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;阶梯图&#34;&gt;阶梯图&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;set.seed(1111)
ss &amp;lt;- economics[sample(1:nrow(economics), 20),]
ggplot(ss, aes(x=date, y=unemploy))+
  geom_step()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/l5lHl5944G.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;两个变量x离散y连续&#34;&gt;两个变量：x离散，y连续&lt;/h3&gt;
&lt;p&gt;使用数据集&lt;strong&gt;ToothGrowth&lt;/strong&gt;,其中的变量len(Tooth length)是连续变量，dose是离散变量。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;ToothGrowth$dose &amp;lt;- as.factor(ToothGrowth$dose)
head(ToothGrowth)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    len supp dose
## 1  4.2   VC  0.5
## 2 11.5   VC  0.5
## 3  7.3   VC  0.5
## 4  5.8   VC  0.5
## 5  6.4   VC  0.5
## 6 10.0   VC  0.5
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;创建图层&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;e &amp;lt;- ggplot(data = ToothGrowth, aes(x=dose, y=len))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;可添加的图层有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;geom_boxplot(): 箱线图&lt;/li&gt;
&lt;li&gt;geom_violin()：小提琴图&lt;/li&gt;
&lt;li&gt;geom_dotplot()：点图&lt;/li&gt;
&lt;li&gt;geom_jitter(): 带状图&lt;/li&gt;
&lt;li&gt;geom_line(): 线图&lt;/li&gt;
&lt;li&gt;geom_bar(): 条形图&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/3F447J6d7L.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;箱线图&#34;&gt;箱线图&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;e+geom_boxplot()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/37J7f7hfCJ.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;添加有缺口的箱线图&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;e+geom_boxplot(notch = TRUE)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/952cibHB9E.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;按dose分组映射给颜色&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;e+geom_boxplot(aes(color=dose))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/15dJjbIGkB.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;将dose映射给填充颜色&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;e+geom_boxplot(aes(fill=dose))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/Am1A6Efaa6.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;按supp进行分类并映射给填充颜色&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;ggplot(ToothGrowth, aes(x=dose, y=len))+ geom_boxplot(aes(fill=supp))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/jfFFF1Hh99.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;小提琴图&#34;&gt;小提琴图&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;e+geom_violin(trim = FALSE)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/fG1DmbmaIB.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;添加中值点&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;e+geom_violin(trim = FALSE)+
  stat_summary(fun.data = mean_sdl, fun.args = list(mult=1), 
               geom=&amp;quot;pointrange&amp;quot;, color=&amp;quot;red&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/GAkDaEHJe2.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;与箱线图结合&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;e+geom_violin(trim = FALSE)+
  geom_boxplot(width=0.2)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/igef2H376K.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;将dose映射给颜色进行分组&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;e+geom_violin(aes(color=dose), trim = FALSE)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/g6G0aI5DaE.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;点图-1&#34;&gt;点图&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;e+geom_dotplot(binaxis = &amp;quot;y&amp;quot;, stackdir = &amp;quot;center&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/60aB2FKkBj.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;添加中值点&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;e + geom_dotplot(binaxis = &amp;quot;y&amp;quot;, stackdir = &amp;quot;center&amp;quot;) + 
  stat_summary(fun.data=mean_sdl, color = &amp;quot;red&amp;quot;,geom = &amp;quot;pointrange&amp;quot;,fun.args=list(mult=1))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/B1A5h69HDF.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;与箱线图结合&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;e + geom_boxplot() + 
  geom_dotplot(binaxis = &amp;quot;y&amp;quot;, stackdir = &amp;quot;center&amp;quot;) 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/JkebcfeiHH.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;添加小提琴图&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;e + geom_violin(trim = FALSE) +
  geom_dotplot(binaxis=&#39;y&#39;, stackdir=&#39;center&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/DGm19F7hde.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;将dose映射给颜色以及填充色&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;e + geom_dotplot(aes(color = dose, fill = dose), 
                 binaxis = &amp;quot;y&amp;quot;, stackdir = &amp;quot;center&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/AGABHiI43E.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;带状图&#34;&gt;带状图&lt;/h4&gt;
&lt;p&gt;带状图是一种一维散点图，当样本量很小时，与箱线图相当&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;e + geom_jitter(position=position_jitter(0.2))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/KE0EHFl7h0.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;添加中值点&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;e + geom_jitter(position=position_jitter(0.2)) + 
  stat_summary(fun.data=&amp;quot;mean_sdl&amp;quot;,  fun.args = list(mult=1), 
               geom=&amp;quot;pointrange&amp;quot;, color = &amp;quot;red&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/GF9c4kHDKI.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;p&gt;与点图结合&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;e + geom_jitter(position=position_jitter(0.2)) + 
  geom_dotplot(binaxis = &amp;quot;y&amp;quot;, stackdir = &amp;quot;center&amp;quot;) 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/238j5KGmEB.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;p&gt;与小提琴图结合&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;e + geom_violin(trim = FALSE) +
  geom_jitter(position=position_jitter(0.2))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/lEADE3fA1h.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;p&gt;将dose映射给颜色和形状&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;e +  geom_jitter(aes(color = dose, shape = dose),
                 position=position_jitter(0.2))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/7lKfKkE5d6.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;线图-1&#34;&gt;线图&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;#构造数据集
df &amp;lt;- data.frame(supp=rep(c(&amp;quot;VC&amp;quot;, &amp;quot;OJ&amp;quot;), each=3),
                dose=rep(c(&amp;quot;D0.5&amp;quot;, &amp;quot;D1&amp;quot;, &amp;quot;D2&amp;quot;),2),
                len=c(6.8, 15, 33, 4.2, 10, 29.5))
head(df)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   supp dose  len
## 1   VC D0.5  6.8
## 2   VC   D1 15.0
## 3   VC   D2 33.0
## 4   OJ D0.5  4.2
## 5   OJ   D1 10.0
## 6   OJ   D2 29.5
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;将supp映射线型&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;ggplot(df, aes(x=dose, y=len, group=supp)) +
  geom_line(aes(linetype=supp))+
  geom_point()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/Bjl125A2Im.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;p&gt;修改线型、点的形状以及颜色&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;ggplot(df, aes(x=dose, y=len, group=supp)) +
  geom_line(aes(linetype=supp, color = supp))+
  geom_point(aes(shape=supp, color = supp))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/j9e39B9cKB.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;条形图&#34;&gt;条形图&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;#构造数据集
df &amp;lt;- data.frame(dose=c(&amp;quot;D0.5&amp;quot;, &amp;quot;D1&amp;quot;, &amp;quot;D2&amp;quot;),
                len=c(4.2, 10, 29.5))
head(df)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   dose  len
## 1 D0.5  4.2
## 2   D1 10.0
## 3   D2 29.5
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;df2 &amp;lt;- data.frame(supp=rep(c(&amp;quot;VC&amp;quot;, &amp;quot;OJ&amp;quot;), each=3),
                dose=rep(c(&amp;quot;D0.5&amp;quot;, &amp;quot;D1&amp;quot;, &amp;quot;D2&amp;quot;),2),
                len=c(6.8, 15, 33, 4.2, 10, 29.5))
head(df2)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   supp dose  len
## 1   VC D0.5  6.8
## 2   VC   D1 15.0
## 3   VC   D2 33.0
## 4   OJ D0.5  4.2
## 5   OJ   D1 10.0
## 6   OJ   D2 29.5
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;创建图层&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;f &amp;lt;- ggplot(df, aes(x = dose, y = len))
f + geom_bar(stat = &amp;quot;identity&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/FF7A37l9j4.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;p&gt;修改填充色以及添加标签&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;f + geom_bar(stat=&amp;quot;identity&amp;quot;, fill=&amp;quot;steelblue&amp;quot;)+
  geom_text(aes(label=len), vjust=-0.3, size=3.5)+
  theme_minimal()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/hBa9871IE9.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;p&gt;将dose映射给条形图颜色&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;f + geom_bar(aes(color = dose),
             stat=&amp;quot;identity&amp;quot;, fill=&amp;quot;white&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/HIGAAJLiFl.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;p&gt;修改填充色&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;f + geom_bar(aes(fill = dose), stat=&amp;quot;identity&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/LGFlfJGmHi.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;p&gt;将变量supp映射给填充色，从而达到分组效果&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;g &amp;lt;- ggplot(data=df2, aes(x=dose, y=len, fill=supp)) 
g + geom_bar(stat = &amp;quot;identity&amp;quot;)#position默认为stack
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/dLGm6lij04.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;p&gt;修改position为dodge&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;g + geom_bar(stat=&amp;quot;identity&amp;quot;, position=position_dodge())
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/Di23jj9kC9.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;两个变量xy皆离散&#34;&gt;两个变量：x、y皆离散&lt;/h3&gt;
&lt;p&gt;使用数据集diamonds中的两个离散变量color以及cut&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;ggplot(diamonds, aes(cut, color)) +
  geom_jitter(aes(color = cut), size = 0.5)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/c8Fh5DI7cE.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;两个变量绘制误差图&#34;&gt;两个变量：绘制误差图&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;df &amp;lt;- ToothGrowth
df$dose &amp;lt;- as.factor(df$dose)
head(df)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    len supp dose
## 1  4.2   VC  0.5
## 2 11.5   VC  0.5
## 3  7.3   VC  0.5
## 4  5.8   VC  0.5
## 5  6.4   VC  0.5
## 6 10.0   VC  0.5
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;绘制误差图需要知道均值以及标准误，下面这个函数用来计算每组的均值以及标准误。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;data_summary &amp;lt;- function(data, varname, grps){
  require(plyr)
  summary_func &amp;lt;- function(x, col){
    c(mean = mean(x[[col]], na.rm=TRUE),
      sd = sd(x[[col]], na.rm=TRUE))
  }
  data_sum&amp;lt;-ddply(data, grps, .fun=summary_func, varname)
  data_sum &amp;lt;- rename(data_sum, c(&amp;quot;mean&amp;quot; = varname))
 return(data_sum)
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;计算均值以及标准误&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;df2 &amp;lt;- data_summary(df, varname=&amp;quot;len&amp;quot;, grps= &amp;quot;dose&amp;quot;)
# Convert dose to a factor variable
df2$dose=as.factor(df2$dose)
head(df2)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   dose    len       sd
## 1  0.5 10.605 4.499763
## 2    1 19.735 4.415436
## 3    2 26.100 3.774150
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;创建图层&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;f &amp;lt;- ggplot(df2, aes(x = dose, y = len, 
                     ymin = len-sd, ymax = len+sd))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;可添加的图层有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;geom_crossbar(): 空心柱，上中下三线分别代表ymax、mean、ymin&lt;/li&gt;
&lt;li&gt;geom_errorbar(): 误差棒&lt;/li&gt;
&lt;li&gt;geom_errorbarh(): 水平误差棒&lt;/li&gt;
&lt;li&gt;geom_linerange()：竖直误差线&lt;/li&gt;
&lt;li&gt;geom_pointrange()：中间为一点的误差线&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;具体如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/521m2AHCDg.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;geom_crossbar&#34;&gt;geom_crossbar()&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;f+geom_crossbar()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/18EIA26lgI.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;p&gt;将dose映射给颜色&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;f+geom_crossbar(aes(color=dose))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/jH5eDIHjHL.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;p&gt;自定义颜色&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;f+geom_crossbar(aes(color=dose))+
  scale_color_manual(values = c(&amp;quot;#999999&amp;quot;, &amp;quot;#E69F00&amp;quot;, &amp;quot;#56B4E9&amp;quot;))+theme_classic()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/jcBCFdKlmH.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;p&gt;修改填充色&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;f+geom_crossbar(aes(fill=dose))+
  scale_fill_manual(values = c(&amp;quot;#999999&amp;quot;, &amp;quot;#E69F00&amp;quot;, &amp;quot;#56B4E9&amp;quot;))+
  theme_classic()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/6c5A4l9d2D.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;p&gt;通过将supp映射给颜色实现分组，可以利用函数stat_summary()来计算mean和sd&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;f &amp;lt;- ggplot(df, aes(x=dose, y=len, color=supp))
f+stat_summary(fun.data = mean_sdl, fun.args = list(mult=1), geom=&amp;quot;crossbar&amp;quot;, width=0.6, position = position_dodge(0.8))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/3e3Ic9486G.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;误差棒&#34;&gt;误差棒&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;f &amp;lt;- ggplot(df2, aes(x=dose, y=len, ymin=len-sd, ymax=len+sd))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;将dose映射给颜色&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;f+geom_errorbar(aes(color=dose), width=0.2)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/HLJe8aLajg.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;p&gt;与线图结合&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;f+geom_line(aes(group=1))+
  geom_errorbar(width=0.15)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/2E0aKa6GgJ.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;p&gt;与条形图结合，并将变量dose映射给颜色&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;f+geom_bar(aes(color=dose), stat = &amp;quot;identity&amp;quot;, fill=&amp;quot;white&amp;quot;)+
  geom_errorbar(aes(color=dose), width=0.1)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/1GllA47ajF.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;水平误差棒&#34;&gt;水平误差棒&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;#构造数据集
df2 &amp;lt;- data_summary(ToothGrowth, varname=&amp;quot;len&amp;quot;, grps = &amp;quot;dose&amp;quot;)
df2$dose &amp;lt;- as.factor(df2$dose)
head(df2)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   dose    len       sd
## 1  0.5 10.605 4.499763
## 2    1 19.735 4.415436
## 3    2 26.100 3.774150
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;创建图层&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;f &amp;lt;- ggplot(data = df2, aes(x=len, y=dose,xmin=len-sd, xmax=len+sd))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;参数xmin与xmax用来设置水平误差棒&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;f+geom_errorbarh()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/2KAK9FgCDF.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;p&gt;通过映射实现分组&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;f+geom_errorbarh(aes(color=dose))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/G3cJmg13EI.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;geom_linerange与geom_pointrange&#34;&gt;geom_linerange()与geom_pointrange()&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;f &amp;lt;- ggplot(df2, aes(x=dose, y=len, ymin=len-sd, ymax=len+sd))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;line range&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;f+geom_linerange()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/95BJEFgb1c.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;p&gt;point range&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;f+geom_pointrange()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/5kAAd2dhJl.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;点图误差棒&#34;&gt;点图+误差棒&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;g &amp;lt;- ggplot(df, aes(x=dose, y=len))+
  geom_dotplot(binaxis = &amp;quot;y&amp;quot;, stackdir = &amp;quot;center&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;添加geom_crossbar()&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;g+stat_summary(fun.data = mean_sdl, fun.args = list(mult=1), geom=&amp;quot;crossbar&amp;quot;, color=&amp;quot;red&amp;quot;, width=0.1)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/gb1G7K8D25.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;p&gt;添加geom_errorbar()&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;g + stat_summary(fun.data=mean_sdl, fun.args = list(mult=1), 
        geom=&amp;quot;errorbar&amp;quot;, color=&amp;quot;red&amp;quot;, width=0.2) +
  stat_summary(fun.y=mean, geom=&amp;quot;point&amp;quot;, color=&amp;quot;red&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/HBjmlf502b.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;p&gt;添加geom_pointrange()&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;g + stat_summary(fun.data=mean_sdl, fun.args = list(mult=1), 
                 geom=&amp;quot;pointrange&amp;quot;, color=&amp;quot;red&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/E3K5E0cg9B.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;两个变量地图绘制&#34;&gt;两个变量：地图绘制&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;ggplot2&lt;/strong&gt;提供了绘制地图的函数&lt;code&gt;geom_map()&lt;/code&gt;，依赖于包&lt;strong&gt;maps&lt;/strong&gt;提供地理信息。
安装&lt;strong&gt;map&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;install.paclages(&amp;quot;maps&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;下面将绘制美国地图，数据集采用&lt;strong&gt;USArrests&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;library(maps)
head(USArrests)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##            Murder Assault UrbanPop Rape
## Alabama      13.2     236       58 21.2
## Alaska       10.0     263       48 44.5
## Arizona       8.1     294       80 31.0
## Arkansas      8.8     190       50 19.5
## California    9.0     276       91 40.6
## Colorado      7.9     204       78 38.7
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;对数据进行整理一下,添加一列state&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;crimes &amp;lt;- data.frame(state=tolower(rownames(USArrests)), USArrests)
head(crimes)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##            Murder Assault UrbanPop Rape
## Alabama      13.2     236       58 21.2
## Alaska       10.0     263       48 44.5
## Arizona       8.1     294       80 31.0
## Arkansas      8.8     190       50 19.5
## California    9.0     276       91 40.6
## Colorado      7.9     204       78 38.7
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;#数据重铸
library(reshape2)
crimesm &amp;lt;- melt(crimes, id=1)
head(crimesm)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##        state variable value
## 1    alabama   Murder  13.2
## 2     alaska   Murder  10.0
## 3    arizona   Murder   8.1
## 4   arkansas   Murder   8.8
## 5 california   Murder   9.0
## 6   colorado   Murder   7.9
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;map_data &amp;lt;- map_data(&amp;quot;state&amp;quot;)
#绘制地图，使用Murder进行着色
ggplot(crimes, aes(map_id=state))+
  geom_map(aes(fill=Murder), map=map_data)+
  expand_limits(x=map_data$long, y=map_data$lat)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/I05fI783fH.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;三个变量&#34;&gt;三个变量&lt;/h3&gt;
&lt;p&gt;使用数据集&lt;strong&gt;mtcars&lt;/strong&gt;，首先绘制一个相关性图&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;#构造数据
df &amp;lt;- mtcars[, c(1,3,4,5,6,7)]
head(df)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##                    mpg disp  hp drat    wt  qsec
## Mazda RX4         21.0  160 110 3.90 2.620 16.46
## Mazda RX4 Wag     21.0  160 110 3.90 2.875 17.02
## Datsun 710        22.8  108  93 3.85 2.320 18.61
## Hornet 4 Drive    21.4  258 110 3.08 3.215 19.44
## Hornet Sportabout 18.7  360 175 3.15 3.440 17.02
## Valiant           18.1  225 105 2.76 3.460 20.22
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;cormat &amp;lt;- round(cor(df), 2)
cormat_melt &amp;lt;- melt(cormat)
head(cormat)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##        mpg  disp    hp  drat    wt  qsec
## mpg   1.00 -0.85 -0.78  0.68 -0.87  0.42
## disp -0.85  1.00  0.79 -0.71  0.89 -0.43
## hp   -0.78  0.79  1.00 -0.45  0.66 -0.71
## drat  0.68 -0.71 -0.45  1.00 -0.71  0.09
## wt   -0.87  0.89  0.66 -0.71  1.00 -0.17
## qsec  0.42 -0.43 -0.71  0.09 -0.17  1.00
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;创建图层：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;g &amp;lt;- ggplot(cormat_melt, aes(x=Var1, y=Var2))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;在此基础上可添加的图层有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;geom_tile(): 瓦片图&lt;/li&gt;
&lt;li&gt;geom_raster(): 光栅图，瓦片图的一种，只不过所有的tiles都是一样的大小&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;现在使用使用geom_tile()绘制相关性矩阵图，我们这里这绘制下三角矩阵图，首先要整理数据：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;#获得相关矩阵的下三角
get_lower_tri &amp;lt;- function(cormat){
  cormat[upper.tri(cormat)] &amp;lt;- NA
  return(cormat)
}
#获得相关矩阵的上三角
get_upper_tri &amp;lt;- function(cormat){
  cormat[lower.tri(cormat)] &amp;lt;- NA
  return(cormat)
}
upper_tri &amp;lt;- get_upper_tri(cormat = cormat)
head(upper_tri)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##      mpg  disp    hp  drat    wt  qsec
## mpg    1 -0.85 -0.78  0.68 -0.87  0.42
## disp  NA  1.00  0.79 -0.71  0.89 -0.43
## hp    NA    NA  1.00 -0.45  0.66 -0.71
## drat  NA    NA    NA  1.00 -0.71  0.09
## wt    NA    NA    NA    NA  1.00 -0.17
## qsec  NA    NA    NA    NA    NA  1.00
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;绘制相关矩阵图&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;#数据重铸
upper_tri_melt &amp;lt;- melt(upper_tri, na.rm = TRUE)
ggplot(data=upper_tri_melt, aes(Var1, y=Var2, fill=value))+
  geom_tile(color=&amp;quot;white&amp;quot;)+
  scale_fill_gradient2(low = &amp;quot;blue&amp;quot;, high = &amp;quot;red&amp;quot;, mid = &amp;quot;white&amp;quot;, midpoint = 0, limit=c(-1, 1), space = &amp;quot;Lab&amp;quot;, name=&amp;quot;Person\nCorrelation&amp;quot;)+
  theme_minimal()+
  theme(axis.text.x = element_text(angle = 45, vjust = 1, size = 12, hjust = 1))+
  coord_fixed()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/LL96JDbLi4.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;上图中蓝色代表互相关，红色代表正相关，至于coord_fixed()保证x，y轴比例为1&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;可以看出上图顺序有点乱，我们可以对相关矩阵进行排序&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;#构造函数
reorder_cormat &amp;lt;- function(cormat){
  dd &amp;lt;- as.dist((1-cormat)/2)
  hc &amp;lt;- hclust(dd)
  cormat &amp;lt;- cormat[hc$order, hc$order]
}
cormat &amp;lt;- reorder_cormat(cormat)
lower_tri &amp;lt;- get_lower_tri(cormat)
lower_tri_melt &amp;lt;- melt(lower_tri, na.rm = TRUE)
head(lower_tri_melt)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   Var1 Var2 value
## 1   hp   hp  1.00
## 2 disp   hp  0.79
## 3   wt   hp  0.66
## 4 qsec   hp -0.71
## 5  mpg   hp -0.78
## 6 drat   hp -0.45
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;绘制图形&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;ggheatmap &amp;lt;- ggplot(lower_tri_melt, aes(Var1, Var2, fill=value))+
  geom_tile(color=&amp;quot;white&amp;quot;)+
  scale_fill_gradient2(low = &amp;quot;blue&amp;quot;, high = &amp;quot;red&amp;quot;, mid = &amp;quot;white&amp;quot;, midpoint = 0, limit=c(-1, 1), space = &amp;quot;Lab&amp;quot;, name=&amp;quot;Person\nCorrelation&amp;quot;)+
  theme_minimal()+
 theme(axis.text.x = element_text(angle = 45, vjust = 1, 
    size = 12, hjust = 1))+
 coord_fixed()
print(ggheatmap)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/FDdmmgjJL5.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;图元多边形路径带状射线线段矩形等&#34;&gt;图元：多边形、路径、带状、射线（线段）、矩形等&lt;/h3&gt;
&lt;p&gt;本节主要讲述的是添加图形元件，将用到一下函数：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;geom_polygon()：添加多边形&lt;/li&gt;
&lt;li&gt;geom_path(): 路径&lt;/li&gt;
&lt;li&gt;geom_ribbon(): 带状&lt;/li&gt;
&lt;li&gt;geom_segment(): 射线、线段&lt;/li&gt;
&lt;li&gt;geom_curve(): 曲线&lt;/li&gt;
&lt;li&gt;geom_rect(): 二维矩形&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;添加多边形&#34;&gt;添加多边形&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;library(dplyr)
map_data(&amp;quot;world&amp;quot;)%&amp;gt;%
  filter(region==c(&amp;quot;China&amp;quot;, &amp;quot;Taiwan&amp;quot;))%&amp;gt;%
  ggplot(aes(x=long, y=lat, group=group))+
  geom_polygon(fill=&amp;quot;red&amp;quot;, color=&amp;quot;black&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/Gj3I6E4Kh6.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;添加路径带状矩形&#34;&gt;添加路径、带状、矩形&lt;/h4&gt;
&lt;p&gt;创建图层&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;h &amp;lt;- ggplot(economics, aes(date, unemploy))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;添加路径&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;h+geom_path()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/hKCeGeja0m.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;p&gt;添加带状&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;h+geom_ribbon(aes(ymin=unemploy-800, ymax=unemploy+800), fill = &amp;quot;grey70&amp;quot;)+geom_line(aes(y=unemploy))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/FKG84CB8f1.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;p&gt;添加矩形&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;h+
  geom_path()+
  geom_rect(aes(xmin=as.Date(&amp;quot;1980-01-01&amp;quot;), ymin=-Inf, xmax=as.Date(&amp;quot;1985-01-01&amp;quot;), ymax=Inf), fill=&amp;quot;steelblue&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/c5iBDliiKB.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;添加线段&#34;&gt;添加线段&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;i &amp;lt;- ggplot(mtcars, aes(wt, mpg))+geom_point()
#添加线段
i+geom_segment(aes(x=2, y=15, xend=3, yend=15))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/lF9GiCg023.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;p&gt;添加箭头&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;i+geom_segment(aes(x=5, y=30, xend=3.5, yend=25), arrow = arrow(length = unit(0.5, &amp;quot;cm&amp;quot;)))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/ebGE0KdHlc.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;添加曲线&#34;&gt;添加曲线&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;i+geom_curve(aes(x=2, y=15, xend=3, yend=15), color=&amp;quot;red&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/BHJd8191Am.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;图形参数主标题坐标轴标签图例标题&#34;&gt;图形参数：主标题、坐标轴标签、图例标题&lt;/h3&gt;
&lt;p&gt;创建图层&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;ToothGrowth$dose &amp;lt;- as.factor(ToothGrowth$dose)
p &amp;lt;- ggplot(ToothGrowth, aes(x=dose, y=len))+geom_boxplot()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;修改标题以及标签的函数有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ggtitle(&amp;ldquo;New main title&amp;rdquo;): 添加主标题&lt;/li&gt;
&lt;li&gt;xlab(“New X axis label”): 修改x轴标签&lt;/li&gt;
&lt;li&gt;ylab(“New Y axis label”): 修改y轴标签&lt;/li&gt;
&lt;li&gt;labs(title = “New main title”, x = “New X axis label”, y = “New Y axis label”): 可同时添加主标题以及坐标轴标签，另外，图例标题也可以用此函数修改&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;修改主标题以及标签&#34;&gt;修改主标题以及标签&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;(p &amp;lt;- p+labs(title=&amp;quot;Plot of length\nby dose&amp;quot;, x=&amp;quot;Dose (mg)&amp;quot;, y=&amp;quot;teeth length&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/h0dhdgD0H5.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;修改标签属性颜色字体大小等&#34;&gt;修改标签属性：颜色、字体、大小等&lt;/h4&gt;
&lt;p&gt;使用theme()修改,element_text()可以具体修改图形参数，element_blank()隐藏标签&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;#修改标签
p+theme(
plot.title = element_text(color = &amp;quot;red&amp;quot;, size = 14, face = &amp;quot;bold.italic&amp;quot;),
axis.title.x = element_text(color=&amp;quot;blue&amp;quot;, size = 14, face = &amp;quot;bold&amp;quot;),
axis.title.y = element_text(color=&amp;quot;#993333&amp;quot;, size = 14, face = &amp;quot;bold&amp;quot;)
)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/28K0J6j688.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#隐藏标签
p+theme(
  plot.title = element_blank(),
  axis.title.x = element_blank(),
  axis.title.y = element_blank()
)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/0Fe5dGADJi.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;修改图例标题&#34;&gt;修改图例标题&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;p &amp;lt;- ggplot(ToothGrowth, aes(x=dose, y=len, fill=dose))+
  geom_boxplot()
p
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/Afhm8Dbaa3.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#修改图例标题
p+labs(fill=&amp;quot;Dose (mg)&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/dLAe8a3a7K.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;图例位置以及外观&#34;&gt;图例位置以及外观&lt;/h3&gt;
&lt;h4 id=&#34;修改图例位置以及外观&#34;&gt;修改图例位置以及外观&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;#图例位置在最上面，有五个选项：&amp;quot;left&amp;quot;,&amp;quot;top&amp;quot;, &amp;quot;right&amp;quot;, &amp;quot;bottom&amp;quot;, &amp;quot;none&amp;quot;
p+theme(legend.position = &amp;quot;top&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/52gIJkL4Fj.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;p&gt;移除图例&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;p+theme(legend.position = &amp;quot;none&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/akg12aak7l.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;p&gt;修改图例标题以及标签外观&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;p+theme(
  legend.title = element_text(color=&amp;quot;blue&amp;quot;),
  legend.text = element_text(color=&amp;quot;red&amp;quot;)
)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/7AgB3J5C56.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;p&gt;修改图例背景&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;p+theme(legend.background = element_rect(fill=&amp;quot;lightblue&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/jB9CJj91hj.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;利用scale函数自定义图例&#34;&gt;利用scale()函数自定义图例&lt;/h4&gt;
&lt;p&gt;主要两个函数：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;scale_x_discrete()：修改图例标签顺序&lt;/li&gt;
&lt;li&gt;scale_fill_discrete(): 修改图例标题以及标签&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;#修改顺序
p+scale_x_discrete(limits=c(&amp;quot;2&amp;quot;, &amp;quot;0.5&amp;quot;, &amp;quot;1&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/AbFBaAl2a3.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#修改标题以及标签
p+scale_fill_discrete(name=&amp;quot;Dose&amp;quot;, label=c(&amp;quot;A&amp;quot;,&amp;quot;B&amp;quot;,&amp;quot;C&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/AcKFcEl5j4.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;自动手动修改颜色&#34;&gt;自动/手动修改颜色&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;mtcars$cyl &amp;lt;- as.factor(mtcars$cyl)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;创建图层&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;# boxplot
bp &amp;lt;- ggplot(ToothGrowth, aes(x=dose, y=len))
# scatter plot
sp &amp;lt;- ggplot(mtcars, aes(x=wt, y=mpg))
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;修改填充色轮廓线颜色&#34;&gt;修改填充色、轮廓线颜色&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;bp+geom_boxplot(fill=&amp;quot;steelblue&amp;quot;, color=&amp;quot;red&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/L09ec6fJdi.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;sp+geom_point(color=&amp;quot;darkblue&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/dm838FcDID.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;通过映射分组修改颜色&#34;&gt;通过映射分组修改颜色&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;(bp &amp;lt;- bp+geom_boxplot(aes(fill=dose)))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/39aG8c99CA.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(sp &amp;lt;- sp+geom_point(aes(color=cyl)))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/6lAKJH6FcI.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;手动修改颜色&#34;&gt;手动修改颜色&lt;/h4&gt;
&lt;p&gt;主要两个函数：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;scale_fill_manual(): 填充色&lt;/li&gt;
&lt;li&gt;scale_color_manual()：轮廓色，如点线&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;# Box plot
bp + scale_fill_manual(values=c(&amp;quot;#999999&amp;quot;, &amp;quot;#E69F00&amp;quot;, &amp;quot;#56B4E9&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/5l8CkJeG3b.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# Scatter plot
sp + scale_color_manual(values=c(&amp;quot;#999999&amp;quot;, &amp;quot;#E69F00&amp;quot;, &amp;quot;#56B4E9&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/mlmKH9mDm0.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;使用rcolorbrewer调色板&#34;&gt;使用&lt;strong&gt;RColorBrewer&lt;/strong&gt;调色板&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;scale_fill_brewer(): 填充色&lt;/li&gt;
&lt;li&gt;scale_color_brewer()：轮廓色，如点线&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;# Box plot
bp + scale_fill_brewer(palette=&amp;quot;Dark2&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/fdgD6lfCLK.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# Scatter plot
sp + scale_color_brewer(palette=&amp;quot;Dark2&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/I4K7c25E00.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;RColorBrewer&lt;/strong&gt;包提供以下调色板&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/2mh2le2j13.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;还专门有一个灰度调色板：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;# Box plot
bp + scale_fill_grey() + theme_classic()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/el4C3gckcd.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# Scatter plot
sp + scale_color_grey() + theme_classic()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/5B3cgiFbH6.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;梯度或连续颜色&#34;&gt;梯度或连续颜色&lt;/h4&gt;
&lt;p&gt;有时我们会将某个连续变量映射给颜色，这时修改这种梯度或连续型颜色就可以使用以下函数：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;scale_color_gradient(), scale_fill_gradient()：两种颜色的连续梯度&lt;/li&gt;
&lt;li&gt;scale_color_gradient2(), scale_fill_gradient2()：不同梯度&lt;/li&gt;
&lt;li&gt;scale_color_gradientn(), scale_fill_gradientn()：多种颜色梯度&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;# Color by qsec values
sp2&amp;lt;-ggplot(mtcars, aes(x=wt, y=mpg)) +
  geom_point(aes(color = qsec))
sp2
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/DfKHLjH6mm.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# Change the low and high colors
# Sequential color scheme
sp2+scale_color_gradient(low=&amp;quot;blue&amp;quot;, high=&amp;quot;red&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/g4mj6HBA2d.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# Diverging color scheme
mid&amp;lt;-mean(mtcars$qsec)
sp2+scale_color_gradient2(midpoint=mid, low=&amp;quot;blue&amp;quot;, mid=&amp;quot;white&amp;quot;,
                          high=&amp;quot;red&amp;quot;, space = &amp;quot;Lab&amp;quot; )
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/jemKdg7ai2.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;点颜色大小形状&#34;&gt;点颜色、大小、形状&lt;/h3&gt;
&lt;p&gt;R提供的点形状是由数字表示的，具体如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/g7gjFCb420.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;# Basic scatter plot
ggplot(mtcars, aes(x=wt, y=mpg)) +
  geom_point(shape = 18, color = &amp;quot;steelblue&amp;quot;, size = 4)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/EG65iAcdaI.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# Change point shapes and colors by groups
ggplot(mtcars, aes(x=wt, y=mpg)) +
geom_point(aes(shape = cyl, color = cyl))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/mKAb95CAk6.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;p&gt;可通过以下方法对点的颜色、大小、形状进行修改：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;scale_shape_manual() : to change point shapes&lt;/li&gt;
&lt;li&gt;scale_color_manual() : to change point colors&lt;/li&gt;
&lt;li&gt;scale_size_manual() : to change the size of points&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;# Change colors and shapes manually
ggplot(mtcars, aes(x=wt, y=mpg, group=cyl)) +
  geom_point(aes(shape=cyl, color=cyl), size=2)+
  scale_shape_manual(values=c(3, 16, 17))+
  scale_color_manual(values=c(&#39;#999999&#39;,&#39;#E69F00&#39;, &#39;#56B4E9&#39;))+
  theme(legend.position=&amp;quot;top&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/Cj4aedai9j.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;文本注释-1&#34;&gt;文本注释&lt;/h3&gt;
&lt;p&gt;对图形进行文本注释有以下方法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;geom_text(): 文本注释&lt;/li&gt;
&lt;li&gt;geom_label(): 文本注释,类似于geom_text(),只是多了个背景框&lt;/li&gt;
&lt;li&gt;annotate(): 文本注释&lt;/li&gt;
&lt;li&gt;annotation_custom(): 分面时可以在所有的面板进行文本注释&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;set.seed(1234)
df &amp;lt;- mtcars[sample(1:nrow(mtcars), 10), ]
df$cyl &amp;lt;- as.factor(df$cyl)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;散点图注释&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;# Scatter plot
sp &amp;lt;- ggplot(df, aes(x=wt, y=mpg))+ geom_point() 
# Add text, change colors by groups
sp + geom_text(aes(label = rownames(df), color = cyl),
               size = 3, vjust = -1)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/0EAk2aFEJG.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# Add text at a particular coordinate
sp + geom_text(x = 3, y = 30, label = &amp;quot;Scatter plot&amp;quot;,
              color=&amp;quot;red&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/8A620eJKDl.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# geom_label()进行注释
sp + geom_label(aes(label=rownames(df)))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/D6ick1LI9i.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# annotation_custom(),需要用到textGrob()
library(grid)
# Create a text
grob &amp;lt;- grobTree(textGrob(&amp;quot;Scatter plot&amp;quot;, x=0.1,  y=0.95, hjust=0,
  gp=gpar(col=&amp;quot;red&amp;quot;, fontsize=13, fontface=&amp;quot;italic&amp;quot;)))
# Plot
sp + annotation_custom(grob)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/80EK39ebBA.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#分面注释
sp + annotation_custom(grob)+facet_wrap(~cyl, scales=&amp;quot;free&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/cdfK8keKee.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;线型&#34;&gt;线型&lt;/h3&gt;
&lt;p&gt;R里的线型有七种：“blank”, “solid”, “dashed”, “dotted”, “dotdash”, “longdash”, “twodash”，对应数字0，1，2，3，4，5，6.&lt;/p&gt;
&lt;p&gt;具体如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/2gAL9gilee.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;# Create some data
df2 &amp;lt;- data.frame(sex = rep(c(&amp;quot;Female&amp;quot;, &amp;quot;Male&amp;quot;), each=3),
                  time=c(&amp;quot;breakfeast&amp;quot;, &amp;quot;Lunch&amp;quot;, &amp;quot;Dinner&amp;quot;),
                  bill=c(10, 30, 15, 13, 40, 17) )
head(df2)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##      sex       time bill
## 1 Female breakfeast   10
## 2 Female      Lunch   30
## 3 Female     Dinner   15
## 4   Male breakfeast   13
## 5   Male      Lunch   40
## 6   Male     Dinner   17
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;# Line plot with multiple groups
# Change line types and colors by groups (sex)
ggplot(df2, aes(x=time, y=bill, group=sex)) +
  geom_line(aes(linetype = sex, color = sex))+
  geom_point(aes(color=sex))+
  theme(legend.position=&amp;quot;top&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/leH2fj5jf7.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;p&gt;同点一样，线也可以类似修改：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;scale_linetype_manual() : to change line types&lt;/li&gt;
&lt;li&gt;scale_color_manual() : to change line colors&lt;/li&gt;
&lt;li&gt;scale_size_manual() : to change the size of lines&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;# Change line types, colors and sizes
ggplot(df2, aes(x=time, y=bill, group=sex)) +
  geom_line(aes(linetype=sex, color=sex, size=sex))+
  geom_point()+
  scale_linetype_manual(values=c(&amp;quot;twodash&amp;quot;, &amp;quot;dotted&amp;quot;))+
  scale_color_manual(values=c(&#39;#999999&#39;,&#39;#E69F00&#39;))+
  scale_size_manual(values=c(1, 1.5))+
  theme(legend.position=&amp;quot;top&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/j9EajEBa9b.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;主题与背景颜色&#34;&gt;主题与背景颜色&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;# Convert the column dose from numeric to factor variable
ToothGrowth$dose &amp;lt;- as.factor(ToothGrowth$dose)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;创建箱线图&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;p &amp;lt;- ggplot(ToothGrowth, aes(x=dose, y=len))+
  geom_boxplot()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;修改主题
&lt;strong&gt;ggplot2&lt;/strong&gt;提供了好几种主题，另外有一个扩展包&lt;strong&gt;ggthemes&lt;/strong&gt;专门提供了一主题，可以安装利用。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;install.packages(&amp;quot;ggthemes&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;theme_gray(): gray background color and white grid lines&lt;/li&gt;
&lt;li&gt;theme_bw() : white background and gray grid lines&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;p+theme_gray(base_size = 14)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/hj1eIbED8J.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;p+theme_bw()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/DIL3A3j3H0.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;theme_linedraw : black lines around the plot&lt;/li&gt;
&lt;li&gt;theme_light : light gray lines and axis (more attention towards the data)&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;p + theme_linedraw()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/dllCEkgbJd.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;p + theme_light()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/HIE1djID57.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;theme_minimal: no background annotations&lt;/li&gt;
&lt;li&gt;theme_classic : theme with axis lines and no grid lines&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;p + theme_minimal()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/DldJFIi1jG.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;p + theme_classic()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/kdb786kHb6.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;ggthemes&lt;/strong&gt;提供的主题&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;p+ggthemes::theme_economist()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/mhE0cglig4.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;坐标轴最大最小值&#34;&gt;坐标轴：最大最小值&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;p &amp;lt;- ggplot(cars, aes(x=speed, y=dist))+geom_point()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;修改坐标轴范围有以下几种方式：
1、不删除数据&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;p+coord_cartesian(xlim=c(5, 20), ylim=c(0, 50)):笛卡尔坐标系，这是设定修改不会删除数据&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;2、会删除部分数据：不在此范围内的数据都会被删除,因此在此基础上添加图层时数据是不完整的&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;p+xlim(5, 20)+ylim(0, 50)&lt;/li&gt;
&lt;li&gt;p+scale_x_continuous(limits=c(5, 20))+scale_y_continuous(limits=c(0, 50))&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;3、扩展图形范围：expand()函数，扩大范围&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;p+expand_limits(x=0, y=0):设置截距为0，即过原点&lt;/li&gt;
&lt;li&gt;p+expand_limits(x=c(5, 50), y=c(0, 150))：扩大坐标轴范围，这样图形显示就小了&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;下面通过图形演示&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;p
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/45E5EkIbmH.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#通过coord_cartesian()函数修改坐标轴范围
p+coord_cartesian(xlim =c (5, 20), ylim = c(0, 50))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/cbia8kk48E.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#通过xlim()和ylim()函数修改
p+xlim(5, 20)+ylim(0, 50)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/cbia8kk48E.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#expand limits
p+expand_limits(x=c(5, 50), y=c(0, 150))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/m44Dlla2Cl.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;坐标变换&#34;&gt;坐标变换&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;p &amp;lt;- ggplot(cars, aes(x=speed, y=dist))+geom_point()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;坐标变换有以下几种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;p+scale_x_log10(),p+scale_y_log10(): 绘图时对x，y取10的对数&lt;/li&gt;
&lt;li&gt;p+scale_x_sqrt(),p+scale_x_sqrt(): 开根号&lt;/li&gt;
&lt;li&gt;p+scale_x_reverse(),p+scale_x_reverse()：坐标轴反向&lt;/li&gt;
&lt;li&gt;p+coord_trans(x =“log10”, y=“log10”): 同上，可以对坐标轴取对数、根号等&lt;/li&gt;
&lt;li&gt;p+scale_x_continuous(trans=&amp;ldquo;log2&amp;rdquo;),p+scale_x_continuous(trans=&amp;ldquo;log2&amp;rdquo;): 同上，取对数的另外一种方法&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;下面实例演示：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;p
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/90aD77ldKb.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;p+scale_x_continuous(trans = &amp;quot;log2&amp;quot;)+
  scale_y_continuous(trans = &amp;quot;log2&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/mI8LDhgJE9.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#修改坐标刻度标签
require(scales)
p+scale_y_continuous(trans=log2_trans(),
                    breaks = trans_breaks(&amp;quot;log2&amp;quot;, function(x) 2^x),
                    labels=trans_format(&amp;quot;log2&amp;quot;, math_format(2^.x)))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/F94egDhaID.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#坐标轴反向
p+scale_y_reverse()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/L68AbbdeH9.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;坐标刻度刻度线标签顺序等&#34;&gt;坐标刻度：刻度线、标签、顺序等&lt;/h4&gt;
&lt;p&gt;更改坐标轴刻度线标签等函数：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;element_text(face, color, size, angle): 修改文本风格&lt;/li&gt;
&lt;li&gt;element_blank(): 隐藏文本&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;(p &amp;lt;- ggplot(ToothGrowth, aes(x=dose, y=len))+geom_boxplot())
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/22F52FHA0H.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;p&gt;修改刻度标签等&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;p+theme(axis.text.x = element_text(face = &amp;quot;bold&amp;quot;, color=&amp;quot;#993333&amp;quot;, size=14, angle = 45),
        axis.text.y = element_text(face = &amp;quot;bold&amp;quot;, size = 14, color = &amp;quot;blue&amp;quot;, angle = 45))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/7k09a4DhDb.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;p&gt;移除刻度标签等&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;p + theme(
  axis.text.x = element_blank(), # Remove x axis tick labels
  axis.text.y = element_blank(), # Remove y axis tick labels
  axis.ticks = element_blank()) # Remove ticks
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/lmmg7BEa1m.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;p&gt;当然可以自定义坐标轴了&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;离散非连续坐标轴&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;scale_x_discrete(name, breaks, labels, limits)&lt;/li&gt;
&lt;li&gt;scale_y_discrete(name, breaks, labels, limits)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;连续型坐标轴&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;scale_x_conyinuous(name, breaks, labels, limits)&lt;/li&gt;
&lt;li&gt;scale_y_continuous(name, breaks, labels, limits)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;详细情况如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;name: x,y轴的标题&lt;/li&gt;
&lt;li&gt;breaks: 刻度，分成几段&lt;/li&gt;
&lt;li&gt;labels：坐标轴刻度线标签&lt;/li&gt;
&lt;li&gt;limits: 坐标轴范围&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其中scale_xx()函数可以修改坐标轴的如下参数：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;坐标轴标题&lt;/li&gt;
&lt;li&gt;坐标轴范围&lt;/li&gt;
&lt;li&gt;刻度标签位置&lt;/li&gt;
&lt;li&gt;手动设置刻度标签&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;具体演示：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;离散坐标轴&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;#修改标签以及顺序
p+scale_x_discrete(name=&amp;quot;Dose (mg)&amp;quot;, limits=c(&amp;quot;2&amp;quot;, &amp;quot;1&amp;quot;, &amp;quot;0.5&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/EFbiHLHg4H.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;#修改刻度标签
p+scale_x_discrete(breaks=c(&amp;quot;0.5&amp;quot;, &amp;quot;1&amp;quot;, &amp;quot;2&amp;quot;),labels=c(&amp;quot;Dose 0.5&amp;quot;, &amp;quot;Dose 1&amp;quot;, &amp;quot;Dose 2&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/7b8a55d8e6.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;#修改要显示的项
p+scale_x_discrete(limits=c(&amp;quot;0.5&amp;quot;, &amp;quot;2&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/KEBgH9eL6A.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;连续型坐标轴&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;#散点图
(sp &amp;lt;- ggplot(cars, aes(x=speed, y=dist))+geom_point())
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/6mAgGel8FI.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;p&gt;修改坐标轴标签以及范围&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;(sp &amp;lt;- sp+scale_x_continuous(name = &amp;quot;Speed of cars&amp;quot;, limits = c(0, 30))+
  scale_y_continuous(name = &amp;quot;Stopping distance&amp;quot;, limits = c(0, 150)))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/1Gfa1ki6jd.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;p&gt;更改y轴刻度，间隔50&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;sp+scale_y_continuous(breaks = seq(0, 150, 50))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/67LdJdeHJJ.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;p&gt;修改y轴标签为百分数&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;require(scales)
sp+scale_y_continuous(labels = percent)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/lKBLj42Fmb.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;添加直线水平线竖直线回归线&#34;&gt;添加直线：水平线、竖直线、回归线&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;ggplot2&lt;/strong&gt;提供以下方法为图形添加直线：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;geom_hline(yintercept, linetype, color, size): 添加水平线&lt;/li&gt;
&lt;li&gt;geom_vline(xintercept, linetype, color, size)：添加竖直线&lt;/li&gt;
&lt;li&gt;geom_abline(intercept, slope, linetype, color, size)：添加回归线&lt;/li&gt;
&lt;li&gt;geom_segment()：添加线段&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;实例演示：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;sp &amp;lt;- ggplot(data=mtcars, aes(x=wt, y=mpg))+ geom_point()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;添加直线：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;#在y=20处添加一水平线，并设置颜色等
sp+geom_hline(yintercept = 20, linetype=&amp;quot;dashed&amp;quot;, color=&#39;red&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/klELKdJ7h2.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#在x=3处添加一竖直线，并设置颜色等
sp+geom_vline(xintercept = 3, color=&amp;quot;blue&amp;quot;, size=1.5)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/5cIFlhkK0E.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#添加回归线
sp+geom_abline(intercept = 37, slope = -5, color=&amp;quot;blue&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/Jci00jI819.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#添加水平线段
sp+geom_segment(aes(x=2, y=15, xend=3, yend=15), color=&amp;quot;red&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/1gAEcm93JF.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;图形旋转旋转反向&#34;&gt;图形旋转：旋转、反向&lt;/h3&gt;
&lt;p&gt;主要是下面两个函数：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;coord_flip()：创建水平方向图&lt;/li&gt;
&lt;li&gt;scale_x_reverse(),scale_y_reverse()：坐标轴反向&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;set.seed(1234)
(hp &amp;lt;- qplot(x=rnorm(200), geom = &amp;quot;histogram&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/CgC7HHLid5.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#水平柱形图
hp+coord_flip()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/hD4HaiCDJI.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#y轴反向
hp+scale_y_reverse()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/HCFl1ha75C.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;分面&#34;&gt;分面&lt;/h3&gt;
&lt;p&gt;分面就是根据一个或多个变量将图形分为几个图形以便于可视化，主要有两个方法实现：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;facet_grid()&lt;/li&gt;
&lt;li&gt;facet_wrap()&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;ToothGrowth$dose &amp;lt;- as.factor(ToothGrowth$dose)
(p &amp;lt;- ggplot(ToothGrowth, aes(x=dose, y=len, group=dose))+
  geom_boxplot(aes(fill=dose)))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/3AfigK2AIl.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;p&gt;针对上面图形进行分面：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;p+facet_grid(supp~.): 按变量supp进行竖直方向分面&lt;/li&gt;
&lt;li&gt;p+facet_grid(.~supp): 按变量supp进行水平方向分面&lt;/li&gt;
&lt;li&gt;p+facet_wrap(dose~supp)：按双变量supp和dose进行水平竖直方向分面&lt;/li&gt;
&lt;li&gt;p+facet_wrap(~fl): 将分成的面板边靠边置于一个矩形框内&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;1、按一个离散变量进行分面：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r,fig.height=4,fig.width=3}&#34;&gt;#竖直方向进行分面
p+facet_grid(supp~.)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/e5hdDE7FE0.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#水平方向分面
p+facet_grid(.~supp)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/F3BgFeHc3C.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;p&gt;2、按两个离散变量进行分面&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r,fig.height=4,fig.width=3}&#34;&gt;#行按dose分面，列按supp分面
p+facet_grid(dose~supp)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/9112kbBA9g.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#行按supp，列按dose分面
p+facet_grid(supp~dose)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/bjm9fk0k79.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;p&gt;从上面图形可以看出，每个面板的坐标轴比例都是一样的，我们可以通过设置参数scales来控制坐标轴比例&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;p + facet_grid(dose ~ supp, scales=&#39;free&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/65F4K0ajaI.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;位置调整&#34;&gt;位置调整&lt;/h3&gt;
&lt;p&gt;很多图形需要我们调整位置，比如直方图时，由堆叠式、百分式、分离式等，具体的要通过实例说明&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;p &amp;lt;- ggplot(mpg, aes(fl, fill=drv))
#直方图边靠边排列，参数position=&amp;quot;dodge&amp;quot;
p+geom_bar(position = &amp;quot;dodge&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/13Cf1kA3Jc.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;p&gt;堆叠式position=&amp;ldquo;stack&amp;rdquo;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;p+geom_bar(position = &amp;quot;stack&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/J2bH42IjHA.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;p&gt;position=&amp;ldquo;fill&amp;quot;类似玉堆叠图，只不过按百分比排列，所有柱子都被标准化成同样高度&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;p+geom_bar(position = &amp;quot;fill&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/1iblgciCm8.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;p&gt;position=&amp;ldquo;jitter&amp;rdquo;,（主要适用于散点图）增加扰动，避免重叠，前面讲的geom_jitter()就是来源于此&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;ggplot(mpg, aes(cty, hwy))+
  geom_point(position = &amp;quot;jitter&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/01D9L4A8Ld.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;p&gt;上面几个函数有两个重要的参数：heigth、weight。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;position_dodge(width, height)&lt;/li&gt;
&lt;li&gt;position_fill(width, height)&lt;/li&gt;
&lt;li&gt;position_stack(width, height)&lt;/li&gt;
&lt;li&gt;position_jitter(width, height)&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;p+geom_bar(position = position_dodge(width = 1))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/DaHcfl9dId.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;坐标系&#34;&gt;坐标系&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;p &amp;lt;- ggplot(mpg, aes(fl))+geom_bar()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;ggplot2&lt;/strong&gt;中的坐标系主要有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;p+coord_cartesian(xlim=NULL, ylim=NULL)：笛卡尔坐标系(默认)&lt;/li&gt;
&lt;li&gt;p+coord_fixed(ratio=1, clim=NULL, ylim=NULL)：固定了坐标轴比例的笛卡尔坐标系。默认比例为1&lt;/li&gt;
&lt;li&gt;p+coord_flip(&amp;hellip;)：旋转笛卡尔坐标系&lt;/li&gt;
&lt;li&gt;p+coord_polar(theta=&amp;ldquo;x&amp;rdquo;, start=0, direction=1)：极坐标系&lt;/li&gt;
&lt;li&gt;p+coord_trans(x,y,limx,limy)：变换笛卡尔坐标系&lt;/li&gt;
&lt;li&gt;coord_map()：地图坐标系&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;各个坐标系参数如下：
1、笛卡尔坐标系：coord_cartesian(), coord_fixed() and coord_flip()&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;xlim：x轴范围&lt;/li&gt;
&lt;li&gt;ylim：y轴范围&lt;/li&gt;
&lt;li&gt;ratio：y/x&lt;/li&gt;
&lt;li&gt;&amp;hellip;：其他参数&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;2、极坐标系：coord_polar()&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;theta：外延坐标，x或y&lt;/li&gt;
&lt;li&gt;start：坐标开始的位置，默认为12点钟&lt;/li&gt;
&lt;li&gt;direction：方向：顺时针(1),逆时针(-1)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;3、变换坐标系：coord_trans()&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;x,y：变换的坐标轴&lt;/li&gt;
&lt;li&gt;limx,limy：坐标轴范围&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;实例演示：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;p+coord_cartesian(ylim = c(0,200))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/KE5JcFmdhl.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;p+coord_fixed(ratio = 1/50)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/LHeG17JljH.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;p+coord_flip()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/8AK62ii9Ib.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;p+coord_polar(theta = &amp;quot;x&amp;quot;, direction = 1)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/HBF135cLAA.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;p+coord_trans(y=&amp;quot;sqrt&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/DhI4Ha1m91.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;ggplot2包资料扩展包函数&#34;&gt;&lt;strong&gt;ggplot2&lt;/strong&gt;包资料扩展：包、函数&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;ggplot2&lt;/strong&gt;有一个官方网站，里面有十分详细的说明，
&lt;a href=&#34;http://ggplot2.tidyverse.org/reference/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;点击这里直达&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ggplot2&lt;/strong&gt;还有十分多的扩展包，
&lt;a href=&#34;https://www.ggplot2-exts.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;点击这里直达&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;sessioninfo&#34;&gt;SessionInfo&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;sessionInfo()

## R version 3.4.1 (2017-06-30)
## Platform: x86_64-pc-linux-gnu (64-bit)
## Running under: Ubuntu 16.04.3 LTS
## 
## Matrix products: default
## BLAS: /usr/lib/atlas-base/atlas/libblas.so.3.0
## LAPACK: /usr/lib/atlas-base/atlas/liblapack.so.3.0
## 
## locale:
##  [1] LC_CTYPE=zh_CN.UTF-8       LC_NUMERIC=C              
##  [3] LC_TIME=zh_CN.UTF-8        LC_COLLATE=zh_CN.UTF-8    
##  [5] LC_MONETARY=zh_CN.UTF-8    LC_MESSAGES=zh_CN.UTF-8   
##  [7] LC_PAPER=zh_CN.UTF-8       LC_NAME=C                 
##  [9] LC_ADDRESS=C               LC_TELEPHONE=C            
## [11] LC_MEASUREMENT=zh_CN.UTF-8 LC_IDENTIFICATION=C       
## 
## attached base packages:
## [1] grid      stats     graphics  grDevices utils     datasets  methods  
## [8] base     
## 
## other attached packages:
## [1] scales_0.5.0   bindrcpp_0.2   dplyr_0.7.3    reshape2_1.4.2
## [5] maps_3.2.0     hexbin_1.27.1  plyr_1.8.4     ggplot2_2.2.1 
## 
## loaded via a namespace (and not attached):
##  [1] Rcpp_0.12.12        bindr_0.1           compiler_3.4.1     
##  [4] RColorBrewer_1.1-2  base64enc_0.1-3     tools_3.4.1        
##  [7] rpart_4.1-11        digest_0.6.12       checkmate_1.8.3    
## [10] htmlTable_1.9       evaluate_0.10.1     tibble_1.3.4       
## [13] gtable_0.2.0        lattice_0.20-35     pkgconfig_2.0.1    
## [16] rlang_0.1.2         Matrix_1.2-11       yaml_2.1.14        
## [19] gridExtra_2.3       stringr_1.2.0       knitr_1.17         
## [22] cluster_2.0.6       htmlwidgets_0.9     rprojroot_1.2      
## [25] nnet_7.3-12         glue_1.1.1          data.table_1.10.4  
## [28] R6_2.2.2            survival_2.41-3     foreign_0.8-69     
## [31] rmarkdown_1.6       latticeExtra_0.6-28 Formula_1.2-2      
## [34] magrittr_1.5        ggthemes_3.4.0      backports_1.1.0    
## [37] Hmisc_4.0-3         htmltools_0.3.6     MASS_7.3-47        
## [40] splines_3.4.1       assertthat_0.2.0    colorspace_1.3-2   
## [43] labeling_0.3        stringi_1.1.5       acepack_1.4.1      
## [46] lazyeval_0.2.0      munsell_0.4.3
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>tidyverse实践之绘制简单地图</title>
      <link>https://taoyan.netlify.app/post/2017-09-16.tidyverse%E5%AE%9E%E8%B7%B5%E4%B9%8B%E7%BB%98%E5%88%B6%E7%AE%80%E5%8D%95%E5%9C%B0%E5%9B%BE/</link>
      <pubDate>Sat, 16 Sep 2017 10:47:05 +0000</pubDate>
      <guid>https://taoyan.netlify.app/post/2017-09-16.tidyverse%E5%AE%9E%E8%B7%B5%E4%B9%8B%E7%BB%98%E5%88%B6%E7%AE%80%E5%8D%95%E5%9C%B0%E5%9B%BE/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/Big70i5b36.jpeg?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;简介&#34;&gt;简介&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;tidyverse&lt;/strong&gt;是一个数据科学的综合包，里面包含了数据分析一系列流程涉及的包，今天主要利用它绘制地图。这并不是它的强项，绘制地图&lt;strong&gt;leaflet&lt;/strong&gt;才是利器，本文只是&lt;strong&gt;tidyverse&lt;/strong&gt;的一个小练习。
目前该包支持有限的几个国家，比如美国，新西兰、意大利等，当然世界地图是支持的。&lt;/p&gt;
&lt;h2 id=&#34;绘图&#34;&gt;绘图&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;library(tidyverse)
map_data(&amp;quot;usa&amp;quot;)%&amp;gt;%
  ggplot(aes(x=long, y=lat, group=group))+
  geom_polygon()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/i32kBBc1DA.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;可以绘制美国的不同州，就行我国的省份一样&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;map_data(&amp;quot;state&amp;quot;)%&amp;gt;%
  ggplot(aes(x=long, y=lat, group=group))+
  geom_polygon(color=&amp;quot;white&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/5haC8L95Fd.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;另外我们可以只单独绘制几个state&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;map_data(&amp;quot;state&amp;quot;)%&amp;gt;%
  filter(region%in%c(&amp;quot;california&amp;quot;,&amp;quot;nevada&amp;quot;,&amp;quot;oregon&amp;quot;,&amp;quot;washington&amp;quot;))%&amp;gt;%
  ggplot(aes(x=long, y=lat, group=group))+
  geom_polygon(color=&amp;quot;red&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/md9HG40mi8.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;再绘制细一点的地图，相当于市、县等&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r,&#34;&gt;map_data(&amp;quot;county&amp;quot;)%&amp;gt;%
  filter(region %in% c(&amp;quot;california&amp;quot;,&amp;quot;nevada&amp;quot;,&amp;quot;oregon&amp;quot;,&amp;quot;washington&amp;quot;))%&amp;gt;%
  ggplot(aes(x=long, y=lat, group=group))+
  geom_polygon(color=&amp;quot;white&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/iEIjLcgIaK.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;世界地图&#34;&gt;世界地图&lt;/h2&gt;
&lt;p&gt;很简单，只需将map_data()里的usa换成world就行&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;map_data(&amp;quot;world&amp;quot;)%&amp;gt;%ggplot(aes(x=long, y=lat, group=group))+
  geom_polygon(color=&amp;quot;white&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/cK0LAl2cmd.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;在世界地图中标出中国&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;map_data(&amp;quot;world&amp;quot;)%&amp;gt;%
  filter(region==&amp;quot;China&amp;quot;)%&amp;gt;%
  ggplot(aes(x=long, y=lat, group=group))+
  geom_polygon(fill=&amp;quot;red&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/f0f3fBgG7F.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;美帝用心险恶，不承认台湾属于中国,自己添上去就是了&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;map_data(&amp;quot;world&amp;quot;)%&amp;gt;%
  filter(region==c(&amp;quot;China&amp;quot;,&amp;quot;Taiwan&amp;quot;))%&amp;gt;%
  ggplot(aes(x=long, y=lat, group=group))+
  geom_polygon(fill=&amp;quot;red&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/BDd5BLBmaa.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;sessioninfo&#34;&gt;SessionInfo&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;sessionInfo()
## R version 3.4.1 (2017-06-30)
## Platform: x86_64-w64-mingw32/x64 (64-bit)
## Running under: Windows 10 x64 (build 15063)
## 
## Matrix products: default
## 
## locale:
## [1] LC_COLLATE=Chinese (Simplified)_China.936 
## [2] LC_CTYPE=Chinese (Simplified)_China.936   
## [3] LC_MONETARY=Chinese (Simplified)_China.936
## [4] LC_NUMERIC=C                              
## [5] LC_TIME=Chinese (Simplified)_China.936    
## 
## attached base packages:
## [1] stats     graphics  grDevices utils     datasets  methods   base     
## 
## other attached packages:
##  [1] bindrcpp_0.2         maps_3.2.0           dplyr_0.7.2         
##  [4] purrr_0.2.3          readr_1.1.1          tidyr_0.7.1         
##  [7] tibble_1.3.4         ggplot2_2.2.1        tidyverse_1.1.1     
## [10] RevoUtilsMath_10.0.0
## 
## loaded via a namespace (and not attached):
##  [1] Rcpp_0.12.12     cellranger_1.1.0 compiler_3.4.1   plyr_1.8.4      
##  [5] bindr_0.1        forcats_0.2.0    tools_3.4.1      digest_0.6.12   
##  [9] lubridate_1.6.0  jsonlite_1.5     evaluate_0.10.1  nlme_3.1-131    
## [13] gtable_0.2.0     lattice_0.20-35  pkgconfig_2.0.1  rlang_0.1.2     
## [17] psych_1.7.8      yaml_2.1.14      parallel_3.4.1   haven_1.1.0     
## [21] xml2_1.1.1       httr_1.3.1       stringr_1.2.0    knitr_1.17      
## [25] hms_0.3          RevoUtils_10.0.5 rprojroot_1.2    grid_3.4.1      
## [29] glue_1.1.1       R6_2.2.2         readxl_1.0.0     foreign_0.8-69  
## [33] rmarkdown_1.6    modelr_0.1.1     reshape2_1.4.2   magrittr_1.5    
## [37] backports_1.1.0  scales_0.5.0     htmltools_0.3.6  rvest_0.3.2     
## [41] assertthat_0.2.0 mnormt_1.5-5     colorspace_1.3-2 labeling_0.3    
## [45] stringi_1.1.5    lazyeval_0.2.0   munsell_0.4.3    broom_0.4.2
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>创建及自定义ggplot分面图形参数</title>
      <link>https://taoyan.netlify.app/post/2017-09-14.%E5%88%9B%E5%BB%BA%E5%8F%8A%E8%87%AA%E5%AE%9A%E4%B9%89ggplot%E5%88%86%E9%9D%A2%E5%9B%BE%E5%BD%A2%E5%8F%82%E6%95%B0/</link>
      <pubDate>Thu, 14 Sep 2017 07:47:05 -0500</pubDate>
      <guid>https://taoyan.netlify.app/post/2017-09-14.%E5%88%9B%E5%BB%BA%E5%8F%8A%E8%87%AA%E5%AE%9A%E4%B9%89ggplot%E5%88%86%E9%9D%A2%E5%9B%BE%E5%BD%A2%E5%8F%82%E6%95%B0/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/1.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;简介&#34;&gt;简介&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;ggplot2&lt;/strong&gt;有一个十分重要的功能就是分面，而今天要讲得R包&lt;strong&gt;ggpubr&lt;/strong&gt;中也有一个函数facet()专门用来进行分面操作。&lt;/p&gt;
&lt;h2 id=&#34;安装&#34;&gt;安装&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;install.packages(&amp;quot;ggpubr&amp;quot;)
#or
if(!require(devtools)) install.packages(&amp;quot;devtools&amp;quot;)
devtools::install_github(&amp;quot;kassambara/ggpubr&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;绘图&#34;&gt;绘图&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;library(ggpubr)
df &amp;lt;- ToothGrowth
df$dose &amp;lt;- as.factor(df$dose)
head(df)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    len supp dose
## 1  4.2   VC  0.5
## 2 11.5   VC  0.5
## 3  7.3   VC  0.5
## 4  5.8   VC  0.5
## 5  6.4   VC  0.5
## 6 10.0   VC  0.5
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;p &amp;lt;- ggdensity(df, x=&amp;quot;len&amp;quot;, fill = &amp;quot;dose&amp;quot;, palette = &amp;quot;jco&amp;quot;, ggtheme = theme_light(), legend=&amp;quot;top&amp;quot;)
p
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/1.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;分面&#34;&gt;分面&lt;/h2&gt;
&lt;h3 id=&#34;水平方向分面&#34;&gt;水平方向分面&lt;/h3&gt;
&lt;p&gt;按照变量&lt;code&gt;supp&lt;/code&gt;进行水平方向的分面&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;facet(p, facet.by = &amp;quot;supp&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/2.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;竖直方向分面&#34;&gt;竖直方向分面&lt;/h3&gt;
&lt;p&gt;按照变量&lt;code&gt;supp&lt;/code&gt;进行竖直方向的分面&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;facet(p, facet.by = &amp;quot;supp&amp;quot;, ncol = 1)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/3.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;双变量分面&#34;&gt;双变量分面&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;#divide with &amp;quot;supp&amp;quot; vertical, &amp;quot;dose&amp;quot; horizontal
facet(p, facet.by = c(&amp;quot;supp&amp;quot;, &amp;quot;dose&amp;quot;), short.panel.labs = FALSE)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/4.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;修改面板外观&#34;&gt;修改面板外观&lt;/h2&gt;
&lt;p&gt;主要有以下参数进行修改：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;short.panel.label:默认为TRUE，此时变量名不会显示&lt;/li&gt;
&lt;li&gt;panel.label: 通过自定义label来设置面板label,是一个list&lt;/li&gt;
&lt;li&gt;panel.labs.background: 控制面板背景，里面参数设置很多&lt;/li&gt;
&lt;li&gt;panel.labs.font: 设置字体&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;下面演示一下&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;#divide with &amp;quot;supp&amp;quot; vertical, &amp;quot;sode&amp;quot; horizontal
facet(p, facet.by = c(&amp;quot;supp&amp;quot;, &amp;quot;dose&amp;quot;),
      panel.labs = list(
        supp=c(&amp;quot;Orange Juice&amp;quot;, &amp;quot;Vitamin C&amp;quot;),
        dose=c(&amp;quot;D0.5&amp;quot;, &amp;quot;D1&amp;quot;, &amp;quot;D2&amp;quot;)),
      panel.labs.background = list(
        color=&amp;quot;steelblue&amp;quot;, 
        fill=&amp;quot;steelblue&amp;quot;,
        size=0.5),
      panel.labs.font = list(color=&amp;quot;white&amp;quot;),
      panel.labs.font.x = list(angle=45, color=&amp;quot;white&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/5.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;sessioninfo&#34;&gt;SessionInfo&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;sessionInfo()
## R version 3.4.1 (2017-06-30)
## Platform: x86_64-pc-linux-gnu (64-bit)
## Running under: Ubuntu 16.04.3 LTS
## 
## Matrix products: default
## BLAS: /usr/lib/atlas-base/atlas/libblas.so.3.0
## LAPACK: /usr/lib/atlas-base/atlas/liblapack.so.3.0
## 
## locale:
##  [1] LC_CTYPE=zh_CN.UTF-8       LC_NUMERIC=C              
##  [3] LC_TIME=zh_CN.UTF-8        LC_COLLATE=zh_CN.UTF-8    
##  [5] LC_MONETARY=zh_CN.UTF-8    LC_MESSAGES=zh_CN.UTF-8   
##  [7] LC_PAPER=zh_CN.UTF-8       LC_NAME=C                 
##  [9] LC_ADDRESS=C               LC_TELEPHONE=C            
## [11] LC_MEASUREMENT=zh_CN.UTF-8 LC_IDENTIFICATION=C       
## 
## attached base packages:
## [1] stats     graphics  grDevices utils     datasets  methods   base     
## 
## other attached packages:
## [1] ggpubr_0.1.5  magrittr_1.5  ggplot2_2.2.1
## 
## loaded via a namespace (and not attached):
##  [1] Rcpp_0.12.12     bindr_0.1        knitr_1.17       munsell_0.4.3   
##  [5] colorspace_1.3-2 R6_2.2.2         rlang_0.1.2      stringr_1.2.0   
##  [9] plyr_1.8.4       dplyr_0.7.3      tools_3.4.1      grid_3.4.1      
## [13] gtable_0.2.0     htmltools_0.3.6  yaml_2.1.14      lazyeval_0.2.0  
## [17] rprojroot_1.2    digest_0.6.12    assertthat_0.2.0 tibble_1.3.4    
## [21] bindrcpp_0.2     ggsci_2.7        reshape2_1.4.2   purrr_0.2.3     
## [25] glue_1.1.1       evaluate_0.10.1  rmarkdown_1.6    labeling_0.3    
## [29] stringi_1.1.5    compiler_3.4.1   scales_0.5.0     backports_1.1.0 
## [33] pkgconfig_2.0.1
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>一篇关于国旗与奥运会奖牌的可视化笔记</title>
      <link>https://taoyan.netlify.app/post/2017-09-12.%E4%B8%80%E7%AF%87%E5%85%B3%E4%BA%8E%E5%9B%BD%E6%97%97%E4%B8%8E%E5%A5%A5%E8%BF%90%E4%BC%9A%E5%A5%96%E7%89%8C%E7%9A%84%E5%8F%AF%E8%A7%86%E5%8C%96%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Tue, 12 Sep 2017 12:34:08 -0500</pubDate>
      <guid>https://taoyan.netlify.app/post/2017-09-12.%E4%B8%80%E7%AF%87%E5%85%B3%E4%BA%8E%E5%9B%BD%E6%97%97%E4%B8%8E%E5%A5%A5%E8%BF%90%E4%BC%9A%E5%A5%96%E7%89%8C%E7%9A%84%E5%8F%AF%E8%A7%86%E5%8C%96%E7%AC%94%E8%AE%B0/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/k58bFmLk2c.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;简介&#34;&gt;简介&lt;/h2&gt;
&lt;hr&gt;
&lt;p&gt;本文主要介绍一个R包&lt;strong&gt;ggflags&lt;/strong&gt;，可以用于绘制国旗。安装的话从
&lt;a href=&#34;https://github.com/baptiste/ggflags&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Github&lt;/a&gt;上利用包&lt;strong&gt;devtools&lt;/strong&gt;安装。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;devtools::install_github(&amp;quot;baptiste/ggflags&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;下面看个小例子来介绍一下&lt;/p&gt;
&lt;h2 id=&#34;数据集&#34;&gt;数据集&lt;/h2&gt;
&lt;hr&gt;
&lt;pre&gt;&lt;code&gt;library(ggflags)#load package
set.seed(1111)
#create the dataset
data &amp;lt;- data.frame(x=rnorm(50), y=rnorm(50),
                   country=sample(c(&amp;quot;ar&amp;quot;, &amp;quot;us&amp;quot;, &amp;quot;cn&amp;quot;, &amp;quot;fr&amp;quot;, &amp;quot;gb&amp;quot;, &amp;quot;es&amp;quot;), 50 ,replace = TRUE),
                   stringsAsFactors=FALSE)
head(data)
    x	             y	     country
-0.0865801	-0.7055274	gb
1.3225244	-0.5910791	fr
0.6397020	-0.2796410	us
1.1747866	-1.3209782	cn
0.1162903	0.5851085	gb
-2.9308464	0.0198323	ar
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;绘图&#34;&gt;绘图&lt;/h2&gt;
&lt;hr&gt;
&lt;pre&gt;&lt;code&gt;library(ggplot2)
ggplot(data, aes(x=x, y=y, country=country, size=x))+
  geom_flag()+
  scale_country()+
  scale_size(range = c(0, 10))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/KB9E0de5H5.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;国旗的图片是来自于
&lt;a href=&#34;https://github.com/eosrei/emojione-color-font&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;EmojiOne数据集&lt;/a&gt;,有兴趣的可以去看看了解一下。
题目有奥运会奖牌，所以接下来就可视化一下索契冬奥运会各国奖牌，本次用国旗与国家联系起来。&lt;/p&gt;
&lt;h2 id=&#34;爬取数据&#34;&gt;爬取数据&lt;/h2&gt;
&lt;hr&gt;
&lt;pre&gt;&lt;code&gt;library(dplyr)
library(rvest)
url &amp;lt;- &amp;quot;http://www.nbcolympics.com/medals&amp;quot;
medals &amp;lt;- read_html(url)%&amp;gt;%
  html_nodes(&amp;quot;table&amp;quot;)%&amp;gt;%
  .[[1]]%&amp;gt;%
  html_table()
knitr::kable(head(medals))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Country	      Gold	Silver	Bronze	Total
Russia	       13	11	9	33
United States	9	7	12	28
Norway	       11	5	10	26
Canada	       10	10	5	25
Netherlands	8	7	9	24
Germany	        8	6	5	19
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;爬取完数据之后进行清洗&lt;/p&gt;
&lt;h2 id=&#34;数据清洗&#34;&gt;数据清洗&lt;/h2&gt;
&lt;hr&gt;
&lt;p&gt;本文重要的一环是将国家与国旗联系起来，因此首先要将国家名缩写弄出来，这就要用到
&lt;a href=&#34;https://github.com/vincentarelbundock/countrycode&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;countrycode&lt;/strong&gt;&lt;/a&gt;这个包了。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#install the package
install.packages(&amp;quot;countrycode&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;数据清洗&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;library(countrycode)
library(tidyr)
medals &amp;lt;- medals%&amp;gt;%
  mutate(code=countrycode(Country, &amp;quot;country.name&amp;quot;, &amp;quot;iso2c&amp;quot;))%&amp;gt;%
  mutate(code=tolower(code))%&amp;gt;%
  gather(medal_color, count, Gold, Silver, Bronze)%&amp;gt;%
  mutate(medal_color=factor(medal_color, levels = c(&amp;quot;Gold&amp;quot;, &amp;quot;Silver&amp;quot;, &amp;quot;Bronze&amp;quot;)))%&amp;gt;%
  drop_na(Country, code)
knitr::kable(head(medals))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Country	      Total	code	medal_color count
Russia	       33	 ru	   Gold	      13
United States  28	 us	   Gold	       9
Norway	       26	 no	   Gold	      11
Canada	       25	 ca	   Gold       10
Netherlands    24	 nl	   Gold	       8
Germany	       19	 de	   Gold	       8
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;绘图-1&#34;&gt;绘图&lt;/h2&gt;
&lt;hr&gt;
&lt;p&gt;由于国家数量太多，并且好多国家奖牌数基本为零，因此我们筛选一下：只绘制总奖牌数不小于5的国家。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;medals%&amp;gt;%filter(Total&amp;gt;=5)%&amp;gt;%
  ggplot(aes(x=reorder(Country, Total), y=count))+
  geom_bar(stat = &amp;quot;identity&amp;quot;, aes(fill=medal_color))+
  geom_flag(aes(y=-2,country=code), size=10)+
  theme(axis.text.x = element_text(angle = 90, hjust = 1, size = 7, vjust = 0.5))+
  scale_fill_manual(values = c(
    &amp;quot;Gold&amp;quot;=&amp;quot;gold&amp;quot;,
    &amp;quot;Bronze&amp;quot; = &amp;quot;#cd7f32&amp;quot;,
    &amp;quot;Silver&amp;quot; = &amp;quot;#C0C0C0&amp;quot;
  ))+
  scale_y_continuous(expand = c(0.1, 1))+
  xlab(&amp;quot;Country&amp;quot;)+
  ylab(&amp;quot;Number of medals&amp;quot;)+
  theme_bw()+
  theme(panel.grid = element_blank())+
  theme(legend.justification = c(1, 0), legend.position = c(1, 0))+
  theme(legend.title = element_blank())+
  coord_flip()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/k58bFmLk2c.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;sessioninfo&#34;&gt;SessionInfo&lt;/h2&gt;
&lt;hr&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;sessionInfo()
## R version 3.4.1 (2017-06-30)
## Platform: x86_64-pc-linux-gnu (64-bit)
## Running under: Ubuntu 16.04.3 LTS
## 
## Matrix products: default
## BLAS: /usr/lib/atlas-base/atlas/libblas.so.3.0
## LAPACK: /usr/lib/atlas-base/atlas/liblapack.so.3.0
## 
## locale:
##  [1] LC_CTYPE=zh_CN.UTF-8       LC_NUMERIC=C              
##  [3] LC_TIME=zh_CN.UTF-8        LC_COLLATE=zh_CN.UTF-8    
##  [5] LC_MONETARY=zh_CN.UTF-8    LC_MESSAGES=zh_CN.UTF-8   
##  [7] LC_PAPER=zh_CN.UTF-8       LC_NAME=C                 
##  [9] LC_ADDRESS=C               LC_TELEPHONE=C            
## [11] LC_MEASUREMENT=zh_CN.UTF-8 LC_IDENTIFICATION=C       
## 
## attached base packages:
## [1] stats     graphics  grDevices utils     datasets  methods   base     
## 
## other attached packages:
## [1] bindrcpp_0.2     tidyr_0.7.1      countrycode_0.19 rvest_0.3.2     
## [5] xml2_1.1.1       dplyr_0.7.3      ggflags_0.0.1    ggplot2_2.2.1   
## 
## loaded via a namespace (and not attached):
##  [1] Rcpp_0.12.12     compiler_3.4.1   plyr_1.8.4       highr_0.6       
##  [5] bindr_0.1        tools_3.4.1      digest_0.6.12    evaluate_0.10.1 
##  [9] tibble_1.3.4     gtable_0.2.0     pkgconfig_2.0.1  rlang_0.1.2     
## [13] curl_2.8.1       yaml_2.1.14      stringr_1.2.0    httr_1.3.1      
## [17] knitr_1.17       tidyselect_0.2.0 rprojroot_1.2    grid_3.4.1      
## [21] glue_1.1.1       R6_2.2.2         XML_3.98-1.9     rmarkdown_1.6   
## [25] purrr_0.2.3      selectr_0.3-1    magrittr_1.5     backports_1.1.0 
## [29] scales_0.5.0     htmltools_0.3.6  assertthat_0.2.0 colorspace_1.3-2
## [33] labeling_0.3     stringi_1.1.5    lazyeval_0.2.0   munsell_0.4.3
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>R语言可视化学习笔记之基因组数据可视化</title>
      <link>https://taoyan.netlify.app/post/2017-09-10.r%E8%AF%AD%E8%A8%80%E5%8F%AF%E8%A7%86%E5%8C%96%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%8B%E5%9F%BA%E5%9B%A0%E7%BB%84%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96/</link>
      <pubDate>Sun, 10 Sep 2017 12:34:08 -0500</pubDate>
      <guid>https://taoyan.netlify.app/post/2017-09-10.r%E8%AF%AD%E8%A8%80%E5%8F%AF%E8%A7%86%E5%8C%96%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%8B%E5%9F%BA%E5%9B%A0%E7%BB%84%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819142235.png&#34; alt=&#34;&#34;&gt;
本文主要利用&lt;strong&gt;ggpubr&lt;/strong&gt;包来探索基因组数据,主要是可视化TCGA基因组数据的基因表达谱。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;library(ggpubr)#加载包
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;TCGA是一个包含大量癌症数据的数据库，由Marcin Kosinski创建的RTCGA包可以让我们很方便的获取这些数据。主要有三个包：RTCGA、RTCGA.clininal、RTCGA.mRNA。安装方法如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#Load the bioconductor installersource
(&amp;quot;https://bioconductor.org/biocLite.R&amp;quot;&amp;quot;)
#设置镜像，这里我们选择中科大的镜像options(BioC_mirror=&amp;quot;https://ustc.edu.cn/bioc&amp;quot;)
#下载包
biocLite(&amp;quot;RTCGA&amp;quot;)
biocLite(&amp;quot;RTCGA.clininal&amp;quot;)
biocLite(&amp;quot;RTCGA.mRNA&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;library(RTCGA)
#查看每一种癌症的数据集
infoTCGA()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819142259.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;RTCGA&lt;/strong&gt;包里的函数&lt;code&gt;expressionTCGA()&lt;/code&gt;可以十分方便地从不同数据集中提取基因的表达值，下面我们将从三个数据集BRCA(乳腺癌)、OV(卵巢癌)、LUSC(肺癌)中提取五个基因的表达值。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;library(RTCGA)
library(RTCGA.mRNA)
expr &amp;lt;- expressionsTCGA(BRCA.mRNA, OV.mRNA, LUSC.mRNA, 
extract.cols = c(&amp;quot;GATA3&amp;quot;, &amp;quot;PTEN&amp;quot;, &amp;quot;XBP1&amp;quot;, &amp;quot;ESR1&amp;quot;, &amp;quot;MUC1&amp;quot;))
expr
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819142313.png&#34; alt=&#34;&#34;&gt;
查看每个数据集中的样品数量&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;nb_samples &amp;lt;- table(expr$dataset)nb_samples

## 
## BRCA.mRNA  LUSC.mRNA  OV.mRNA 
##    590        154      561
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;为了方便，我们将部分数据集名称简化&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;expr$dataset &amp;lt;- gsub(pattern = &amp;quot;.mRNA&amp;quot;, replacement = &amp;quot;&amp;quot;, expr$dataset)
expr$bcr_patient_barcode &amp;lt;- paste0(expr$dataset, c(1:590, 1:561, 1:154))
expr
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819142333.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;接下来绘制图形：
1、箱线图&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;library(ggpubr)
ggboxplot(expr, x=&amp;quot;dataset&amp;quot;, y=&amp;quot;GATA3&amp;quot;, title=&amp;quot;GATA3&amp;quot;, ylab = &amp;quot;Expression&amp;quot;, 
color = &amp;quot;dataset&amp;quot;, palette = &amp;quot;jco&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819142349.png&#34; alt=&#34;&#34;&gt;
我们可以一次性绘制多个基因，然后一一查看，而不用每次写代码：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#Creat a list of plots
p &amp;lt;- ggboxplot(expr, x=&amp;quot;dataset&amp;quot;, y=c(&amp;quot;GATA3&amp;quot;, &amp;quot;PTEN&amp;quot;, &amp;quot;XBP1&amp;quot;, &amp;quot;ESR1&amp;quot;, &amp;quot;MUC1&amp;quot;),
title = c(&amp;quot;GATA3&amp;quot;, &amp;quot;PTEN&amp;quot;, &amp;quot;XBP1&amp;quot;, &amp;quot;ESR1&amp;quot;, &amp;quot;MUC1&amp;quot;), 
ylab = &amp;quot;EXpression&amp;quot;, color = &amp;quot;dataset&amp;quot;, palette = &amp;quot;jco&amp;quot;)
#接下来一一查看每个plot
p$GATA3
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819142404.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;p$PTEN
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819142417.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;p$XBP1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819142429.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;p$ESR1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819142440.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;p$MUC1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819142458.png&#34; alt=&#34;&#34;&gt;
当一次性绘制多个基因时，xlab,ylab,title也可以是一个跟y等长的向量。 接下来就是添加p-value以及显著性了&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;my_comparisons &amp;lt;- list(c(&amp;quot;BRCA&amp;quot;, &amp;quot;OV&amp;quot;), c(&amp;quot;OV&amp;quot;, &amp;quot;LUSC&amp;quot;))
ggboxplot(expr, x=&amp;quot;dataset&amp;quot;, y=&amp;quot;GATA3&amp;quot;, title = &amp;quot;GATA3&amp;quot;, ylab = &amp;quot;Expression&amp;quot;, 
color = &amp;quot;dataset&amp;quot;, palette = &amp;quot;jco&amp;quot;)+ stat_compare_means(comparisons = my_comparisons)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819142518.png&#34; alt=&#34;&#34;&gt;
也可以查看每个类型中每一个基因的比较：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;compare_means(c(GATA3, PTEN, XBP1)~dataset, data = expr)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819142529.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;可以通过select以及remove来决定比较那几个类型，比如这里我们只比较BRCA和OV&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ggboxplot(expr, x=&amp;quot;dataset&amp;quot;, y=&amp;quot;GATA3&amp;quot;, title = &amp;quot;GATA3&amp;quot;, ylab = &amp;quot;Expression&amp;quot;, 
color = &amp;quot;dataset&amp;quot;, palette = &amp;quot;jco&amp;quot;, select = c(&amp;quot;BRCA&amp;quot;, &amp;quot;OV&amp;quot;))#通过select选择
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819142541.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ggboxplot(expr, x=&amp;quot;dataset&amp;quot;, y=&amp;quot;GATA3&amp;quot;, title = &amp;quot;GATA3&amp;quot;, ylab = &amp;quot;Expression&amp;quot;, 
color = &amp;quot;dataset&amp;quot;, palette = &amp;quot;jco&amp;quot;, remove = &amp;quot;BRCA&amp;quot;)#通过remove选择
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819142559.png&#34; alt=&#34;&#34;&gt;
通过order来改变各类型在x轴上的顺序&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ggboxplot(expr, x=&amp;quot;dataset&amp;quot;, y=&amp;quot;GATA3&amp;quot;, title = &amp;quot;GATA3&amp;quot;, ylab = &amp;quot;Expression&amp;quot;, 
color = &amp;quot;dataset&amp;quot;, palette = &amp;quot;jco&amp;quot;, order = c(&amp;quot;LUSC&amp;quot;, &amp;quot;OV&amp;quot;, &amp;quot;BRCA&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819142610.png&#34; alt=&#34;&#34;&gt;
通过rotate=TRUE来变换坐标轴&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ggboxplot(expr, x=&amp;quot;dataset&amp;quot;, y=&amp;quot;GATA3&amp;quot;, title = &amp;quot;GATA3&amp;quot;, ylab = &amp;quot;Expression&amp;quot;, 
color = &amp;quot;dataset&amp;quot;, palette = &amp;quot;jco&amp;quot;, rotate=TRUE)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819142622.png&#34; alt=&#34;&#34;&gt;
通过combine=TRUE来进行分面（类似于facet）&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ggboxplot(expr, x=&amp;quot;dataset&amp;quot;, y=c(&amp;quot;GATA3&amp;quot;, &amp;quot;PTEN&amp;quot;, &amp;quot;XBP1&amp;quot;), ylab = &amp;quot;Expression&amp;quot;, 
color = &amp;quot;dataset&amp;quot;, palette = &amp;quot;jco&amp;quot;, combine = TRUE)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819142638.png&#34; alt=&#34;&#34;&gt;
通过merge=TRUE或者merge=“axis”将三个类型的plot绘制在一个panel中&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ggboxplot(expr, x=&amp;quot;dataset&amp;quot;, y=c(&amp;quot;GATA3&amp;quot;, &amp;quot;PTEN&amp;quot;, &amp;quot;XBP1&amp;quot;), ylab = &amp;quot;Expression&amp;quot;,
color = &amp;quot;dataset&amp;quot;, palette = &amp;quot;jco&amp;quot;, merge = TRUE)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819142650.png&#34; alt=&#34;&#34;&gt;
通过merge=flip利用不同癌症类型进行group&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ggboxplot(expr, x=&amp;quot;dataset&amp;quot;, y=c(&amp;quot;GATA3&amp;quot;, &amp;quot;PTEN&amp;quot;, &amp;quot;XBP1&amp;quot;), 
ylab = &amp;quot;Expression&amp;quot;, palette = &amp;quot;jco&amp;quot;, merge = &amp;quot;flip&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819142704.png&#34; alt=&#34;&#34;&gt;
通过add=jitter增加抖动点&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ggboxplot(expr, x=&amp;quot;dataset&amp;quot;, y=c(&amp;quot;GATA3&amp;quot;, &amp;quot;PTEN&amp;quot;, &amp;quot;XBP1&amp;quot;), combine = TRUE,
color = &amp;quot;dataset&amp;quot;, palette = &amp;quot;jco&amp;quot;, ylab = &amp;quot;Expression&amp;quot;, add = &amp;quot;jitter&amp;quot;, 
add.params = list(size=0.1, jitter=0.2))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819142716.png&#34; alt=&#34;&#34;&gt;
通过add=dotplot增加dotplot&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ggboxplot(expr, x=&amp;quot;dataset&amp;quot;, y=c(&amp;quot;GATA3&amp;quot;, &amp;quot;PTEN&amp;quot;, &amp;quot;XBP1&amp;quot;), 
combine = TRUE, color = &amp;quot;dataset&amp;quot;, palette = &amp;quot;jco&amp;quot;, ylab = &amp;quot;Expression&amp;quot;, 
add = &amp;quot;dotplot&amp;quot;, add.params = list(binwidth=0.1, dotsize=0.2))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819142731.png&#34; alt=&#34;&#34;&gt;
很多时候我们很像知道箱线图两端的数据，我们可以通过label来进行展示&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ggboxplot(expr, x=&amp;quot;dataset&amp;quot;, y=c(&amp;quot;GATA3&amp;quot;, &amp;quot;PTEN&amp;quot;, &amp;quot;XBP1&amp;quot;), combine = TRUE,
color = &amp;quot;dataset&amp;quot;, palette = &amp;quot;jco&amp;quot;, ylab = &amp;quot;Expression&amp;quot;, add = &amp;quot;jitter&amp;quot;, 
add.params = list(size=0.1, jitter=0.2), label = &amp;quot;bcr_patient_barcode&amp;quot;, 
label.select = list(top.up=2, top.down=2), 
font.label = list(size=9, face=&amp;quot;italic&amp;quot;), repel = TRUE)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819142743.png&#34; alt=&#34;&#34;&gt;
2、小提琴图&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ggviolin(expr,x=&amp;quot;dataset&amp;quot;, y=c(&amp;quot;GATA3&amp;quot;, &amp;quot;PTEN&amp;quot;, &amp;quot;XBP1&amp;quot;), combine = TRUE, 
color = &amp;quot;dataset&amp;quot;, palette = &amp;quot;jco&amp;quot;, ylab = &amp;quot;Expression&amp;quot;, add = &amp;quot;boxplot&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819142756.png&#34; alt=&#34;&#34;&gt;
通过修改add来更改添加小提琴图里的图形&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ggviolin(expr,x=&amp;quot;dataset&amp;quot;, y=c(&amp;quot;GATA3&amp;quot;, &amp;quot;PTEN&amp;quot;, &amp;quot;XBP1&amp;quot;), combine = TRUE, 
color = &amp;quot;dataset&amp;quot;, palette = &amp;quot;jco&amp;quot;, ylab = &amp;quot;Expression&amp;quot;, add = &amp;quot;median_iqr&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819142817.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;add有好多选项可以选择：“mean”, “mean_se”, “mean_sd”, “mean_ci”, “mean_range”, “median”, “median_iqr”, “median_mad”, “median_range”.有兴趣的可以自己试试。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;3、带状图&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ggstripchart(expr, x=&amp;quot;dataset&amp;quot;, y=c(&amp;quot;GATA3&amp;quot;, &amp;quot;PTEN&amp;quot;, &amp;quot;XBP1&amp;quot;), combine = TRUE,
color = &amp;quot;dataset&amp;quot;, palette = &amp;quot;jco&amp;quot;, size = 0.1, jitter=0.2, ylab = &amp;quot;Expression&amp;quot;, 
add = &amp;quot;median_iqr&amp;quot;, add.params = list(color=&amp;quot;red&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819142835.png&#34; alt=&#34;&#34;&gt;
4、dotplot&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ggdotplot(expr, x=&amp;quot;dataset&amp;quot;, y=c(&amp;quot;GATA3&amp;quot;, &amp;quot;PTEN&amp;quot;, &amp;quot;XBP1&amp;quot;), combine = TRUE, 
color = &amp;quot;dataset&amp;quot;, palette = &amp;quot;jco&amp;quot;, fill = &amp;quot;white&amp;quot;, binwidth = 0.1, ylab = &amp;quot;Expression&amp;quot;,
add = &amp;quot;median_iqr&amp;quot;, add.params = list(size=0.9))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819142847.png&#34; alt=&#34;&#34;&gt;
5、密度图&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ggdensity(expr, x=c(&amp;quot;GATA3&amp;quot;, &amp;quot;PTEN&amp;quot;, &amp;quot;XBP1&amp;quot;), y=&amp;quot;..density..&amp;quot;, 
combine = TRUE, xlab = &amp;quot;Expression&amp;quot;, add = &amp;quot;median&amp;quot;, rug = TRUE)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819142910.png&#34; alt=&#34;&#34;&gt;
将dataset映射给颜色&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ggdensity(expr, x=c(&amp;quot;GATA3&amp;quot;, &amp;quot;PTEN&amp;quot;, &amp;quot;XBP1&amp;quot;), y=&amp;quot;..density..&amp;quot;, combine = TRUE,
xlab = &amp;quot;Expression&amp;quot;, add = &amp;quot;median&amp;quot;, rug = TRUE, color = &amp;quot;dataset&amp;quot;, 
fill = &amp;quot;dataset&amp;quot;, palette = &amp;quot;jco&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819142922.png&#34; alt=&#34;&#34;&gt;
将三幅图整合进一个panel中，并对y轴进行..count..，而不是..density..&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ggdensity(expr, x=c(&amp;quot;GATA3&amp;quot;, &amp;quot;PTEN&amp;quot;, &amp;quot;XBP1&amp;quot;), y=&amp;quot;..count..&amp;quot;, xlab = &amp;quot;Expression&amp;quot;,
add = &amp;quot;median&amp;quot;, rug = TRUE, palette = &amp;quot;jco&amp;quot;)
## $GATA3
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819143008.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;## ## $PTEN
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819143023.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;## ## $XBP1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819143041.png&#34; alt=&#34;&#34;&gt;
颜色映射，将x轴变量映射给颜色&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ggdensity(expr, x=c(&amp;quot;GATA3&amp;quot;, &amp;quot;PTEN&amp;quot;, &amp;quot;XBP1&amp;quot;), y=&amp;quot;..count..&amp;quot;, color = &amp;quot;.x.&amp;quot;, 
fill = &amp;quot;.x.&amp;quot;, merge = TRUE, xlab = &amp;quot;Expression&amp;quot;, add = &amp;quot;median&amp;quot;, rug = TRUE, palette = &amp;quot;jco&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819143107.png&#34; alt=&#34;&#34;&gt;
按dataset进行分面&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ggdensity(expr, x=c(&amp;quot;GATA3&amp;quot;, &amp;quot;PTEN&amp;quot;, &amp;quot;XBP1&amp;quot;), y=&amp;quot;..count..&amp;quot;, color = &amp;quot;.x.&amp;quot;, 
fill = &amp;quot;.x.&amp;quot;, merge = TRUE, xlab = &amp;quot;Expression&amp;quot;, add = &amp;quot;median&amp;quot;, 
rug = TRUE, palette = &amp;quot;jco&amp;quot;, facet.by = &amp;quot;dataset&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819143119.png&#34; alt=&#34;&#34;&gt;
6、直方图&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;gghistogram(expr, x=c(&amp;quot;GATA3&amp;quot;, &amp;quot;PTEN&amp;quot;, &amp;quot;XBP1&amp;quot;), y=&amp;quot;..density..&amp;quot;, 
xlab = &amp;quot;Expression&amp;quot;, add = &amp;quot;median&amp;quot;, rug = TRUE)
## $GATA3
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819143132.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;## ## $PTEN
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819143144.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;## ## $XBP1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819143154.png&#34; alt=&#34;&#34;&gt;
将dataset映射给颜色&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;gghistogram(expr, x=c(&amp;quot;GATA3&amp;quot;, &amp;quot;PTEN&amp;quot;, &amp;quot;XBP1&amp;quot;), y=&amp;quot;..density..&amp;quot;, xlab = &amp;quot;Expression&amp;quot;, 
add = &amp;quot;median&amp;quot;, rug = TRUE, color = &amp;quot;dataset&amp;quot;, fill = &amp;quot;dataset&amp;quot;, palette = &amp;quot;jco&amp;quot;)
## $GATA3
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819143208.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;## ## $PTEN
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819143228.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;## ## $XBP1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819143239.png&#34; alt=&#34;&#34;&gt;
后面还有一些将几幅图整合在一个panel以及分面等大同小异就不讲了。
7、Q-Q图&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ggqqplot(expr, x=c(&amp;quot;GATA3&amp;quot;, &amp;quot;PTEN&amp;quot;, &amp;quot;XBP1&amp;quot;), combine = TRUE, size = 0.5)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819143251.png&#34; alt=&#34;&#34;&gt;
颜色映射&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ggqqplot(expr, x=c(&amp;quot;GATA3&amp;quot;, &amp;quot;PTEN&amp;quot;, &amp;quot;XBP1&amp;quot;), combine = TRUE, size = 0.5, 
color = &amp;quot;dataset&amp;quot;, palette = &amp;quot;jco&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819143302.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;#sessionInfo&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sessionInfo()
## R version 3.4.0 (2017-04-21)
## Platform: x86_64-pc-linux-gnu (64-bit)
## Running under: Ubuntu 16.04.2 LTS
## 
## Matrix products: default
## BLAS: /usr/lib/libblas/libblas.so.3.6.0
## LAPACK: /usr/lib/lapack/liblapack.so.3.6.0
## 
## locale:
## [1] LC_CTYPE=en_US.UTF-8 LC_NUMERIC=C 
## [3] LC_TIME=zh_CN.UTF-8 LC_COLLATE=en_US.UTF-8 
## [5] LC_MONETARY=zh_CN.UTF-8 LC_MESSAGES=en_US.UTF-8
## [7] LC_PAPER=zh_CN.UTF-8 LC_NAME=C 
## [9] LC_ADDRESS=C LC_TELEPHONE=C 
## [11] LC_MEASUREMENT=zh_CN.UTF-8 LC_IDENTIFICATION=C 
## 
## attached base packages:
## [1] stats graphics grDevices utils datasets methods base 
## 
## other attached packages:
## [1] bindrcpp_0.2 RTCGA.mRNA_1.4.0 RTCGA_1.6.0 ggpubr_0.1.3 
## [5] magrittr_1.5 ggplot2_2.2.1 
## 
## loaded via a namespace (and not attached):
## [1] zoo_1.8-0 reshape2_1.4.2 purrr_0.2.2.2 
## [4] splines_3.4.0 ggthemes_3.4.0 lattice_0.20-35 
## [7] colorspace_1.3-2 htmltools_0.3.6 viridisLite_0.2.0
## [10] yaml_2.1.14 survival_2.41-3 XML_3.98-1.9 
## [13] survMisc_0.5.4 rlang_0.1.1 foreign_0.8-68 
## [16] glue_1.1.0 bindr_0.1 plyr_1.8.4 
## [19] stringr_1.2.0 ggsignif_0.2.0 munsell_0.4.3 
## [22] gtable_0.2.0 ggsci_2.7 rvest_0.3.2 
## [25] psych_1.7.5 evaluate_0.10 labeling_0.3 
## [28] knitr_1.16 parallel_3.4.0 broom_0.4.2 
## [31] Rcpp_0.12.11 xtable_1.8-2 scales_0.4.1
## [34] backports_1.1.0 cmprsk_2.2-7 km.ci_0.5-2 
## [37] gridExtra_2.2.1 mnormt_1.5-5 digest_0.6.12 
## [40] stringi_1.1.5 ggrepel_0.6.5 dplyr_0.7.0 
## [43] KMsurv_0.1-5 grid_3.4.0 rprojroot_1.2 
## [46] tools_3.4.0 lazyeval_0.2.0 tibble_1.3.3 
## [49] tidyr_0.6.3 Matrix_1.2-10 data.table_1.10.4
## [52] xml2_1.1.1 survminer_0.4.0 assertthat_0.2.0 
## [55] rmarkdown_1.6 httr_1.2.1 viridis_0.4.0 
## [58] R6_2.2.2 nlme_3.1-131 compiler_3.4.0
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>ggplot2学习笔记之图形排列</title>
      <link>https://taoyan.netlify.app/post/2017-08-24.ggplot2%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%8B%E5%9B%BE%E5%BD%A2%E6%8E%92%E5%88%97/</link>
      <pubDate>Thu, 24 Aug 2017 12:34:08 -0500</pubDate>
      <guid>https://taoyan.netlify.app/post/2017-08-24.ggplot2%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%8B%E5%9B%BE%E5%BD%A2%E6%8E%92%E5%88%97/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819143351.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;R语言基本绘图函数中可以利用par()以及layout()来进行图形排列，但是这两个函数对于ggplot图则不太适用，本文主要讲解如何对多ggplot图形多页面进行排列。主要讲解如何利用包gridExtra、cowplot以及ggpubr中的函数进行图形排列。&lt;/p&gt;
&lt;h2 id=&#34;绘制图形&#34;&gt;绘制图形&lt;/h2&gt;
&lt;hr&gt;
&lt;pre&gt;&lt;code&gt;#load packages
library(gridExtra)
library(cowplot)
library(ggpubr)
#dataset ToothGrowth and mtcars
mtcars$name &amp;lt;- rownames(mtcars)
mtcars$cyl &amp;lt;- as.factor(mtcars$cyl)
head(mtcars[, c(&amp;quot;name&amp;quot;, &amp;quot;wt&amp;quot;,&amp;quot;mpg&amp;quot;, &amp;quot;cyl&amp;quot;)])
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819143411.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#First let&#39;s create some plots
#Box plot(bxp)
bxp &amp;lt;- ggboxplot(ToothGrowth, x=&amp;quot;dose&amp;quot;, y=&amp;quot;len&amp;quot;, color = &amp;quot;dose&amp;quot;, palette = &amp;quot;jco&amp;quot;)
#Dot plot(dp)
dp &amp;lt;- ggdotplot(ToothGrowth, x=&amp;quot;dose&amp;quot;, y=&amp;quot;len&amp;quot;, color = &amp;quot;dose&amp;quot;, palette = &amp;quot;jco&amp;quot;, binwidth = 1)
#An ordered Bar plot(bp)
bp &amp;lt;- ggbarplot(mtcars, x=&amp;quot;name&amp;quot;, y=&amp;quot;mpg&amp;quot;, fill=&amp;quot;cyl&amp;quot;, #change fill color by cyl 
color=&amp;quot;white&amp;quot;, #Set bar border colors to white 
palette = &amp;quot;jco&amp;quot;, #jco jourbal color palette 
sort.val = &amp;quot;asc&amp;quot;, #Sort the value in ascending order 
sort.by.groups = TRUE, #Sort inside each group 
x.text.angle=90 #Rotate vertically x axis texts )
bp+font(&amp;quot;x.text&amp;quot;, size = 8)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819143425.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#Scatter plots(sp)
sp &amp;lt;- ggscatter(mtcars, x=&amp;quot;wt&amp;quot;, y=&amp;quot;mpg&amp;quot;, add = &amp;quot;reg.line&amp;quot;, #Add regression line 
conf.int = TRUE, #Add confidence interval 
color = &amp;quot;cyl&amp;quot;, palette = &amp;quot;jco&amp;quot;,#Color by group cyl 
shape = &amp;quot;cyl&amp;quot; #Change point shape by groups cyl 
)+ 
stat_cor(aes(color=cyl), label.x = 3) #Add correlation coefficientsp
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819143437.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;图形排列&#34;&gt;图形排列&lt;/h2&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;多幅图形排列于一面&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;ggpubr::ggarrange()&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;ggarrange(bxp, dp, bp+rremove(&amp;quot;x.text&amp;quot;), labels = c(&amp;quot;A&amp;quot;, &amp;quot;B&amp;quot;, &amp;quot;C&amp;quot;), ncol = 2, nrow = 2)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819143450.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;cowplot::plot.grid()&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;plot_grid(bxp, dp, bp+rremove(&amp;quot;x.text&amp;quot;), labels = c(&amp;quot;A&amp;quot;, &amp;quot;B&amp;quot;, &amp;quot;C&amp;quot;), ncol = 2, nrow = 2)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819143501.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;gridExtra::grid.arrange()&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;grid.arrange(bxp, dp, bp+rremove(&amp;quot;x.text&amp;quot;), ncol=2, nrow=2)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819143516.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;排列图形注释&#34;&gt;排列图形注释&lt;/h2&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;ggpubr::annotate_figure()&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;figure &amp;lt;- ggarrange(sp, bp+font(&amp;quot;x.text&amp;quot;, size = 10), ncol = 1, nrow = 2)
annotate_figure(figure, top=text_grob(&amp;quot;Visualizing mpg&amp;quot;, color = &amp;quot;red&amp;quot;, 
face = &amp;quot;bold&amp;quot;, size=14), bottom = text_grob(&amp;quot;Data source:\n mtcars data set&amp;quot;, 
color = &amp;quot;blue&amp;quot;, hjust = 1, x=1, face = &amp;quot;italic&amp;quot;, size=10), left = text_grob(&amp;quot;Figure arranged using ggpubr&amp;quot;, color = &amp;quot;green&amp;quot;, rot = 90), 
right = &amp;quot;I&#39;m done, thanks :-)!&amp;quot;, fig.lab = &amp;quot;Figure 1&amp;quot;, fig.lab.face = &amp;quot;bold&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819143530.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;绘图面板对齐&#34;&gt;绘图面板对齐&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;绘制生存曲线&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;library(survival)
head(colon[, c(1:4)])
#Fit survival curves
fit &amp;lt;- survfit(Surv(time, status)~adhere, data = colon)
library(survminer)
ggsurv &amp;lt;- ggsurvplot(fit, data = colon, palette = &amp;quot;jco&amp;quot;, #jco palette 
pval = TRUE, pval.coord=c(500, 0.4), #Add p-value 
risk.table = TRUE #Add risk table)
names(ggsurv)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;plot&amp;quot; &amp;quot;table&amp;quot; &amp;quot;data.survplot&amp;quot; &amp;quot;data.survtable&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;ggsurv是一个包含两部分的list&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;plot：生存曲线&lt;/li&gt;
&lt;li&gt;table：风险表&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;可以用ggarrange()进行排列这两者&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ggarrange(ggsurv$plot, ggsurv$table, heights = c(2, 0.7), ncol = 1, nrow = 2)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819143545.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;上图中的坐标轴没有对齐，可以通过参数align来设置&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;ggarrange(ggsurv$plot, ggsurv$table, heights = c(2, 0.7), ncol = 1, nrow = 2, align = &amp;quot;v&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819143601.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;改变排列图的行列&#34;&gt;改变排列图的行列&lt;/h2&gt;
&lt;hr&gt;
&lt;p&gt;设置面板为两行两列，其中sp占据第一行的两列，bxp以及dp置于第二行的两列&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ggarrange(sp, #First row with scatter plot(sp) 
ggarrange(bxp, dp, ncol = 2, labels = c(&amp;quot;B&amp;quot;,&amp;quot;C&amp;quot;)),#Second row with box and dot plot 
nrow = 2, labels = &amp;quot;A&amp;quot; #Labels of the scatter plot)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819143613.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;r包cowplot&#34;&gt;R包cowplot&lt;/h2&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;cowplot::ggdraw()可以将图形置于特定位置, ggdraw()首先会初始化一个绘图面板， 接下来draw_plot()则是将图形绘制于初始化的绘图面板中，通过参数设置可以将图形置于特定位置。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;draw_plot(plot, x=0, y=0, width=1, height=1)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;其中：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;plot:将要放置的图形&lt;/li&gt;
&lt;li&gt;x,y:控制图形位置&lt;/li&gt;
&lt;li&gt;width,height:图形的宽度和高度&lt;/li&gt;
&lt;li&gt;draw_plot_label():为图形添加标签&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;draw_plot_label(label, x=0, y=1, size=16, ...)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;其中：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;label:标签&lt;/li&gt;
&lt;li&gt;x,y:控制标签位置&lt;/li&gt;
&lt;li&gt;size:标签字体大小&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;下面通过一个例子来讲解如何将多个图形放置在特定的位置。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ggdraw()+ draw_plot(bxp, x=0, y=0.5, width=0.5, height = 0.5)+
draw_plot(dp, x=0.5, y=0.5, width = 0.5, height = 0.5)+ 
draw_plot(bp, x=0, y=0, width = 1.5, height = 0.5)+ 
draw_plot_label(label = c(&amp;quot;A&amp;quot;, &amp;quot;B&amp;quot;, &amp;quot;C&amp;quot;), size = 15, x=c(0, 0.5, 0), y=c(1, 1, 0.5))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819143628.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;r包gridextra&#34;&gt;R包gridExtra&lt;/h2&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;gridExtra::arrangeGrop()改变行列分布&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;下面将sp置于第一行并横跨两列，而bxp和dp分别分布于第二行两列&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;grid.arrange(sp, #First row with one plot spaning over 2 columns
arrangeGrob(bxp, dp, ncol = 2), #Second row with 2plots in 2 different columns 
nrow=2) #number of rows
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819143641.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;也可以通过函数grid.arrange中的layout_matrix来设置复杂的图形布局&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;grid.arrange(bp, #bar plot spaning two columns 
bxp, sp, #box plot amd scatter plot 
ncol=2, nrow=2, layout_matrix=rbind(c(1, 1), c(2, 3)))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819143652.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;要相对grid.arrange()以及arrangeGrob()的输出进行注释，首先要利用as_ggplot()将其转化为ggplot图形，进而利用函数draw_plot_label()对其进行注释。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;gt &amp;lt;- arrangeGrob(bp, bxp, sp, layout_matrix = rbind(c(1,1),c(2, 3)))
p &amp;lt;- as_ggplot(gt)+ 
draw_plot_label(label = c(&amp;quot;A&amp;quot;, &amp;quot;B&amp;quot;, &amp;quot;C&amp;quot;), size = 15, x=c(0, 0, 0.5), y=c(1, 0.5, 0.5))
p
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819143706.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;r包grid&#34;&gt;R包grid&lt;/h2&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;R包grid中的grid.layout()可以设置复杂的图形布局，viewport()可以定义一个区域用来安置图形排列，print()则用来将图形置于特定区域。 总结起来步骤如下：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;创建图形p1,p2,p3,…&lt;/li&gt;
&lt;li&gt;grid.newpage()创建一个画布&lt;/li&gt;
&lt;li&gt;创建图形布局，几行几列&lt;/li&gt;
&lt;li&gt;定义布局的矩形区域&lt;/li&gt;
&lt;li&gt;print：将图形置于特定区域&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;library(grid)
#Move to a new page
grid.newpage()
#Create layout:nrow=3, ncol=2
pushViewport(viewport(layout = grid.layout(nrow=3, ncol=2)))
#A helper function to define a region on the layout
define_region &amp;lt;- function(row, col){ 
viewport(layout.pos.row = row, layout.pos.col = col)}
#Arrange the plots
print(sp, vp=define_region(row=1, col=1:2)) #Span over two columns
print(bxp, vp=define_region(row=2, col=1))
print(dp, vp=define_region(row=2, col=2))
print(bp+rremove(&amp;quot;x.text&amp;quot;), vp=define_region(row=3, col=1:2))
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;设置共同图例&#34;&gt;设置共同图例&lt;/h2&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;ggpubr::ggarrange()可以为组合图形添加共同图例&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;common.legeng=TRUE:在图形旁边添加图例&lt;/li&gt;
&lt;li&gt;legend：指定legend的位置，主要选项有：top、bottom、left、right。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;ggarrange(bxp, dp, labels = c(&amp;quot;A&amp;quot;, &amp;quot;B&amp;quot;), common.legend = TRUE, legend = &amp;quot;bottom&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819143722.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;含有边际密度图的散点图&#34;&gt;含有边际密度图的散点图&lt;/h2&gt;
&lt;hr&gt;
&lt;pre&gt;&lt;code&gt;sp &amp;lt;- ggscatter(iris, x=&amp;quot;Sepal.Length&amp;quot;, y=&amp;quot;Sepal.Width&amp;quot;, color=&amp;quot;Species&amp;quot;, 
palette = &amp;quot;jco&amp;quot;, size=3, alpha=0.6)+border()
#Marginal density plot of x(top panel) and y(right panel)
xplot &amp;lt;- ggdensity(iris, &amp;quot;Sepal.Length&amp;quot;, fill=&amp;quot;Species&amp;quot;,palette = &amp;quot;jco&amp;quot;)
yplot &amp;lt;- ggdensity(iris, &amp;quot;Sepal.Width&amp;quot;, fill=&amp;quot;Species&amp;quot;, palette = &amp;quot;jco&amp;quot;)+rotate()
#Clean the plots
xplot &amp;lt;- xplot+clean_theme()
yplot &amp;lt;- yplot+clean_theme()
#Arrange the plots
ggarrange(xplot, NULL, sp, yplot, ncol = 2, nrow = 2, align = &amp;quot;hv&amp;quot;, widths = c(2, 1), 
heights = c(1, 2), common.legend = TRUE)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819143734.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;ggplot图文本表格组合&#34;&gt;ggplot图、文本、表格组合&lt;/h2&gt;
&lt;hr&gt;
&lt;pre&gt;&lt;code&gt;density.p &amp;lt;- ggdensity(iris, x=&amp;quot;Sepal.Length&amp;quot;, fill=&amp;quot;Species&amp;quot;, palette = &amp;quot;jco&amp;quot;)
#Compute the summary table of Sepal.Length
stable &amp;lt;- desc_statby(iris, measure.var = &amp;quot;Sepal.Length&amp;quot;, grps = &amp;quot;Species&amp;quot;)
stable &amp;lt;- stable[, c(&amp;quot;Species&amp;quot;, &amp;quot;length&amp;quot;, &amp;quot;mean&amp;quot;, &amp;quot;sd&amp;quot;)]
#Summary table plot, medium and theme
stable.p &amp;lt;- ggtexttable(stable, rows = NULL, theme = ttheme(&amp;quot;mOrange&amp;quot;))
text &amp;lt;- paste(&amp;quot;iris data set gives the measurements in cm&amp;quot;, &amp;quot;of the variables sepal length and width&amp;quot;, &amp;quot;and petal length and width, respectively,&amp;quot;, &amp;quot;for 50 flowers from each of 3 species of iris.&amp;quot;, &amp;quot;The species are Iris setosa, versicolor, and virginica.&amp;quot;, sep = &amp;quot; &amp;quot;)
text.p &amp;lt;- ggparagraph(text = text, face = &amp;quot;italic&amp;quot;, size = 11, color = &amp;quot;black&amp;quot;)
#Arrange the plots on the same page
ggarrange(density.p, stable.p, text.p, ncol = 1, nrow = 3, heights = c(1, 0.5, 0.3))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819143747.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;ggplot图形中嵌入图形元素&#34;&gt;ggplot图形中嵌入图形元素&lt;/h2&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;ggplot2::annotation_custom()可以添加各种图形元素到ggplot图中&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;annotation_custom(grob, xmin, xmax, ymin, ymax)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;其中：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;grob:要添加的图形元素&lt;/li&gt;
&lt;li&gt;xmin, xmax: x轴方向位置（水平方向）&lt;/li&gt;
&lt;li&gt;ymin, ymax: y轴方向位置（竖直方向）&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;ggplot图形中添加table&#34;&gt;ggplot图形中添加table&lt;/h2&gt;
&lt;hr&gt;
&lt;pre&gt;&lt;code&gt;density.p+annotation_custom(ggplotGrob(stable.p), xmin = 5.5, xmax = 8, ymin = 0.7)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819143803.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;ggplot图形中添加box-plot&#34;&gt;ggplot图形中添加box plot&lt;/h2&gt;
&lt;hr&gt;
&lt;pre&gt;&lt;code&gt;sp &amp;lt;- ggscatter(iris, x=&amp;quot;Sepal.Length&amp;quot;, y=&amp;quot;Sepal.Width&amp;quot;, color = &amp;quot;Species&amp;quot;, palette = &amp;quot;jco&amp;quot;, size = 3, alpha=0.6)
xbp &amp;lt;- ggboxplot(iris$Sepal.Length, width = 0.3, fill = &amp;quot;lightgray&amp;quot;)+ rotate()+theme_transparent()
ybp &amp;lt;- ggboxplot(iris$Sepal.Width, width = 0.3, fill=&amp;quot;lightgray&amp;quot;)+theme_transparent()
# Create the external graphical objects
# called a &amp;quot;grop&amp;quot; in Grid terminology
xbp_grob &amp;lt;- ggplotGrob(xbp)
ybp_grob &amp;lt;- ggplotGrob(ybp)
#place box plots inside the scatter plot
xmin &amp;lt;- min(iris$Sepal.Length)
xmax &amp;lt;- max(iris$Sepal.Length)
ymin &amp;lt;- min(iris$Sepal.Width)
ymax &amp;lt;- max(iris$Sepal.Width)
yoffset &amp;lt;- (1/15)*ymax
xoffset &amp;lt;- (1/15)*xmax
# Insert xbp_grob inside the scatter plots
p+annotation_custom(grob = xbp_grob, xmin = xmin, xmax = xmax, 
ymin = ymin-yoffset, ymax = ymin+yoffset)+
# Insert ybp_grob inside the scatter plot
annotation_custom(grob = ybp_grob, xmin = xmin-xoffset, 
xmax=xmin+xoffset, ymin=ymin, ymax=ymax)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819143814.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;ggplot图形添加背景&#34;&gt;ggplot图形添加背景&lt;/h2&gt;
&lt;hr&gt;
&lt;pre&gt;&lt;code&gt;#import the imageimg.file &amp;lt;- system.file(file.path(&amp;quot;images&amp;quot;, &amp;quot;background-image.png&amp;quot;), package = &amp;quot;ggpubr&amp;quot;)
img &amp;lt;- png::readPNG(img.file)
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;利用ggpubr::background_image()为ggplot图形添加背景图&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;library(ggplot2)
library(ggpubr)
ggplot(iris, aes(Species,Sepal.Length))+
background_image(img)+
geom_boxplot(aes(fill=Species), color=&amp;quot;white&amp;quot;)+ fill_palette(&amp;quot;jco&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819143827.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;修改透明度&#34;&gt;修改透明度&lt;/h2&gt;
&lt;hr&gt;
&lt;pre&gt;&lt;code&gt;ggplot(iris, aes(Species,Sepal.Length))+
background_image(img)+geom_boxplot(aes(fill=Species), color=&amp;quot;white&amp;quot;, alpha=0.5)+ 
fill_palette(&amp;quot;jco&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819143843.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;多页排列&#34;&gt;多页排列&lt;/h2&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;日常工作中我们有时要绘制许多图，假如我们有16幅图，每页排列4张的话就需要4页才能排完，而ggpubr::ggarrange()可以通过制定行列数自动在多页之间进行图形排列&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;multi.page &amp;lt;-ggarrange(bxp, dp, bp, sp, nrow = 1, ncol = 2)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;上述代码返回两页每页两图&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;multi.page[[1]]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819143901.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;multi.page[[2]]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819143916.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;利用ggarrange嵌套布局&#34;&gt;利用ggarrange()嵌套布局&lt;/h2&gt;
&lt;hr&gt;
&lt;pre&gt;&lt;code&gt;p1 &amp;lt;- ggarrange(sp, bp+font(&amp;quot;x.text&amp;quot;, size = 9), ncol = 1, nrow = 2)
p2 &amp;lt;- ggarrange(density.p, stable.p, text.p, ncol = 1, nrow = 3, 
heights = c(1, 0.5, 0.3))
ggarrange(p1, p2, ncol = 2, nrow = 1)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819143929.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;sessioninfo&#34;&gt;SessionInfo&lt;/h2&gt;
&lt;hr&gt;
&lt;pre&gt;&lt;code&gt;sessionInfo()
## R version 3.4.1 (2017-06-30)
## Platform: x86_64-w64-mingw32/x64 (64-bit)
## Running under: Windows 10 x64 (build 15063)
## 
## Matrix products: default
## 
## locale:
## [1] LC_COLLATE=Chinese (Simplified)_China.936 
## [2] LC_CTYPE=Chinese (Simplified)_China.936 
## [3] LC_MONETARY=Chinese (Simplified)_China.936
## [4] LC_NUMERIC=C
## [5] LC_TIME=Chinese (Simplified)_China.936 
## 
## attached base packages:
## [1] grid stats graphics grDevices utils datasets methods 
## [8] base 
## 
## other attached packages:
## [1] survminer_0.4.0 survival_2.41-3 ggpubr_0.1.5 magrittr_1.5 
## [5] cowplot_0.8.0 ggplot2_2.2.1 gridExtra_2.2.1
## 
## loaded via a namespace (and not attached):
## [1] zoo_1.8-0 purrr_0.2.3 reshape2_1.4.2 
## [4] splines_3.4.1 lattice_0.20-35 colorspace_1.3-2 
## [7] htmltools_0.3.6 yaml_2.1.14 survMisc_0.5.4
## [10] rlang_0.1.2 foreign_0.8-69 glue_1.1.1 
## [13] bindrcpp_0.2 bindr_0.1 plyr_1.8.4 
## [16] stringr_1.2.0 munsell_0.4.3 gtable_0.2.0 
## [19] ggsci_2.7 psych_1.7.5 evaluate_0.10.1 
## [22] labeling_0.3 knitr_1.17 parallel_3.4.1 
## [25] broom_0.4.2 Rcpp_0.12.12 xtable_1.8-2 
## [28] scales_0.4.1 backports_1.1.0 cmprsk_2.2-7 
## [31] km.ci_0.5-2 mnormt_1.5-5 png_0.1-7 
## [34] digest_0.6.12 stringi_1.1.5 dplyr_0.7.2 
## [37] KMsurv_0.1-5 rprojroot_1.2 tools_3.4.1 
## [40] lazyeval_0.2.0 tibble_1.3.3 tidyr_0.7.0 
## [43] pkgconfig_2.0.1 Matrix_1.2-11 data.table_1.10.4
## [46] assertthat_0.2.0 rmarkdown_1.6 R6_2.2.2 
## [49] nlme_3.1-131 compiler_3.4.1
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>R语言学习笔记之热图绘制</title>
      <link>https://taoyan.netlify.app/post/2017-08-12.r%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%8B%E7%83%AD%E5%9B%BE%E7%BB%98%E5%88%B6/</link>
      <pubDate>Sat, 12 Aug 2017 12:34:08 -0500</pubDate>
      <guid>https://taoyan.netlify.app/post/2017-08-12.r%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%8B%E7%83%AD%E5%9B%BE%E7%BB%98%E5%88%B6/</guid>
      <description>&lt;h2 id=&#34;简介&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819140939.png&#34; alt=&#34;&#34;&gt;
简介&lt;/h2&gt;
&lt;p&gt;本文将绘制静态与交互式热图，需要使用到以下R包和函数：
&lt;code&gt;heatmap()&lt;/code&gt;:用于绘制简单热图的函数
&lt;code&gt;heatmap.2()&lt;/code&gt;:绘制增强热图的函数
&lt;code&gt;d3heatmap&lt;/code&gt;:用于绘制交互式热图的R包
&lt;code&gt;ComplexHeatmap&lt;/code&gt;:用于绘制、注释和排列复杂热图的R&amp;amp;bioconductor包（非常适用于基因组数据分析）&lt;/p&gt;
&lt;h2 id=&#34;数据准备&#34;&gt;数据准备&lt;/h2&gt;
&lt;p&gt;使用R内置数据集&lt;code&gt;mtcars&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;df &amp;lt;- as.matrix((scale(mtcars)))#归一化、矩阵化
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;使用基本函数绘制简单简单热图&#34;&gt;使用基本函数绘制简单简单热图&lt;/h2&gt;
&lt;p&gt;主要是函数&lt;code&gt;heatmap(x, scale=&amp;quot;row&amp;quot;)&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;x:数据矩阵&lt;/li&gt;
&lt;li&gt;scale：表示不同方向，可选值有：row, columa, none&lt;/li&gt;
&lt;li&gt;Default plotheatmap(df, scale = &amp;ldquo;none&amp;rdquo;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819141017.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Use custom colors
col &amp;lt;- colorRampPalette(c(&amp;quot;red&amp;quot;, &amp;quot;white&amp;quot;, &amp;quot;blue&amp;quot;))(256)
heatmap(df, scale = &amp;quot;none&amp;quot;, col=col)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819141034.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#Use RColorBrewer color palette names
library(RColorBrewer)col &amp;lt;- colorRampPalette(brewer.pal(10, &amp;quot;RdYlBu&amp;quot;))(256)#自设置调色板dim(df)#查看行列数
## [1] 32 11
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;heatmap(df, scale = &amp;quot;none&amp;quot;, col=col, RowSideColors = rep(c(&amp;quot;blue&amp;quot;, &amp;quot;pink&amp;quot;), each=16), 
ColSideColors = c(rep(&amp;quot;purple&amp;quot;, 5), rep(&amp;quot;orange&amp;quot;, 6)))
#参数RowSideColors和ColSideColors用于分别注释行和列颜色等,可help(heatmap)详情
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819141058.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;增强热图&#34;&gt;增强热图&lt;/h2&gt;
&lt;p&gt;函数&lt;code&gt;heatmap.2()&lt;/code&gt;
在热图绘制方面提供许多扩展，此函数包装在&lt;code&gt;gplots&lt;/code&gt;包里。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;library(gplots)heatmap.2(df, scale = &amp;quot;none&amp;quot;, col=bluered(100), 
trace = &amp;quot;none&amp;quot;, density.info = &amp;quot;none&amp;quot;)#还有其他参数可参考help(heatmap.2())
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819141118.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;交互式热图绘制&#34;&gt;交互式热图绘制&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;d3heatmap&lt;/code&gt;包可用于生成交互式热图绘制,可通过以下代码生成：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;if (!require(&amp;quot;devtools&amp;quot;)) 
install.packages(&amp;quot;devtools&amp;quot;) 
devtools::install_github(&amp;quot;rstudio/d3heatmap&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt; 函数&lt;code&gt;d3heatmap()&lt;/code&gt;用于创建交互式热图，有以下功能：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;将鼠标放在感兴趣热图单元格上以查看行列名称及相应值&lt;/li&gt;
&lt;li&gt;可选择区域进行缩放&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;library(d3heatmap)d3heatmap(df, colors = &amp;quot;RdBu&amp;quot;, k_row = 4, k_col = 2)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;k_row&lt;/code&gt;、&lt;code&gt;k_col&lt;/code&gt;分别指定用于对行列中树形图分支进行着色所需组数。进一步信息可&lt;code&gt;help(d3heatmap())&lt;/code&gt;获取。&lt;/p&gt;
&lt;h2 id=&#34;使用dendextend包增强热图&#34;&gt;使用&lt;code&gt;dendextend&lt;/code&gt;包增强热图&lt;/h2&gt;
&lt;p&gt;软件包&lt;code&gt;dendextend&lt;/code&gt;可以用于增强其他软件包的功能&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;library(dendextend)# order for rows
Rowv &amp;lt;- mtcars %&amp;gt;% scale %&amp;gt;% dist %&amp;gt;% 
hclust %&amp;gt;% as.dendrogram %&amp;gt;%
 set(&amp;quot;branches_k_color&amp;quot;, k = 3) %&amp;gt;% 
set(&amp;quot;branches_lwd&amp;quot;, 1.2) %&amp;gt;% ladderize# Order for columns# 
We must transpose the data
Colv &amp;lt;- mtcars %&amp;gt;% scale %&amp;gt;% t %&amp;gt;% dist %&amp;gt;% 
hclust %&amp;gt;% as.dendrogram %&amp;gt;%
 set(&amp;quot;branches_k_color&amp;quot;, k = 2, value = c(&amp;quot;orange&amp;quot;, &amp;quot;blue&amp;quot;)) %&amp;gt;% set(&amp;quot;branches_lwd&amp;quot;, 1.2) %&amp;gt;% ladderize
增强heatmap()函数
---
heatmap(df, Rowv = Rowv, Colv = Colv, scale = &amp;quot;none&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819141153.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#增强heatmap.2()函数
heatmap.2(df, scale = &amp;quot;none&amp;quot;, col = bluered(100), Rowv = Rowv, Colv = Colv, trace = &amp;quot;none&amp;quot;, density.info = &amp;quot;none&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://upload-images.jianshu.io/upload_images/2084719-e26e47cd2f8df3c1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#增强交互式绘图函数
d2heatmap()d3heatmap(scale(mtcars), colors = &amp;quot;RdBu&amp;quot;, Rowv = Rowv, Colv = Colv)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;绘制复杂热图&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;code&gt;ComplexHeatmap&lt;/code&gt;包是&lt;code&gt;bioconductor&lt;/code&gt;包，用于绘制复杂热图，它提供了一个灵活的解决方案来安排和注释多个热图。它还允许可视化来自不同来源的不同数据之间的关联热图。可通过以下代码安装：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language- &#34;&gt;if (!require(&amp;quot;devtools&amp;quot;)) install.packages(&amp;quot;devtools&amp;quot;) 
devtools::install_github(&amp;quot;jokergoo/ComplexHeatmap&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;ComplexHeatmap&lt;/code&gt;包的主要功能函数是&lt;code&gt;Heatmap()&lt;/code&gt;,格式为：&lt;code&gt;Heatmap(matrix, col, name)&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;matrix&lt;/code&gt;：矩阵&lt;/li&gt;
&lt;li&gt;&lt;code&gt;col&lt;/code&gt;：颜色向量（离散色彩映射）或颜色映射函数（如果矩阵是连续数）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;name&lt;/code&gt;：热图名称&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;library(ComplexHeatmap)
Heatmap(df, name = &amp;quot;mtcars&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819141219.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#自设置颜色
library(circlize)
Heatmap(df, name = &amp;quot;mtcars&amp;quot;, col = colorRamp2(c(-2, 0, 2), c(&amp;quot;green&amp;quot;, &amp;quot;white&amp;quot;, &amp;quot;red&amp;quot;)))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819141236.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;使用调色板&#34;&gt;使用调色板&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;Heatmap(df, name = &amp;quot;mtcars&amp;quot;,col = colorRamp2(c(-2, 0, 2), brewer.pal(n=3, name=&amp;quot;RdBu&amp;quot;)))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819141254.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#自定义颜色
mycol &amp;lt;- colorRamp2(c(-2, 0, 2), c(&amp;quot;blue&amp;quot;, &amp;quot;white&amp;quot;, &amp;quot;red&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;#热图及行列标题设置&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Heatmap(df, name = &amp;quot;mtcars&amp;quot;, col = mycol, column_title = &amp;quot;Column title&amp;quot;, row_title = 
&amp;quot;Row title&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819141310.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;注意，行标题的默认位置是“left”，列标题的默认是“top”。可以使用以下选项更改：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;row_title_side&lt;/code&gt;：允许的值为“左”或“右”（例如：row_title_side =“right”）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;column_title_side&lt;/code&gt;：允许的值为“top”或“bottom”（例如：column_title_side =“bottom”） 也可以使用以下选项修改字体和大小：&lt;/li&gt;
&lt;li&gt;&lt;code&gt;row_title_gp&lt;/code&gt;：用于绘制行文本的图形参数&lt;/li&gt;
&lt;li&gt;&lt;code&gt;column_title_gp&lt;/code&gt;：用于绘制列文本的图形参数&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;Heatmap(df, name = &amp;quot;mtcars&amp;quot;, col = mycol, column_title = &amp;quot;Column title&amp;quot;, 
column_title_gp = gpar(fontsize = 14, fontface = &amp;quot;bold&amp;quot;), 
row_title = &amp;quot;Row title&amp;quot;, row_title_gp = gpar(fontsize = 14, fontface = &amp;quot;bold&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819141327.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在上面的R代码中，&lt;code&gt;fontface&lt;/code&gt;的可能值可以是整数或字符串：1 = plain，2 = bold，3 =斜体，4 =粗体斜体。如果是字符串，则有效值为：“plain”，“bold”，“italic”，“oblique”和“bold.italic”。
显示行/列名称：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;show_row_names&lt;/code&gt;：是否显示行名称。默认值为&lt;code&gt;TRUE&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;show_column_names&lt;/code&gt;：是否显示列名称。默认值为&lt;code&gt;TRUE&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;Heatmap(df, name = &amp;quot;mtcars&amp;quot;, show_row_names = FALSE)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819141342.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;更改聚类外观&#34;&gt;更改聚类外观&lt;/h2&gt;
&lt;p&gt;默认情况下，行和列是包含在聚类里的。可以使用参数修改：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;cluster_rows = FALSE&lt;/code&gt;。如果为&lt;code&gt;TRUE&lt;/code&gt;，则在行上创建集群&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cluster_columns = FALSE&lt;/code&gt;。如果&lt;code&gt;为TRUE&lt;/code&gt;，则将列置于簇上&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;# Inactivate cluster on rows
Heatmap(df, name = &amp;quot;mtcars&amp;quot;, col = mycol, cluster_rows = FALSE)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819141403.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;如果要更改列集群的高度或宽度，可以使用选项&lt;code&gt;column_dend_height&lt;/code&gt;
和&lt;code&gt;row_dend_width&lt;/code&gt;：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Heatmap(df, name = &amp;quot;mtcars&amp;quot;, col = mycol, column_dend_height = unit(2, &amp;quot;cm&amp;quot;), 
row_dend_width = unit(2, &amp;quot;cm&amp;quot;) )
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819141419.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;我们还可以利用&lt;code&gt;color_branches()&lt;/code&gt;自定义树状图外观&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;library(dendextend)
row_dend = hclust(dist(df)) # row clustering
col_dend = hclust(dist(t(df))) # column clustering
Heatmap(df, name = &amp;quot;mtcars&amp;quot;, col = mycol, cluster_rows = 
color_branches(row_dend, k = 4), cluster_columns = color_branches(col_dend, k = 2))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819141433.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;不同的聚类距离计算方式&#34;&gt;不同的聚类距离计算方式&lt;/h2&gt;
&lt;p&gt;参数&lt;code&gt;clustering_distance_rows&lt;/code&gt;和&lt;code&gt;clustering_distance_columns&lt;/code&gt;
用于分别指定行和列聚类的度量标准，允许的值有“&lt;code&gt;euclidean&lt;/code&gt;”, “&lt;code&gt;maximum&lt;/code&gt;”, “&lt;code&gt;manhattan&lt;/code&gt;”, “&lt;code&gt;canberra&lt;/code&gt;”, “&lt;code&gt;binary&lt;/code&gt;”, “&lt;code&gt;minkowski&lt;/code&gt;”, “&lt;code&gt;pearson&lt;/code&gt;”, “&lt;code&gt;spearman&lt;/code&gt;”, “&lt;code&gt;kendall&lt;/code&gt;”。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Heatmap(df, name = &amp;quot;mtcars&amp;quot;, clustering_distance_rows = &amp;quot;pearson&amp;quot;, 
clustering_distance_columns = &amp;quot;pearson&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819141452.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#也可以自定义距离计算方式
Heatmap(df, name = &amp;quot;mtcars&amp;quot;, clustering_distance_rows = function(m) dist(m))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819141511.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Heatmap(df, name = &amp;quot;mtcars&amp;quot;, clustering_distance_rows = function(x, y) 1 - cor(x, y))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819141535.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;请注意，在上面的R代码中，通常为指定行聚类的度量的参数  &lt;code&gt;clustering_distance_rows&lt;/code&gt;显示示例。建议对参数&lt;code&gt;clustering_distance_columns&lt;/code&gt;（列聚类的度量标准）使用相同的度量标准。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;# Clustering metric function
robust_dist = function(x, y) { 
qx = quantile(x, c(0.1, 0.9)) qy = quantile(y, c(0.1, 0.9)) l = x &amp;gt; qx[1] &amp;amp; x &amp;lt; qx[2] &amp;amp; y 
&amp;gt; qy[1] &amp;amp; y &amp;lt; qy[2] x = x[l] y = y[l] sqrt(sum((x - y)^2))}
# Heatmap
Heatmap(df, name = &amp;quot;mtcars&amp;quot;, clustering_distance_rows = robust_dist, 
clustering_distance_columns = robust_dist, 
col = colorRamp2(c(-2, 0, 2), c(&amp;quot;purple&amp;quot;, &amp;quot;white&amp;quot;, &amp;quot;orange&amp;quot;)))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819141606.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;聚类方法&#34;&gt;聚类方法&lt;/h2&gt;
&lt;p&gt;参数&lt;code&gt;clustering_method_rows&lt;/code&gt;和&lt;code&gt;clustering_method_columns&lt;/code&gt;可用于指定进行层次聚类的方法。允许的值是&lt;code&gt;hclust()&lt;/code&gt;函数支持的值，包括“ward.D”，“ward.D2”，“single”，“complete”，“average”，…（见?hclust）。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Heatmap(df, name = &amp;quot;mtcars&amp;quot;, clustering_method_rows = &amp;quot;ward.D&amp;quot;, 
clustering_method_columns = &amp;quot;ward.D&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819141623.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;热图拆分&#34;&gt;热图拆分&lt;/h2&gt;
&lt;p&gt;有很多方法来拆分热图。一个解决方案是应用&lt;code&gt;k-means&lt;/code&gt;使用参数&lt;code&gt;km&lt;/code&gt;。
在执行&lt;code&gt;k-means&lt;/code&gt;时使用&lt;code&gt;set.seed()&lt;/code&gt;函数很重要，这样可以在稍后精确地再现结果&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;set.seed(1122)
# split into 2 groupsHeatmap(df, name = &amp;quot;mtcars&amp;quot;, col = mycol, k = 2)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819141638.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# split by a vector specifying row classes， 有点类似于ggplot2里的分面
Heatmap(df, name = &amp;quot;mtcars&amp;quot;, col = mycol, split = mtcars$cyl )
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819141655.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#split也可以是一个数据框，其中不同级别的组合拆分热图的行。
# Split by combining multiple variables
Heatmap(df, name =&amp;quot;mtcars&amp;quot;, col = mycol, split = data.frame(cyl = mtcars$cyl, am = mtcars$am))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819141711.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# Combine km and split
Heatmap(df, name =&amp;quot;mtcars&amp;quot;, col = mycol, km = 2, split = mtcars$cyl)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819141725.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#也可以自定义分割
library(&amp;quot;cluster&amp;quot;)
set.seed(1122)
pa = pam(df, k = 3)Heatmap(df, name = &amp;quot;mtcars&amp;quot;, col = mycol, split = paste0(&amp;quot;pam&amp;quot;, 
pa$clustering))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819141741.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;还可以将用户定义的树形图和分割相结合。在这种情况下，&lt;code&gt;split&lt;/code&gt;可以指定为单个数字：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;row_dend = hclust(dist(df)) # row clusterin
grow_dend = color_branches(row_dend, k = 4)
Heatmap(df, name = &amp;quot;mtcars&amp;quot;, col = mycol, cluster_rows = row_dend, split = 2)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819141800.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;热图注释&#34;&gt;热图注释&lt;/h2&gt;
&lt;p&gt;利用&lt;code&gt;HeatmapAnnotation()&lt;/code&gt;对行或列注释。格式为： &lt;code&gt;HeatmapAnnotation(df, name, col, show_legend)&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;df：带有列名的data.frame&lt;/li&gt;
&lt;li&gt;name：热图标注的名称&lt;/li&gt;
&lt;li&gt;col：映射到df中列的颜色列表&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;# Transposedf &amp;lt;- t(df)
# Heatmap of the transposed data
Heatmap(df, name =&amp;quot;mtcars&amp;quot;, col = mycol)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819141817.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# Annotation data frame
annot_df &amp;lt;- data.frame(cyl = mtcars$cyl, am = mtcars$am, mpg = mtcars$mpg)
# Define colors for each levels of qualitative variables
# Define gradient color for continuous variable (mpg)
col = list(cyl = c(&amp;quot;4&amp;quot; = &amp;quot;green&amp;quot;, &amp;quot;6&amp;quot; = &amp;quot;gray&amp;quot;, &amp;quot;8&amp;quot; = &amp;quot;darkred&amp;quot;), am = c(&amp;quot;0&amp;quot; = &amp;quot;yellow&amp;quot;, 
&amp;quot;1&amp;quot; = &amp;quot;orange&amp;quot;), mpg = colorRamp2(c(17, 25), c(&amp;quot;lightblue&amp;quot;, &amp;quot;purple&amp;quot;)) )
# Create the heatmap annotation
ha &amp;lt;- HeatmapAnnotation(annot_df, col = col)
# Combine the heatmap and the annotation
Heatmap(df, name = &amp;quot;mtcars&amp;quot;, col = mycol, top_annotation = ha)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819141835.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#可以使用参数show_legend = FALSE来隐藏注释图例
ha &amp;lt;- HeatmapAnnotation(annot_df, col = col, show_legend = FALSE)
Heatmap(df, name = &amp;quot;mtcars&amp;quot;, col = mycol, top_annotation = ha)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819141851.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#注释名称可以使用下面的R代码添加
library(&amp;quot;GetoptLong&amp;quot;)
# Combine Heatmap and annotation
ha &amp;lt;- HeatmapAnnotation(annot_df, col = col, show_legend = FALSE)
Heatmap(df, name = &amp;quot;mtcars&amp;quot;, col = mycol, top_annotation = ha)
# Add annotation names on the right
for(an in colnames(annot_df)) { 
seekViewport(qq(&amp;quot;annotation_@{an}&amp;quot;)) 
grid.text(an, unit(1, &amp;quot;npc&amp;quot;) + unit(2, &amp;quot;mm&amp;quot;), 0.5, default.units = &amp;quot;npc&amp;quot;, just = &amp;quot;left&amp;quot;)}
#要在左侧添加注释名称，请使用以下代码
# Annotation names on the left
for(an in colnames(annot_df)) { seekViewport(qq(&amp;quot;annotation_@{an}&amp;quot;)) grid.text(an, 
unit(1, &amp;quot;npc&amp;quot;) - unit(2, &amp;quot;mm&amp;quot;), 0.5, default.units = &amp;quot;npc&amp;quot;, just = &amp;quot;left&amp;quot;)}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819141909.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;复杂注释&#34;&gt;复杂注释&lt;/h2&gt;
&lt;p&gt;将热图与一些基本图形结合起来进行注释，利用&lt;code&gt;anno_point()&lt;/code&gt;,&lt;code&gt;anno_barplot()&lt;/code&gt;
,&lt;code&gt;anno_boxplot()&lt;/code&gt;,&lt;code&gt;anno_density()&lt;/code&gt;和&lt;code&gt;anno_histogram()&lt;/code&gt;。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# Define some graphics to display the distribution of columns
.hist = anno_histogram(df, gp = gpar(fill = &amp;quot;lightblue&amp;quot;))
.density = anno_density(df, type = &amp;quot;line&amp;quot;, gp = gpar(col = &amp;quot;blue&amp;quot;))
ha_mix_top = HeatmapAnnotation(hist = .hist, density = .density)
# Define some graphics to display the distribution of rows
.violin = anno_density(df, type = &amp;quot;violin&amp;quot;, gp = gpar(fill = &amp;quot;lightblue&amp;quot;), which = &amp;quot;row&amp;quot;)
.boxplot = anno_boxplot(df, which = &amp;quot;row&amp;quot;)
ha_mix_right = HeatmapAnnotation(violin = .violin, bxplt = .boxplot, which = &amp;quot;row&amp;quot;, 
width = unit(4, &amp;quot;cm&amp;quot;))
# Combine annotation with heatmap
Heatmap(df, name = &amp;quot;mtcars&amp;quot;, col = mycol, column_names_gp = gpar(fontsize = 8), 
top_annotation = ha_mix_top, top_annotation_height = unit(4, &amp;quot;cm&amp;quot;)) + ha_mix_right
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819141927.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;热图组合&#34;&gt;热图组合&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;# Heatmap 1
ht1 = Heatmap(df, name = &amp;quot;ht1&amp;quot;, col = mycol, km = 2, column_names_gp = gpar(fontsize = 9))
# Heatmap 2
ht2 = Heatmap(df, name = &amp;quot;ht2&amp;quot;, col = colorRamp2(c(-2, 0, 2), c(&amp;quot;green&amp;quot;, &amp;quot;white&amp;quot;, &amp;quot;red&amp;quot;)), column_names_gp = gpar(fontsize = 9))
# Combine the two heatmaps
ht1 + ht2
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819141943.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;可以使用选项width = unit（3，“cm”））来控制热图大小。注意，当组合多个热图时，第一个热图被视为主热图。剩余热图的一些设置根据主热图的设置自动调整。这些设置包括：删除行集群和标题，以及添加拆分等。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;draw(ht1 + ht2, 
      # Titles 
     row_title = &amp;quot;Two heatmaps, row title&amp;quot;,
     row_title_gp = gpar(col = &amp;quot;red&amp;quot;), 
     column_title = &amp;quot;Two heatmaps, column title&amp;quot;, 
     column_title_side = &amp;quot;bottom&amp;quot;, 
      # Gap between heatmaps 
     gap = unit(0.5, &amp;quot;cm&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819141958.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;可以使用参数&lt;code&gt;show_heatmap_legend = FALSE&lt;/code&gt;，&lt;code&gt;show_annotation_legend = FALSE&lt;/code&gt;删除图例。&lt;/p&gt;
&lt;h2 id=&#34;基因表达矩阵&#34;&gt;基因表达矩阵&lt;/h2&gt;
&lt;p&gt;在基因表达数据中，行代表基因，列是样品值。关于基因的更多信息可以在表达热图之后附加，例如基因长度和基因类型。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;expr = readRDS(paste0(system.file(package = &amp;quot;ComplexHeatmap&amp;quot;), &amp;quot;/extdata/gene_expression.rds&amp;quot;))
mat = as.matrix(expr[, grep(&amp;quot;cell&amp;quot;, colnames(expr))])
type = gsub(&amp;quot;s\\d+_&amp;quot;, &amp;quot;&amp;quot;, colnames(mat))
ha = HeatmapAnnotation(df = data.frame(type = type))
Heatmap(mat, name = &amp;quot;expression&amp;quot;, km = 5, top_annotation = ha, top_annotation_height = unit(4, &amp;quot;mm&amp;quot;), 
show_row_names = FALSE, show_column_names = FALSE) +
Heatmap(expr$length, name = &amp;quot;length&amp;quot;, width = unit(5, &amp;quot;mm&amp;quot;), col = colorRamp2(c(0, 100000), c(&amp;quot;white&amp;quot;, &amp;quot;orange&amp;quot;))) +
Heatmap(expr$type, name = &amp;quot;type&amp;quot;, width = unit(5, &amp;quot;mm&amp;quot;)) +
Heatmap(expr$chr, name = &amp;quot;chr&amp;quot;, width = unit(5, &amp;quot;mm&amp;quot;), col = rand_color(length(unique(expr$chr))))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://upload-images.jianshu.io/upload_images/2084719-076503522b98e6a5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&#34; alt=&#34;&#34;&gt;
也可以可视化基因组变化和整合不同的分子水平（基因表达，DNA甲基化，…）&lt;/p&gt;
&lt;h2 id=&#34;可视化矩阵中列的分布&#34;&gt;可视化矩阵中列的分布&lt;/h2&gt;
&lt;p&gt;使用函数&lt;code&gt;densityHeatmap()&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;densityHeatmap(df)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819142019.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;infos&#34;&gt;Infos&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;sessionInfo()
## R version 3.3.3 (2017-03-06)
## Platform: x86_64-w64-mingw32/x64 (64-bit)
## Running under: Windows 8.1 x64 (build 9600)## 
## locale:
## [1] LC_COLLATE=Chinese (Simplified)_China.936 
## [2] LC_CTYPE=Chinese (Simplified)_China.936 
## [3] LC_MONETARY=Chinese (Simplified)_China.936
## [4] LC_NUMERIC=C 
## [5] LC_TIME=Chinese (Simplified)_China.936 ##
 ## attached base packages:
## [1] grid stats graphics grDevices utils datasets methods 
## [8] base 
## 
## other attached packages:
## [1] GetoptLong_0.1.6 cluster_2.0.5 circlize_0.3.10 
## [4] ComplexHeatmap_1.12.0 dendextend_1.4.0 d3heatmap_0.6.1.1
##[7] gplots_3.0.1 RColorBrewer_1.1-2 
## 
## loaded via a namespace (and not attached):
## [1] Rcpp_0.12.9 DEoptimR_1.0-8 plyr_1.8.4 
## [4] viridis_0.3.4 class_7.3-14 prabclus_2.2-6 
## [7] bitops_1.0-6 base64enc_0.1-3 tools_3.3.3 
## [10] digest_0.6.12 mclust_5.2.2 jsonlite_1.3 
## [13] evaluate_0.10 tibble_1.2 gtable_0.2.0 
## [16] lattice_0.20-34 png_0.1-7 yaml_2.1.14 
## [19] mvtnorm_1.0-6 gridExtra_2.2.1 trimcluster_0.1-2 
## [22] stringr_1.2.0 knitr_1.15.1 GlobalOptions_0.0.11
## [25] htmlwidgets_0.8 gtools_3.5.0 caTools_1.17.1 
## [28] fpc_2.1-10 diptest_0.75-7 nnet_7.3-12 
## [31] stats4_3.3.3 rprojroot_1.2 robustbase_0.92-7 
## [34] flexmix_2.3-13 rmarkdown_1.3.9002 gdata_2.17.0 
## [37] kernlab_0.9-25 ggplot2_2.2.1 magrittr_1.5 
## [40] whisker_0.3-2 backports_1.0.5 scales_0.4.1 
## [43] htmltools_0.3.5 modeltools_0.2-21 MASS_7.3-45
## [46] assertthat_0.1 shape_1.4.2 colorspace_1.3-2 
## [49] KernSmooth_2.23-15 stringi_1.1.2 lazyeval_0.2.0 
## [52] munsell_0.4.3 rjson_0.2.15
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>ggplot2学习笔记系列之利用ggplot2绘制散点图</title>
      <link>https://taoyan.netlify.app/post/2017-06-11.ggplot2%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E7%B3%BB%E5%88%97%E4%B9%8B%E5%88%A9%E7%94%A8ggplot2%E7%BB%98%E5%88%B6%E6%95%A3%E7%82%B9%E5%9B%BE/</link>
      <pubDate>Wed, 12 Jul 2017 07:47:05 +0000</pubDate>
      <guid>https://taoyan.netlify.app/post/2017-06-11.ggplot2%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E7%B3%BB%E5%88%97%E4%B9%8B%E5%88%A9%E7%94%A8ggplot2%E7%BB%98%E5%88%B6%E6%95%A3%E7%82%B9%E5%9B%BE/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819153139.png&#34; alt=&#34;&#34;&gt;
1 简介
散点图通常用来刻画两个连续型变量之间的关系。绘制散点图时数据集中的每一个观测值都由散点图中的一个点来表示。利用包&lt;strong&gt;ggplot2&lt;/strong&gt;可以绘制十分漂亮的散点图。 利用&lt;strong&gt;ggplot2&lt;/strong&gt;绘图前先确保我们所使用的数据集是&lt;strong&gt;data.frame&lt;/strong&gt;形式。&lt;strong&gt;ggplot2&lt;/strong&gt;绘图利用映射将数据赋予给坐标轴上进而添加几何对象形成图形。绘图前先加载包&lt;strong&gt;ggplot2&lt;/strong&gt; 即&lt;strong&gt;library(ggplot2)&lt;/strong&gt;。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#Load packages
library(ggplot2)#visualization
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;加载完包之后，本文利用数据集&lt;strong&gt;mtcars&lt;/strong&gt;来演示散点图绘制。 先查看数据集的前几行来了解&lt;strong&gt;mtcars&lt;/strong&gt;数据集。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#check data
head(mtcars)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;2 绘制简单的散点图&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ggplot(data=mtcars, aes(x=wt, y=mpg)) + geom_point()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819153152.png&#34; alt=&#34;&#34;&gt;
2.1 &lt;strong&gt;shape&lt;/strong&gt;参数修改图形的形状
&lt;strong&gt;可选点图形形状&lt;/strong&gt;: 
&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819153204.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ggplot(data=mtcars, aes(x=wt, y=mpg)) +geom_point(shape=17)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;2.2 &lt;strong&gt;size&lt;/strong&gt;参数修改点的大小&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ggplot(data = mtcars, aes(x=wt, y=mpg))+geom_point(size=5)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819153215.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;2.3 &lt;strong&gt;color&lt;/strong&gt;参数修改点的颜色&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ggplot(data=mtcars, aes(x=wt, y=mpg))+geom_point(color=&amp;quot;red&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819153227.png&#34; alt=&#34;&#34;&gt;
3 绘制分组的散点图
可将分组变量（因子或字符变量，可通过**factor()**强制性将非因子变量转为因子变量）赋值给颜色或性状属性，实现分组散点图的绘制。
3.1 首先将数值型变量&lt;code&gt;cyl&lt;/code&gt;转换为因子型变量&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mtcars$cyl &amp;lt;- factor(mtcars$cyl)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;3.2 分组变量赋值给颜色属性(变量赋值必须在aes里面)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ggplot(data=mtcars, aes(x=wt, y=mpg, color=cyl))+geom_point(size=3)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819153238.png&#34; alt=&#34;&#34;&gt;
3.3 分组变量赋值给性状属性&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ggplot(data=mtcars, aes(x=wt, y=mpg, shape=cyl))+geom_point(size=3)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819153249.png&#34; alt=&#34;&#34;&gt;
如果对R语言默认的颜色或者形状不满意，可以通过&lt;code&gt;scale_color_brewer()&lt;/code&gt;或者&lt;code&gt;scale_color_manual()&lt;/code&gt;函数自定义点的颜色以及&lt;code&gt;scale_shape_manual()&lt;/code&gt;函数自定义点的形状。 下面我们将分组变量&lt;strong&gt;cyl&lt;/strong&gt;同时赋值给颜色和形状属性。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ggplot(data=mtcars, aes(x=wt, y=mpg, color=cyl, shape= cyl))+
geom_point(size=3)+ scale_color_brewer(palette = &amp;quot;Accent&amp;quot;)+
scale_shape_manual(values = c(2, 9, 16))#Accent是一调色板，可选点的形状见上
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819153300.png&#34; alt=&#34;&#34;&gt;
4 将连续变量映射给颜色、大小和形状等属性
4.1 将连续性变量disp映射给颜色属性&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ggplot(data=mtcars, aes(x=wt, y=mpg, color=disp))+geom_point(size=3)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;从图中可以发现值越大对应的颜色越浅，以下是通过人为设置色阶使值大小与颜色深浅保持一致&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ggplot(data=mtcars, aes(x=wt, y=mpg, color=disp))+
geom_point(size=3)+ scale_color_gradient(low=&amp;quot;lightblue&amp;quot;, high=&amp;quot;darkblue&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819153314.png&#34; alt=&#34;&#34;&gt;
4.2 将连续性变量disp映射给大小属性&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ggplot(data=mtcars, aes(x=wt, y=mpg, size=disp))+geom_point(color=&amp;quot;red&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819153324.png&#34; alt=&#34;&#34;&gt;
5 重叠点的处理
当数据量非常大时，会导致数据重叠点非常严重，可通过使用半透明的点避免。&lt;strong&gt;alpha&lt;/strong&gt;参数控制点的透明度。下面利用数据集&lt;strong&gt;diamonds&lt;/strong&gt;来演示。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#check data
head(diamonds)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;#未使用透明点处理
ggplot(data=diamonds, aes(x=carat, y=price))+geom_point()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819153336.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#使用alpha参数调整点透明度
ggplot(data=diamonds, aes(x=carat, y=price))+geom_point(alpha=0.1)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819153347.png&#34; alt=&#34;&#34;&gt;
6 为散点图添加拟合曲线&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#使用数据集mtcars
ggplot(data=mtcars, aes(x=wt, y=mpg))+geom_point()+stat_smooth(method=&amp;quot;lm&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819153359.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#也可以去除掉拟合曲线的置信区间
ggplot(data=mtcars, aes(x=wt, y=mpg))+geom_point()+stat_smooth(method=&amp;quot;lm&amp;quot;, se=FALSE)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819153412.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#也可以针对不同类型的cyl来进行拟合
ggplot(data=mtcars, aes(x=wt, y=mpg, color=cyl))+
geom_point()+stat_smooth(method=&amp;quot;lm&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819153423.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>ggplot2学习笔记系列之主题（theme）设置</title>
      <link>https://taoyan.netlify.app/post/2017-06-25.ggplot2%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E7%B3%BB%E5%88%97%E4%B9%8B%E4%B8%BB%E9%A2%98theme%E8%AE%BE%E7%BD%AE/</link>
      <pubDate>Sun, 25 Jun 2017 12:34:08 -0500</pubDate>
      <guid>https://taoyan.netlify.app/post/2017-06-25.ggplot2%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E7%B3%BB%E5%88%97%E4%B9%8B%E4%B8%BB%E9%A2%98theme%E8%AE%BE%E7%BD%AE/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819153552.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;上次提了下&lt;code&gt;theme()&lt;/code&gt;,本文将专门讲解一下。凡是与数据无关的图形设置可以归为主题类，&lt;strong&gt;ggplot2&lt;/strong&gt;中主题设置十分多，根本不可能讲解完，只能稍微讲点皮毛，灵活运用才是关键，本文只是总体上略作介绍。正如R语言大神&lt;strong&gt;Hadley Wickham&lt;/strong&gt;所讲的，&lt;strong&gt;ggplot2&lt;/strong&gt;只是提供了一个平台，可以根据自己的需要无限创造。理论上来讲，只要能想到的图形，&lt;strong&gt;ggplot2&lt;/strong&gt;都能实现。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;library(ggplot2)
#我们先来看看ggplot2默认的主题设置函数theme_gray()的源代码
theme_gray#函数名不加括号可获得函数源代码

## function (base_size = 11, base_family = &amp;quot;&amp;quot;) 
## {
## half_line &amp;lt;- base_size/2
## theme(line = element_line(colour = &amp;quot;black&amp;quot;, size = 0.5, linetype = 1, 
## lineend = &amp;quot;butt&amp;quot;), rect = element_rect(fill = &amp;quot;white&amp;quot;, 
## colour = &amp;quot;black&amp;quot;, size = 0.5, linetype = 1), text = element_text(family = base_family, 
## face = &amp;quot;plain&amp;quot;, colour = &amp;quot;black&amp;quot;, size = base_size, lineheight = 0.9, 
## hjust = 0.5, vjust = 0.5, angle = 0, margin = margin(), 
## debug = FALSE), axis.line = element_blank(), axis.line.x = NULL, 
## axis.line.y = NULL, axis.text = element_text(size = rel(0.8),
## colour = &amp;quot;grey30&amp;quot;), axis.text.x = element_text(margin = margin(t = 0.8 * 
## half_line/2), vjust = 1), axis.text.x.top = element_text(margin = margin(b = 0.8 * ## half_line/2), vjust = 0), axis.text.y = element_text(margin = margin(r = 0.8 * 
## half_line/2), hjust = 1), axis.text.y.right = element_text(margin = margin(l = 0.8 * ## half_line/2), hjust = 0), axis.ticks = element_line(colour = &amp;quot;grey20&amp;quot;), 
## axis.ticks.length = unit(half_line/2, &amp;quot;pt&amp;quot;), axis.title.x = element_text(margin = margin(t = half_line), 
## vjust = 1), axis.title.x.top = element_text(margin = margin(b = half_line), 
## vjust = 0), axis.title.y = element_text(angle = 90, 
## margin = margin(r = half_line), vjust = 1), axis.title.y.right = element_text(angle = -90, 
## margin = margin(l = half_line), vjust = 0), legend.background = element_rect(colour = NA), 
## legend.spacing = unit(0.4, &amp;quot;cm&amp;quot;), legend.spacing.x = NULL, 
## legend.spacing.y = NULL, legend.margin = margin(0.2, 
## 0.2, 0.2, 0.2, &amp;quot;cm&amp;quot;), legend.key = element_rect(fill = &amp;quot;grey95&amp;quot;, 
## colour = &amp;quot;white&amp;quot;), legend.key.size = unit(1.2, &amp;quot;lines&amp;quot;), 
## legend.key.height = NULL, legend.key.width = NULL, legend.text = element_text(size = rel(0.8)), 
## legend.text.align = NULL, legend.title = element_text(hjust = 0), 
## legend.title.align = NULL, legend.position = &amp;quot;right&amp;quot;, 
## legend.direction = NULL, legend.justification = &amp;quot;center&amp;quot;, 
## legend.box = NULL, legend.box.margin = margin(0, 0, 0, 
## 0, &amp;quot;cm&amp;quot;), legend.box.background = element_blank(),
## legend.box.spacing = unit(0.4, &amp;quot;cm&amp;quot;), panel.background = element_rect(fill = &amp;quot;grey92&amp;quot;, 
## colour = NA), panel.border = element_blank(), panel.grid.major = element_line(colour = &amp;quot;white&amp;quot;), 
## panel.grid.minor = element_line(colour = &amp;quot;white&amp;quot;, size = 0.25), 
## panel.spacing = unit(half_line, &amp;quot;pt&amp;quot;), panel.spacing.x = NULL, 
## panel.spacing.y = NULL, panel.ontop = FALSE, strip.background = element_rect(fill = &amp;quot;grey85&amp;quot;, 
## colour = NA), strip.text = element_text(colour = &amp;quot;grey10&amp;quot;, 
## size = rel(0.8)), strip.text.x = element_text(margin = margin(t = half_line, 
## b = half_line)), strip.text.y = element_text(angle = -90, 
## margin = margin(l = half_line, r = half_line)), strip.placement = &amp;quot;inside&amp;quot;, 
## strip.placement.x = NULL, strip.placement.y = NULL, strip.switch.pad.grid = unit(0.1, 
## &amp;quot;cm&amp;quot;), strip.switch.pad.wrap = unit(0.1, &amp;quot;cm&amp;quot;), plot.background = element_rect(colour = &amp;quot;white&amp;quot;), 
## plot.title = element_text(size = rel(1.2), hjust = 0, 
## vjust = 1, margin = margin(b = half_line * 1.2)), 
## plot.subtitle = element_text(size = rel(0.9), hjust = 0, 
## vjust = 1, margin = margin(b = half_line * 0.9)),
## plot.caption = element_text(size = rel(0.9), hjust = 1, 
## vjust = 1, margin = margin(t = half_line * 0.9)),
## plot.margin = margin(half_line, half_line, half_line, 
## half_line), complete = TRUE)
## }
## &amp;lt;environment: namespace:ggplot2&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;可以看出，源代码主要是&lt;code&gt;theme()&lt;/code&gt;函数，设置也很简单：&lt;code&gt;theme(..., complete = FALSE)&lt;/code&gt;,但是其内含的参数则十分多。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819153612.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819153623.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;几乎所有元素在&lt;code&gt;theme()&lt;/code&gt;里都使用&lt;code&gt;element_line&lt;/code&gt;，&lt;code&gt;element_rect&lt;/code&gt;，&lt;code&gt;element_text&lt;/code&gt;和&lt;code&gt;element_blank&lt;/code&gt;函数设置. 下面就举例稍微讲解一下&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#利用数据集mtcars演示head(mtcars)
#先创建p图层
p&amp;lt;- ggplot(data=mtcars, aes(x=wt, y=mpg))+
geom_point(aes(color=factor(cyl)))#先试试图例修改
p+theme(legend.position = &amp;quot;none&amp;quot;)#无图例
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819153635.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;p+theme(legend.position = &amp;quot;bottom&amp;quot;)#图例在底部
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819153645.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#也可以自定义
p+theme(legend.position = c(0.5, 0.7))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819153658.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#为图例加边界
p+theme(legend.background = element_rect(color=&amp;quot;red&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819153709.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#或者为图例中的每个元素进行设置，如加边界
p+theme(legend.key =element_rect(color=&amp;quot;red&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819153718.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#进行填充
p+theme(legend.key = element_rect(fill=&amp;quot;yellow&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819153728.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#图例内容字体大小、颜色、角度等设置
p+theme(legend.text = element_text(size=25, color=&amp;quot;darkred&amp;quot;, angle=45))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819153739.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#为图例标题设置字体、颜色、大小等
p+theme(legend.title = element_text(face=&amp;quot;italic&amp;quot;, size=25, color=&amp;quot;red&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819153749.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;接下来是坐标以及网格等的自定义&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#修改背景颜色
p+theme(panel.background = element_rect(fill=&amp;quot;black&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819153800.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#修改边界线类型、颜色
p+theme(panel.border = element_rect(linetype = &amp;quot;dashed&amp;quot;, color=&amp;quot;red&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819153812.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#修改网格线p+theme(panel.grid.major = element_line(color=&amp;quot;blue&amp;quot;, size= 3))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819153821.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;p+theme(panel.grid.minor = element_line(linetype = &amp;quot;dotted&amp;quot;, color=&amp;quot;red&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819153832.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;还可以修改x、y轴等，这里懒得讲了，有兴趣的可以自己捣鼓捣鼓&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;了解&lt;code&gt;theme&lt;/code&gt;之后就可以自己定义自己的主题，以后作图就直接像格式刷一样就行&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#下面是我比较常用的主题，画图时刷一下就行了
windowsFonts(CA=windowsFont(&amp;quot;Calibri&amp;quot;))
mytheme &amp;lt;- theme_bw()+
theme(legend.position = &#39;top&#39;, panel.border = element_blank(), 
panel.grid.major = element_line(linetype = &#39;dashed&#39;), panel.grid.minor = 
element_blank(), legend.text = element_text(size=9,color=&#39;#003087&#39;,family = &amp;quot;CA&amp;quot;), 
plot.title = element_text(size=15,color=&amp;quot;#003087&amp;quot;,family = &amp;quot;CA&amp;quot;), legend.key = 
element_blank(), axis.text = element_text(size=10,color=&#39;#003087&#39;,family = &amp;quot;CA&amp;quot;), 
strip.text = element_text(size=12,color=&amp;quot;#EF0808&amp;quot;,family = &amp;quot;CA&amp;quot;), 
strip.background = element_blank())
pie_theme &amp;lt;- mytheme+
theme(axis.text = element_blank(), axis.ticks = element_blank(), axis.title = 
element_blank(), panel.grid.major = element_blank())
myline_blue &amp;lt;- geom_line(color=&amp;quot;#085A9C&amp;quot;, size=2)
myline_red &amp;lt;- geom_line(color=&amp;quot;#EF0808&amp;quot;,size=2)
myarea &amp;lt;- geom_area(color=NA,fill=&amp;quot;#003087&amp;quot;,alpha=0.2)
mypoint &amp;lt;- geom_point(size=3,shape=21,color=&amp;quot;#003087&amp;quot;,fill=&amp;quot;white&amp;quot;)
mybar &amp;lt;- geom_bar(fill=&amp;quot;#0C8DC4&amp;quot;,stat = &amp;quot;identity&amp;quot;)
mycolor_3 &amp;lt;- scale_fill_manual(values = c(&amp;quot;#085A9C&amp;quot;,&amp;quot;#EF0808&amp;quot;,&amp;quot;#526373&amp;quot;))
mycolor_7 &amp;lt;- scale_fill_manual(values=c (&amp;quot;#085A9C&amp;quot;,&amp;quot;#EF0808&amp;quot;,&amp;quot;#526373&amp;quot;,&amp;quot;#FFFFE7&amp;quot;,&amp;quot;#FF9418&amp;quot;,&amp;quot;#219431&amp;quot;,&amp;quot;#9C52AD&amp;quot;))
mycolor_line_7 &amp;lt;- scale_color_manual(values=c (&amp;quot;#085A9C&amp;quot;,&amp;quot;#EF0808&amp;quot;,&amp;quot;#526373&amp;quot;,&amp;quot;#FFFFE7&amp;quot;,&amp;quot;#FF9418&amp;quot;,&amp;quot;#219431&amp;quot;,&amp;quot;#9C52AD&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;#可以来刷一刷#随便建个数据集
x &amp;lt;-rep(1:5, each = 3)
y &amp;lt;-rep(c(&#39;A&#39;,&#39;B&#39;,&#39;C&#39;),times = 5)
set.seed(1111)
z &amp;lt;-round(runif(min = 10, max = 30, n = 15))
df &amp;lt;-data.frame(x = x, y = y, z = z)
head(df)
##   x   y   z
## 1 1   A   19
## 2 1   B   18
## 3 1   C   28
## 4 2   A   13
## 5 2   B   25
## 6 2   C   30

#柱形图
(p1 &amp;lt;- ggplot(data=df, aes(x=factor(x), y=z, fill=y))+
geom_bar(stat = &amp;quot;identity&amp;quot;, position = &amp;quot;dodge&amp;quot;)+
ggtitle(&amp;quot;自定义主题theme并应用实践&amp;quot;))+
xlab(&amp;quot;随便定义了个x&amp;quot;)+ylab(&amp;quot;随机数&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819153846.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;p1+mytheme
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819153857.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;p1+mytheme+mycolor_7
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819153908.png&#34; alt=&#34;&#34;&gt;
还有线图、饼图等有兴趣的也可以自己刷一刷，你会发现&lt;strong&gt;ggplot2&lt;/strong&gt;的魅力所在就是它拥有无穷的可能性。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>ggplot2学习笔记系列之利用ggplot2绘制误差棒及显著性标记</title>
      <link>https://taoyan.netlify.app/post/2017-06-25.ggplot2%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E7%B3%BB%E5%88%97%E4%B9%8B%E5%88%A9%E7%94%A8ggplot2%E7%BB%98%E5%88%B6%E8%AF%AF%E5%B7%AE%E6%A3%92%E5%8F%8A%E6%98%BE%E8%91%97%E6%80%A7%E6%A0%87%E8%AE%B0/</link>
      <pubDate>Sun, 25 Jun 2017 12:34:08 -0500</pubDate>
      <guid>https://taoyan.netlify.app/post/2017-06-25.ggplot2%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E7%B3%BB%E5%88%97%E4%B9%8B%E5%88%A9%E7%94%A8ggplot2%E7%BB%98%E5%88%B6%E8%AF%AF%E5%B7%AE%E6%A3%92%E5%8F%8A%E6%98%BE%E8%91%97%E6%80%A7%E6%A0%87%E8%AE%B0/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819145522.png&#34; alt=&#34;&#34;&gt;
绘制带有误差棒的条形图&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;library(ggplot2)
#创建数据集
df &amp;lt;- data.frame(treatment = factor(c(1, 1, 1, 2, 2, 2, 3, 3, 3)), 
                 response = c(2, 5, 4, 6, 9, 7, 3, 5, 8), 
                 group = factor(c(1, 2, 3, 1, 2, 3, 1, 2, 3)), 
                 se = c(0.4, 0.2, 0.4, 0.5, 0.3, 0.2, 0.4, 0.6, 0.7))
head(df) #查看数据集

##   treatment response group  se
## 1    1         2       1    0.4
## 2    1         5       2    0.2
## 3    1         4       3    0.4
## 4    2         6       1    0.5
## 5    2         9       2    0.3
## 6    2         7       3    0.2
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;# 使用geom_errorbar()绘制带有误差棒的条形图
# 这里一定要注意position要与`geom_bar()`保持一致，由于系统默认dodge是0.9，
# 因此geom_errorbar()里面position需要设置0.9，width设置误差棒的大小
ggplot(data = df, aes(x = treatment, y = response, fill = group)) + 
geom_bar(stat = &amp;quot;identity&amp;quot;, position = &amp;quot;dodge&amp;quot;) + 
geom_errorbar(aes(ymax = response + se, ymin = response -  se), 
position = position_dodge(0.9), width = 0.15) + 
scale_fill_brewer(palette = &amp;quot;Set1&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819145536.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;绘制带有显著性标记的条形图&#34;&gt;绘制带有显著性标记的条形图&lt;/h2&gt;
&lt;hr&gt;
&lt;pre&gt;&lt;code&gt;label &amp;lt;- c(&amp;quot;&amp;quot;, &amp;quot;*&amp;quot;, &amp;quot;**&amp;quot;, &amp;quot;&amp;quot;, &amp;quot;**&amp;quot;, &amp;quot;*&amp;quot;, &amp;quot;&amp;quot;, &amp;quot;&amp;quot;, &amp;quot;*&amp;quot;) #这里随便设置的显著性，还有abcdef等显著性标记符号，原理一样，这里不再重复。
# 添加显著性标记跟上次讲的添加数据标签是一样的，这里我们假设1是对照
ggplot(data = df, aes(x = treatment, y = response, fill = group)) + 
geom_bar(stat = &amp;quot;identity&amp;quot;, position = &amp;quot;dodge&amp;quot;) + 
geom_errorbar(aes(ymax = response + se, ymin = response -  se), 
position = position_dodge(0.9), width = 0.15) + 
geom_text(aes(y = response +  1.5 * se, label = label, group = group), 
position = position_dodge(0.9), size = 5, fontface = &amp;quot;bold&amp;quot;) + 
scale_fill_brewer(palette = &amp;quot;Set1&amp;quot;) #这里的label就是刚才设置的，group是数据集中的，fontface设置字体。
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819145549.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;绘制两条形图中间带有星号的统计图&#34;&gt;绘制两条形图中间带有星号的统计图&lt;/h2&gt;
&lt;hr&gt;
&lt;pre&gt;&lt;code&gt;#创建一个简单的数据集
Control &amp;lt;- c(2.0,2.5,2.2,2.4,2.1)
Treatment &amp;lt;- c(3.0,3.3,3.1,3.2,3.2)
mean &amp;lt;- c(mean(Control), mean(Treatment))
sd &amp;lt;- c(sd(Control), sd(Treatment))
df1 &amp;lt;- data.frame(V=c(&amp;quot;Control&amp;quot;, &amp;quot;Treatment&amp;quot;), mean=mean, sd=sd)
df1$V &amp;lt;- factor(df1$V, levels=c(&amp;quot;Control&amp;quot;, &amp;quot;Treatment&amp;quot;))
#利用geom_segment()绘制图形
ggplot(data=df1, aes(x=V, y=mean, fill=V))+ 
geom_bar(stat = &amp;quot;identity&amp;quot;,position = position_dodge(0.9),color=&amp;quot;black&amp;quot;)+ 
geom_errorbar(aes(ymax=mean+sd, ymin=mean-sd), width=0.05)+ 
geom_segment(aes(x=1, y=2.5, xend=1, yend=3.8))+#绘制control端的竖线 
geom_segment(aes(x=2, y=3.3, xend=2, yend=3.8))+#绘制treatment端竖线 
geom_segment(aes(x=1, y=3.8, xend=1.45, yend=3.8))+ 
geom_segment(aes(x=1.55, y=3.8, xend=2, yend=3.8))+#绘制两段横线 
annotate(&amp;quot;text&amp;quot;, x=1.5, y=3.8, label=&amp;quot;〇&amp;quot;, size=5)#annotate函数也可以添加标签
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819145604.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;为图形添加标题&#34;&gt;为图形添加标题&lt;/h2&gt;
&lt;hr&gt;
&lt;p&gt;图形标题有图标题、坐标轴标题、图例标题等&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;p &amp;lt;- ggplot(data = df, aes(x = treatment, y = response, fill = group)) + 
geom_bar(stat = &amp;quot;identity&amp;quot;, position = &amp;quot;dodge&amp;quot;) +
geom_errorbar(aes(ymax = response + se, ymin = response -  se),
position = position_dodge(0.9), width = 0.15) + 
scale_fill_brewer(palette = &amp;quot;Set1&amp;quot;)# 利用ggtitle()添加图标题,还有labs（）也可以添加标题，最后会提一下。（有一个问题就是ggtitle()添加的标题总是左对齐）
p + ggtitle(&amp;quot;利用ggtitle()添加图标题&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819145618.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# 利用xlab()\ylab()添加/修改坐标轴标题
p + ggtitle(&amp;quot;利用ggtitle()添加图标题&amp;quot;) + 
xlab(&amp;quot;不同处理&amp;quot;) + 
ylab(&amp;quot;response&amp;quot;) #标题的参数修改在theme里，theme是一个很大的函数，几乎可以定义一切，下次有时间会讲解
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819145632.png&#34; alt=&#34;&#34;&gt;
最后再讲解一下如何将多副图至于一个页面 利用包&lt;strong&gt;gridExtra&lt;/strong&gt;中&lt;code&gt;grid.arrange()&lt;/code&gt;函数实现&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# 将四幅图放置于一个页面中
p &amp;lt;- ggplot(data = df, aes(x = treatment, y = response, fill = group)) + 
geom_bar(stat = &amp;quot;identity&amp;quot;, position = &amp;quot;dodge&amp;quot;) + 
geom_errorbar(aes(ymax = response + se, ymin = response -  se), 
position = position_dodge(0.9), width = 0.15) + 
scale_fill_brewer(palette = &amp;quot;Set1&amp;quot;)
p1 &amp;lt;- p + ggtitle(&amp;quot;利用ggtitle()添加图标题&amp;quot;)
p2 &amp;lt;- p + ggtitle(&amp;quot;利用ggtitle()添加图标题&amp;quot;) + xlab(&amp;quot;不同处理&amp;quot;) + ylab(&amp;quot;response&amp;quot;)
p3 &amp;lt;- ggplot(data = df, aes(x = treatment, y = response, fill = group)) + 
geom_bar(stat = &amp;quot;identity&amp;quot;, position = &amp;quot;dodge&amp;quot;) + 
geom_errorbar(aes(ymax = response + se, ymin = response -  se), 
position = position_dodge(0.9), width = 0.15) + 
geom_text(aes(y = response +  1.5 * se, label = label, group = group), 
position = position_dodge(0.9), size = 5, fontface = &amp;quot;bold&amp;quot;) + 
scale_fill_brewer(palette = &amp;quot;Set1&amp;quot;)
library(gridExtra) #没有安装此包先用install.packages(&#39;gridExtra&#39;)安装
grid.arrange(p, p1, p2, p3)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819145650.png&#34; alt=&#34;&#34;&gt;
上次有人问坐标轴旋转的实现，坐标轴旋转有时是很有用的，下面是我看过的一个例子，用来介绍一下。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#先加载他的数据
url.world_ports &amp;lt;- url(&amp;quot;https://sharpsightlabs.com/wp-content/datasets/world_ports.RData&amp;quot;)
load(url.world_ports)
knitr::kable(df.world_ports[1:5,])#该数据是关于世界上各个港口的数据汇总
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819145702.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;library(dplyr) #用于数据操作，与ggplot2一样是R语言必学包#现在绘制条形图(%&amp;gt;%上次说过是管道操作，用于连接各个代码，十分有用)
df.world_ports%&amp;gt;%filter(year==2014)%&amp;gt;% #筛选2014年的数据 
ggplot(aes(x=reorder(port_label, desc(volume)), y=volume))+ 
geom_bar(stat = &amp;quot;identity&amp;quot;, fill=&amp;quot;darkred&amp;quot;)+ 
labs(title=&amp;quot;Busiest container ports in the world&amp;quot;)+ 
labs(subtitle = &#39;2014, in order of shipping volume&#39;)+ #添加副标题 
labs(x = &amp;quot;Port&amp;quot;, y = &amp;quot;Shipping\nVolume&amp;quot;)+ 
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = .4))#调整x轴标签，angle=90表示标签旋转90度，从图中可以看出
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819145713.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#现在旋转坐标轴，并筛选排名小于25的港口，并且添加数据标签
df.world_ports %&amp;gt;% filter(year==2014, rank&amp;lt;=25) %&amp;gt;% #筛选2014年并且rank小于等于25的数据 
ggplot(aes(x=reorder(port, volume), y=volume))+ 
geom_bar(stat = &amp;quot;identity&amp;quot;, fill=&amp;quot;darkred&amp;quot;)+ 
labs(title=&amp;quot;Busiest container ports in the world&amp;quot;)+ 
labs(subtitle = &#39;2014, in order of shipping volume&#39;)+  
labs(x = &amp;quot;Port&amp;quot;, y = &amp;quot;Shipping\nVolume&amp;quot;)+ 
geom_text(aes(label=volume), hjust=1.2, color=&amp;quot;white&amp;quot;)+ 
coord_flip()#旋转坐标轴
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819145724.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;两图相比，明显第二幅图好，一是可以添加数据标签，二是不用歪着脖子看。
本来打算讲讲图例的但是发现内容太多了，就不讲了，下次吧！&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>R语言可视化学习笔记之ggpubr包</title>
      <link>https://taoyan.netlify.app/post/2017-06-26.r%E8%AF%AD%E8%A8%80%E5%8F%AF%E8%A7%86%E5%8C%96%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%8Bggpubr%E5%8C%85/</link>
      <pubDate>Sun, 25 Jun 2017 12:34:08 -0500</pubDate>
      <guid>https://taoyan.netlify.app/post/2017-06-26.r%E8%AF%AD%E8%A8%80%E5%8F%AF%E8%A7%86%E5%8C%96%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%8Bggpubr%E5%8C%85/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819144020.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;
&lt;a href=&#34;https://docs.ggplot2.org/current/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Hadley Wickham&lt;/a&gt;创建的可视化包ggplot2可以流畅地进行优美的可视化，但是如果要通过ggplot2定制一套图形，尤其是适用于杂志期刊等出版物的图形，对于那些没有深入了解&lt;strong&gt;ggplot2&lt;/strong&gt;的人来说就有点困难了，&lt;strong&gt;ggplot2&lt;/strong&gt;的部分语法是很晦涩的。为此
&lt;a href=&#34;https://www.sthda.com/english/rpkgs/ggpubr/index.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Alboukadel Kassambara&lt;/a&gt;创建了基于&lt;strong&gt;ggplot2&lt;/strong&gt;的可视化包&lt;strong&gt;ggpubr&lt;/strong&gt;用于绘制符合出版物要求的图形。&lt;/p&gt;
&lt;h2 id=&#34;安装及加载ggpubr包&#34;&gt;安装及加载&lt;strong&gt;ggpubr&lt;/strong&gt;包&lt;/h2&gt;
&lt;p&gt;安装方式有两种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;直接从&lt;strong&gt;CRAN&lt;/strong&gt;安装：&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;install.packages(&amp;quot;ggpubr&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;从&lt;strong&gt;GitHub&lt;/strong&gt;上安装最新版本：&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;if(!require(devtools)) install.packages(&amp;quot;devtools&amp;quot;)
 devtools::install_github(&amp;quot;kassambara/ggpubr&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;安装完之后直接加载就行：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;library(ggpubr)
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;ggpubr可绘制图形&#34;&gt;&lt;strong&gt;ggpubr&lt;/strong&gt;可绘制图形：&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;ggpubr&lt;/strong&gt;可绘制大部分我们常用的图形，下面一一介绍。&lt;/p&gt;
&lt;h3 id=&#34;分布图distribution&#34;&gt;分布图(Distribution)&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;#构建数据集
set.seed(1234)
df &amp;lt;- data.frame( sex=factor(rep(c(&amp;quot;f&amp;quot;, &amp;quot;M&amp;quot;), each=200)), 
weight=c(rnorm(200, 55), rnorm(200, 58)))
head(df)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   sex   weight
## 1  f   53.79293
## 2  f   55.27743
## 3  f   56.08444
## 4  f   52.65430
## 5  f   55.42912
## 6  f   55.50606
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;密度分布图以及边际地毯线并添加平均值线&#34;&gt;密度分布图以及边际地毯线并添加平均值线&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;ggdensity(df, x=&amp;quot;weight&amp;quot;, add = &amp;quot;mean&amp;quot;, rug = TRUE, color = &amp;quot;sex&amp;quot;, fill = &amp;quot;sex&amp;quot;,
palette = c(&amp;quot;#00AFBB&amp;quot;, &amp;quot;#E7B800&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819144035.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;带有均值线和边际地毯线的直方图&#34;&gt;带有均值线和边际地毯线的直方图&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;gghistogram(df, x=&amp;quot;weight&amp;quot;, add = &amp;quot;mean&amp;quot;, rug = TRUE, color = &amp;quot;sex&amp;quot;, fill = &amp;quot;sex&amp;quot;,
palette = c(&amp;quot;#00AFBB&amp;quot;, &amp;quot;#E7B800&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819144048.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;箱线图与小提琴图&#34;&gt;箱线图与小提琴图&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;#加载数据集ToothGrowth
data(&amp;quot;ToothGrowth&amp;quot;)
df1 &amp;lt;- ToothGrowth
head(df1)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    len  supp  dose
## 1  4.2   VC    0.5
## 2  11.5  VC    0.5
## 3  7.3   VC    0.5
## 4  5.8   VC    0.5
## 5  6.4   VC    0.5
## 6  10.0  VC    0.5
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;p &amp;lt;- ggboxplot(df1, x=&amp;quot;dose&amp;quot;, y=&amp;quot;len&amp;quot;, color = &amp;quot;dose&amp;quot;, 
palette = c(&amp;quot;#00AFBB&amp;quot;, &amp;quot;#E7B800&amp;quot;, &amp;quot;#FC4E07&amp;quot;), 
add = &amp;quot;jitter&amp;quot;, shape=&amp;quot;dose&amp;quot;)#增加了jitter点，点shape由dose映射p
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819144100.png&#34; alt=&#34;&#34;&gt;
增加不同组间的p-value值，可以自定义需要标注的组间比较&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;my_comparisons &amp;lt;- list(c(&amp;quot;0.5&amp;quot;, &amp;quot;1&amp;quot;), c(&amp;quot;1&amp;quot;, &amp;quot;2&amp;quot;), c(&amp;quot;0.5&amp;quot;, &amp;quot;2&amp;quot;))
p+stat_compare_means(comparisons = my_comparisons)+#不同组间的比较
stat_compare_means(label.y = 50)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819144114.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;内有箱线图的小提琴图&#34;&gt;内有箱线图的小提琴图&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;ggviolin(df1, x=&amp;quot;dose&amp;quot;, y=&amp;quot;len&amp;quot;, fill = &amp;quot;dose&amp;quot;, 
palette = c(&amp;quot;#00AFBB&amp;quot;, &amp;quot;#E7B800&amp;quot;, &amp;quot;#FC4E07&amp;quot;), 
add = &amp;quot;boxplot&amp;quot;, add.params = list(fill=&amp;quot;white&amp;quot;))+ 
stat_compare_means(comparisons = my_comparisons, label = &amp;quot;p.signif&amp;quot;)+#label这里表示选择显著性标记（星号） 
stat_compare_means(label.y = 50)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819144125.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;条形图&#34;&gt;条形图&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;data(&amp;quot;mtcars&amp;quot;)
df2 &amp;lt;- mtcars
df2$cyl &amp;lt;- factor(df2$cyl)
df2$name &amp;lt;- rownames(df2)#添加一行name
head(df2[, c(&amp;quot;name&amp;quot;, &amp;quot;wt&amp;quot;, &amp;quot;mpg&amp;quot;, &amp;quot;cyl&amp;quot;)])
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819144135.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;按从小到大顺序绘制条形图（不分组排序）&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ggbarplot(df2, x=&amp;quot;name&amp;quot;, y=&amp;quot;mpg&amp;quot;, fill = &amp;quot;cyl&amp;quot;, color = &amp;quot;white&amp;quot;, 
palette = &amp;quot;jco&amp;quot;,#杂志jco的配色 
sort.val = &amp;quot;desc&amp;quot;,#下降排序 
sort.by.groups=FALSE,#不按组排序 
x.text.angle=60)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819144150.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;按组进行排序&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ggbarplot(df2, x=&amp;quot;name&amp;quot;, y=&amp;quot;mpg&amp;quot;, fill = &amp;quot;cyl&amp;quot;, color = &amp;quot;white&amp;quot;, 
palette = &amp;quot;jco&amp;quot;,#杂志jco的配色 
sort.val = &amp;quot;asc&amp;quot;,#上升排序,区别于desc，具体看图演示 
sort.by.groups=TRUE,#按组排序 
x.text.angle=90)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819144208.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;偏差图&#34;&gt;偏差图&lt;/h3&gt;
&lt;p&gt;偏差图展示了与参考值之间的偏差&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;df2$mpg_z &amp;lt;- (df2$mpg-mean(df2$mpg))/sd(df2$mpg)
df2$mpg_grp &amp;lt;- factor(ifelse(df2$mpg_z&amp;lt;0, &amp;quot;low&amp;quot;, &amp;quot;high&amp;quot;), levels = c(&amp;quot;low&amp;quot;, &amp;quot;high&amp;quot;))
head(df2[, c(&amp;quot;name&amp;quot;, &amp;quot;wt&amp;quot;, &amp;quot;mpg&amp;quot;, &amp;quot;mpg_grp&amp;quot;, &amp;quot;cyl&amp;quot;)])
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819144222.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;绘制排序过的条形图&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ggbarplot(df2, x=&amp;quot;name&amp;quot;, y=&amp;quot;mpg_z&amp;quot;, fill = &amp;quot;mpg_grp&amp;quot;, color = &amp;quot;white&amp;quot;, 
palette = &amp;quot;jco&amp;quot;, sort.val = &amp;quot;asc&amp;quot;, sort.by.groups = FALSE, x.text.angle=60, 
ylab = &amp;quot;MPG z-score&amp;quot;, xlab = FALSE, legend.title=&amp;quot;MPG Group&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819144234.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;坐标轴变换&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ggbarplot(df2, x=&amp;quot;name&amp;quot;, y=&amp;quot;mpg_z&amp;quot;, fill = &amp;quot;mpg_grp&amp;quot;, color = &amp;quot;white&amp;quot;, 
palette = &amp;quot;jco&amp;quot;, sort.val = &amp;quot;desc&amp;quot;, sort.by.groups = FALSE, 
x.text.angle=90, ylab = &amp;quot;MPG z-score&amp;quot;, xlab = FALSE, 
legend.title=&amp;quot;MPG Group&amp;quot;, rotate=TRUE, ggtheme = theme_minimal())
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819144248.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;点图dot-charts&#34;&gt;点图(&lt;strong&gt;Dot charts&lt;/strong&gt;)&lt;/h3&gt;
&lt;h4 id=&#34;棒棒糖图lollipop-chart&#34;&gt;棒棒糖图(&lt;strong&gt;Lollipop chart&lt;/strong&gt;)&lt;/h4&gt;
&lt;p&gt;棒棒图可以代替条形图展示数据&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ggdotchart(df2, x=&amp;quot;name&amp;quot;, y=&amp;quot;mpg&amp;quot;, color = &amp;quot;cyl&amp;quot;, 
palette = c(&amp;quot;#00AFBB&amp;quot;, &amp;quot;#E7B800&amp;quot;, &amp;quot;#FC4E07&amp;quot;), sorting = &amp;quot;ascending&amp;quot;, 
add = &amp;quot;segments&amp;quot;, ggtheme = theme_pubr())
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819144302.png&#34; alt=&#34;&#34;&gt;
可以自设置各种参数&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ggdotchart(df2, x=&amp;quot;name&amp;quot;, y=&amp;quot;mpg&amp;quot;, color = &amp;quot;cyl&amp;quot;, 
palette = c(&amp;quot;#00AFBB&amp;quot;, &amp;quot;#E7B800&amp;quot;, &amp;quot;#FC4E07&amp;quot;), sorting = &amp;quot;descending&amp;quot;, 
add = &amp;quot;segments&amp;quot;, rotate = TRUE, group = &amp;quot;cyl&amp;quot;, dot.size = 6, 
label = round(df2$mpg), font.label = list(color=&amp;quot;white&amp;quot;, size=9, vjust=0.5), 
ggtheme = theme_pubr())
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819144314.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;偏差图-1&#34;&gt;偏差图&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;ggdotchart(df2, x=&amp;quot;name&amp;quot;, y=&amp;quot;mpg_z&amp;quot;, color = &amp;quot;cyl&amp;quot;, 
palette = c(&amp;quot;#00AFBB&amp;quot;, &amp;quot;#E7B800&amp;quot;, &amp;quot;#FC4E07&amp;quot;), sorting = &amp;quot;descending&amp;quot;, 
add = &amp;quot;segment&amp;quot;, add.params = list(color=&amp;quot;lightgray&amp;quot;, size=2), 
group = &amp;quot;cyl&amp;quot;, dot.size = 6, label = round(df2$mpg_z, 1), 
font.label = list(color=&amp;quot;white&amp;quot;, size=9, vjust=0.5), ggtheme = theme_pubr())+ 
geom_line(yintercept=0, linetype=2, color=&amp;quot;lightgray&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819144330.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;cleveland点图&#34;&gt;&lt;strong&gt;Cleveland&lt;/strong&gt;点图&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;ggdotchart(df2, x=&amp;quot;name&amp;quot;, y=&amp;quot;mpg&amp;quot;, color = &amp;quot;cyl&amp;quot;, 
palette = c(&amp;quot;#00AFBB&amp;quot;, &amp;quot;#E7B800&amp;quot;, &amp;quot;#FC4E07&amp;quot;), sorting = &amp;quot;descending&amp;quot;, 
rotate = TRUE, dot.size = 2, y.text.col=TRUE, ggtheme = theme_pubr())+ 
theme_cleveland()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819144343.png&#34; alt=&#34;&#34;&gt; &lt;/p&gt;
&lt;h2 id=&#34;sessioninfo&#34;&gt;&lt;strong&gt;SessionInfo&lt;/strong&gt;&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;sessionInfo()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## R version 3.4.0 (2017-04-21)
## Platform: x86_64-w64-mingw32/x64 (64-bit)
## Running under: Windows 8.1 x64 (build 9600)
## 
## Matrix products: default
## 
## locale:
## [1] LC_COLLATE=Chinese (Simplified)_China.936 
## [2] LC_CTYPE=Chinese (Simplified)_China.936 
## [3] LC_MONETARY=Chinese (Simplified)_China.936
## [4] LC_NUMERIC=C 
## [5] LC_TIME=Chinese (Simplified)_China.936 
## 
## attached base packages:
## [1] stats graphics grDevices utils datasets methods base 
## 
## other attached packages:
## [1] ggpubr_0.1.3 magrittr_1.5 ggplot2_2.2.1
## 
## loaded via a namespace (and not attached):
## [1] Rcpp_0.12.11 knitr_1.16 munsell_0.4.3 colorspace_1.3-2
## [5] R6_2.2.1 rlang_0.1.1 stringr_1.2.0 plyr_1.8.4 
## [9] dplyr_0.5.0 tools_3.4.0 grid_3.4.0 gtable_0.2.0 
## [13] DBI_0.6-1 htmltools_0.3.6 yaml_2.1.14 lazyeval_0.2.0 
## [17] rprojroot_1.2 digest_0.6.12 assertthat_0.2.0 tibble_1.3.3 
## [21] ggsignif_0.2.0 ggsci_2.4 purrr_0.2.2.2 evaluate_0.10 
## [25] rmarkdown_1.5 labeling_0.3 stringi_1.1.5 compiler_3.4.0 
## [29] scales_0.4.1 backports_1.1.0
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>R语言可视化学习笔记之添加p-value和显著性标记</title>
      <link>https://taoyan.netlify.app/post/2017-06-25.r%E8%AF%AD%E8%A8%80%E5%8F%AF%E8%A7%86%E5%8C%96%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%8B%E6%B7%BB%E5%8A%A0p-value%E5%92%8C%E6%98%BE%E8%91%97%E6%80%A7%E6%A0%87%E8%AE%B0/</link>
      <pubDate>Sun, 25 Jun 2017 12:34:08 -0500</pubDate>
      <guid>https://taoyan.netlify.app/post/2017-06-25.r%E8%AF%AD%E8%A8%80%E5%8F%AF%E8%A7%86%E5%8C%96%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%8B%E6%B7%BB%E5%8A%A0p-value%E5%92%8C%E6%98%BE%E8%91%97%E6%80%A7%E6%A0%87%E8%AE%B0/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819150115.png&#34; alt=&#34;&#34;&gt;
上篇文章中提了一下如何通过&lt;strong&gt;ggpubr&lt;/strong&gt;包为&lt;code&gt;ggplot&lt;/code&gt;图添加&lt;code&gt;p-value&lt;/code&gt;以及显著性标记,本文将详细介绍。利用数据集&lt;strong&gt;ToothGrowth&lt;/strong&gt;进行演示&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;#先加载包
library(ggpubr)
#加载数据集ToothGrowth
data(&amp;quot;ToothGrowth&amp;quot;)
head(ToothGrowth)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    len  supp  dose
## 1  4.2   VC   0.5
## 2  11.5  VC   0.5
## 3  7.3   VC   0.5
## 4  5.8   VC   0.5
## 5  6.4   VC   0.5
## 6  10.0  VC   0.5
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;比较方法&#34;&gt;比较方法&lt;/h2&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;R&lt;/strong&gt;中常用的比较方法主要有下面几种：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;方法&lt;/th&gt;
&lt;th&gt;R函数&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;T-test&lt;/td&gt;
&lt;td&gt;t.test()&lt;/td&gt;
&lt;td&gt;比较两组(参数)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Wilcoxon test&lt;/td&gt;
&lt;td&gt;wilcox.test()&lt;/td&gt;
&lt;td&gt;比较两组(非参数)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ANOVA&lt;/td&gt;
&lt;td&gt;aov()或anova()&lt;/td&gt;
&lt;td&gt;比较多组(参数)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Kruskal-Wallis&lt;/td&gt;
&lt;td&gt;kruskal.test()&lt;/td&gt;
&lt;td&gt;比较多组(非参数)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;各种比较方法后续有时间一一讲解。&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;添加p-value&#34;&gt;添加&lt;code&gt;p-value&lt;/code&gt;&lt;/h2&gt;
&lt;hr&gt;
&lt;p&gt;主要利用&lt;strong&gt;ggpubr&lt;/strong&gt;包中的两个函数：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;compare_means()&lt;/code&gt;:可以进行一组或多组间的比较&lt;/li&gt;
&lt;li&gt;&lt;code&gt;stat_compare_mean()&lt;/code&gt;:自动添加&lt;code&gt;p-value&lt;/code&gt;、显著性标记到&lt;strong&gt;ggplot&lt;/strong&gt;图中&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;compare_means函数&#34;&gt;**compare_means()**函数&lt;/h2&gt;
&lt;p&gt;该函数主要用用法如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;compare_means(formula, data, method = &amp;quot;wilcox.test&amp;quot;, paired = FALSE,
  group.by = NULL, ref.group = NULL, ...)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;注释：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;formula&lt;/code&gt;:形如&lt;code&gt;x~group&lt;/code&gt;，其中x是数值型变量，&lt;code&gt;group&lt;/code&gt;是因子，可以是一个或者多个&lt;/li&gt;
&lt;li&gt;&lt;code&gt;data&lt;/code&gt;：数据集&lt;/li&gt;
&lt;li&gt;&lt;code&gt;method&lt;/code&gt;:比较的方法，默认为&lt;code&gt;&amp;quot;wilcox.test&amp;quot;&lt;/code&gt;, 其他可选方法为：&lt;code&gt;&amp;quot;t.test&amp;quot;&lt;/code&gt;、&lt;code&gt;&amp;quot;anova&amp;quot;&lt;/code&gt;、&lt;code&gt;&amp;quot;kruskal.test&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;paired&lt;/code&gt;:是否要进行&lt;code&gt;paired test&lt;/code&gt;(&lt;code&gt;TRUE&lt;/code&gt; or &lt;code&gt;FALSE&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;group_by&lt;/code&gt;: 比较时是否要进行分组&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ref.group&lt;/code&gt;: 是否需要指定参考组&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;stat_compare_means函数&#34;&gt;**stat_compare_means()**函数&lt;/h2&gt;
&lt;p&gt;主要用法：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;stat_compare_means(mapping = NULL, comparisons = NULL hide.ns = FALSE,
                   label = NULL,  label.x = NULL, label.y = NULL,  ...)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;注释：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;mapping&lt;/code&gt;:由&lt;code&gt;aes()&lt;/code&gt;创建的一套美学映射&lt;/li&gt;
&lt;li&gt;&lt;code&gt;comparisons&lt;/code&gt;:指定需要进行比较以及添加&lt;code&gt;p-value&lt;/code&gt;、显著性标记的组&lt;/li&gt;
&lt;li&gt;&lt;code&gt;hide.ns&lt;/code&gt;:是否要显示显著性标记ns&lt;/li&gt;
&lt;li&gt;&lt;code&gt;label&lt;/code&gt;:显著性标记的类型，可选项为：&lt;code&gt;p.signif&lt;/code&gt;(显著性标记)、&lt;code&gt;p.format&lt;/code&gt;(显示&lt;code&gt;p-value&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;label.x&lt;/code&gt;、&lt;code&gt;label.y&lt;/code&gt;:显著性标签调整&lt;/li&gt;
&lt;li&gt;&amp;hellip;:其他参数&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;比较独立的两组&#34;&gt;比较独立的两组&lt;/h2&gt;
&lt;hr&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;compare_means(len~supp, data=ToothGrowth)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819150131.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;结果解释：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;.y&lt;/code&gt;:测试中使用的y变量&lt;/li&gt;
&lt;li&gt;&lt;code&gt;p&lt;/code&gt;:&lt;code&gt;p-value&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;p.adj&lt;/code&gt;:调整后的&lt;code&gt;p-value&lt;/code&gt;。默认为&lt;code&gt;p.adjust.method=&amp;quot;holm&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;p.format&lt;/code&gt;:四舍五入后的&lt;code&gt;p-value&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;p.signif&lt;/code&gt;:显著性水平&lt;/li&gt;
&lt;li&gt;&lt;code&gt;method&lt;/code&gt;:用于统计检验的方法
##绘制箱线图&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;p &amp;lt;- ggboxplot(ToothGrowth, x=&amp;quot;supp&amp;quot;, y=&amp;quot;len&amp;quot;, color = &amp;quot;supp&amp;quot;, 
palette = &amp;quot;jco&amp;quot;, add = &amp;quot;jitter&amp;quot;)#添加p-valuep+stat_compare_means()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819150143.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#使用其他统计检验方法
p+stat_compare_means(method = &amp;quot;t.test&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819150153.png&#34; alt=&#34;&#34;&gt;
上述显著性标记可以通过&lt;code&gt;label.x&lt;/code&gt;、&lt;code&gt;label.y&lt;/code&gt;、&lt;code&gt;hjust&lt;/code&gt;及&lt;code&gt;vjust&lt;/code&gt;来调整
显著性标记可以通过&lt;code&gt;aes()&lt;/code&gt;映射来更改：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;aes(label=..p.format..)&lt;/code&gt;或&lt;code&gt;aes(lebel=paste0(&amp;quot;p=&amp;quot;,..p.format..))&lt;/code&gt;:只显示&lt;code&gt;p-value&lt;/code&gt;，不显示统计检验方法&lt;/li&gt;
&lt;li&gt;&lt;code&gt;aes(label=..p.signif..)&lt;/code&gt;:仅显示显著性水平&lt;/li&gt;
&lt;li&gt;&lt;code&gt;aes(label=paste0(..method..,&amp;quot;\n&amp;quot;, &amp;quot;p=&amp;quot;,..p.format..))&lt;/code&gt;:&lt;code&gt;p-value&lt;/code&gt;与显著性水平分行显示&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;举个栗子：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;p+stat_compare_means(aes(label=..p.signif..), label.x = 1.5, label.y = 40)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819150202.png&#34; alt=&#34;&#34;&gt;
也可以将标签指定为字符向量，不要映射，只需将p.signif两端的..去掉即可&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;p+stat_compare_means(label = &amp;quot;p.signif&amp;quot;, label.x = 1.5, label.y = 40)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819150214.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;比较两个paired-sample&#34;&gt;比较两个paired sample&lt;/h2&gt;
&lt;hr&gt;
&lt;pre&gt;&lt;code&gt;compare_means(len~supp, data=ToothGrowth, paired = TRUE)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819150224.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;利用ggpaired进行可视化&#34;&gt;利用ggpaired()进行可视化&lt;/h2&gt;
&lt;hr&gt;
&lt;pre&gt;&lt;code&gt;ggpaired(ToothGrowth, x=&amp;quot;supp&amp;quot;, y=&amp;quot;len&amp;quot;, color = &amp;quot;supp&amp;quot;, line.color = &amp;quot;gray&amp;quot;, 
line.size = 0.4, palette = &amp;quot;jco&amp;quot;)+ stat_compare_means(paired = TRUE)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819150235.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;多组比较&#34;&gt;多组比较&lt;/h2&gt;
&lt;hr&gt;
&lt;p&gt;Global test&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;compare_means(len~dose, data=ToothGrowth, method = &amp;quot;anova&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819150248.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;可视化&#34;&gt;可视化&lt;/h2&gt;
&lt;hr&gt;
&lt;pre&gt;&lt;code&gt;ggboxplot(ToothGrowth, x=&amp;quot;dose&amp;quot;, y=&amp;quot;len&amp;quot;, color = &amp;quot;dose&amp;quot;, palette = &amp;quot;jco&amp;quot;)+
stat_compare_means()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819150259.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#使用其他的方法
ggboxplot(ToothGrowth, x=&amp;quot;dose&amp;quot;, y=&amp;quot;len&amp;quot;, color = &amp;quot;dose&amp;quot;, palette = &amp;quot;jco&amp;quot;)+ 
stat_compare_means(method = &amp;quot;anova&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819150311.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Pairwise comparisons:如果分组变量中包含两个以上的水平，那么会自动进行pairwise test,默认方法为&amp;quot;wilcox.test&amp;quot;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;compare_means(len~dose, data=ToothGrowth)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819150321.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#可以指定比较哪些组
my_comparisons &amp;lt;- list(c(&amp;quot;0.5&amp;quot;, &amp;quot;1&amp;quot;), c(&amp;quot;1&amp;quot;, &amp;quot;2&amp;quot;), c(&amp;quot;0.5&amp;quot;, &amp;quot;2&amp;quot;))
ggboxplot(ToothGrowth, x=&amp;quot;dose&amp;quot;, y=&amp;quot;len&amp;quot;, color = &amp;quot;dose&amp;quot;,palette = &amp;quot;jco&amp;quot;)+
stat_compare_means(comparisons=my_comparisons)+ # Add pairwise 
comparisons p-value stat_compare_means(label.y = 50) # Add global p-value
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819150332.png&#34; alt=&#34;&#34;&gt;
可以通过修改参数label.y来更改标签的位置&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ggboxplot(ToothGrowth, x=&amp;quot;dose&amp;quot;, y=&amp;quot;len&amp;quot;, color = &amp;quot;dose&amp;quot;,palette = &amp;quot;jco&amp;quot;)+
stat_compare_means(comparisons=my_comparisons, label.y = c(29, 35, 40))+ # Add pairwise comparisons p-value 
stat_compare_means(label.y = 45) # Add global p-value
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819150343.png&#34; alt=&#34;&#34;&gt;
至于通过添加线条来连接比较的两组，这一功能已由包
&lt;a href=&#34;https://github.com/Artjom-Metro/ggsignif&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;ggsignif&lt;/strong&gt;&lt;/a&gt;实现&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;##设定参考组
compare_means(len~dose, data=ToothGrowth, ref.group = &amp;quot;0.5&amp;quot;,  #以dose=0.5组为参考组 
method = &amp;quot;t.test&amp;quot; )
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819150354.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#可视化
ggboxplot(ToothGrowth, x=&amp;quot;dose&amp;quot;, y=&amp;quot;len&amp;quot;, color = &amp;quot;dose&amp;quot;, palette = &amp;quot;jco&amp;quot;)+ 
stat_compare_means(method = &amp;quot;anova&amp;quot;, label.y = 40)+ # Add global p-value
stat_compare_means(label = &amp;quot;p.signif&amp;quot;, method = &amp;quot;t.test&amp;quot;, ref.group = &amp;quot;0.5&amp;quot;) # Pairwise comparison against reference
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819150403.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;参考组也可以设置为.all.即所有的平均值&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;compare_means(len~dose, data=ToothGrowth, ref.group = &amp;quot;.all.&amp;quot;, method = &amp;quot;t.test&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819150420.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#可视化
ggboxplot(ToothGrowth, x=&amp;quot;dose&amp;quot;, y=&amp;quot;len&amp;quot;, color = &amp;quot;dose&amp;quot;, palette = &amp;quot;jco&amp;quot;)+
stat_compare_means(method = &amp;quot;anova&amp;quot;, label.y = 40)+# Add global p-value
stat_compare_means(label = &amp;quot;p.signif&amp;quot;, method = &amp;quot;t.test&amp;quot;, 
ref.group = &amp;quot;.all.&amp;quot;)#Pairwise comparison against all
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819151326.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;接下来利用&lt;strong&gt;survminer&lt;/strong&gt;包中的数据集&lt;strong&gt;myeloma&lt;/strong&gt;来讲解一下为什么有时候我们需要将ref.group设置为.all.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;library(survminer)#没安装的先安装再加载
data(&amp;quot;myeloma&amp;quot;)
head(myeloma)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819151340.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;我们将根据患者的分组来绘制&lt;strong&gt;DEPDC1&lt;/strong&gt;基因的表达谱，看不同组之间是否存在显著性的差异，我们可以在7组之间进行比较，但是这样的话组间比较的组合就太多了，因此我们可以将7组中每一组与全部平均值进行比较，看看&lt;strong&gt;DEPDC1&lt;/strong&gt;基因在不同的组中是否过表达还是低表达。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;compare_means(DEPDC1~molecular_group, data = myeloma, ref.group = &amp;quot;.all.&amp;quot;, method = &amp;quot;t.test&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819151352.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#可视化DEPDC1基因表达谱
ggboxplot(myeloma, x=&amp;quot;molecular_group&amp;quot;, y=&amp;quot;DEPDC1&amp;quot;, 
color = &amp;quot;molecular_group&amp;quot;, add = &amp;quot;jitter&amp;quot;, legend=&amp;quot;none&amp;quot;)+ 
rotate_x_text(angle = 45)+ 
geom_hline(yintercept = mean(myeloma$DEPDC1), linetype=2)+# Add horizontal line at base mean 
stat_compare_means(method = &amp;quot;anova&amp;quot;, label.y = 1600)+ # Add global annova p-value 
stat_compare_means(label = &amp;quot;p.signif&amp;quot;, method = &amp;quot;t.test&amp;quot;, ref.group = &amp;quot;.all.&amp;quot;)# Pairwise comparison against all
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819151403.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;从图中可以看出，DEPDC1基因在Proliferation组中显著性地过表达，而在Hyperdiploid和Low bone disease显著性地低表达&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我们也可以将非显著性标记ns去掉，只需要将参数hide.ns=TRUE&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ggboxplot(myeloma, x=&amp;quot;molecular_group&amp;quot;, y=&amp;quot;DEPDC1&amp;quot;, 
color = &amp;quot;molecular_group&amp;quot;, add = &amp;quot;jitter&amp;quot;, legend=&amp;quot;none&amp;quot;)+
rotate_x_text(angle = 45)+ 
geom_hline(yintercept = mean(myeloma$DEPDC1), linetype=2)+# Add horizontal line at base mean 
stat_compare_means(method = &amp;quot;anova&amp;quot;, label.y = 1600)+ # Add global annova p-value 
stat_compare_means(label = &amp;quot;p.signif&amp;quot;, method = &amp;quot;t.test&amp;quot;, ref.group = &amp;quot;.all.&amp;quot;, hide.ns = TRUE)# Pairwise comparison against all
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819151418.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;多个分组变量&#34;&gt;多个分组变量&lt;/h2&gt;
&lt;hr&gt;
&lt;p&gt;按另一个变量进行分组之后进行统计检验，比如按变量dose进行分组：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;compare_means(len~supp, data=ToothGrowth, group.by = &amp;quot;dose&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819151428.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#可视化
p &amp;lt;- ggboxplot(ToothGrowth, x=&amp;quot;supp&amp;quot;, y=&amp;quot;len&amp;quot;, color = &amp;quot;supp&amp;quot;, 
palette = &amp;quot;jco&amp;quot;, add = &amp;quot;jitter&amp;quot;, facet.by = &amp;quot;dose&amp;quot;, short.panel.labs = FALSE)#按dose进行分面
#label只绘制
p-valuep+stat_compare_means(label = &amp;quot;p.format&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819151438.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#label绘制显著性水平
p+stat_compare_means(label = &amp;quot;p.signif&amp;quot;, label.x = 1.5)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819151448.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#将所有箱线图绘制在一个panel中
p &amp;lt;- ggboxplot(ToothGrowth, x=&amp;quot;dose&amp;quot;, y=&amp;quot;len&amp;quot;, color = &amp;quot;supp&amp;quot;, 
palette = &amp;quot;jco&amp;quot;, add = &amp;quot;jitter&amp;quot;)
p+stat_compare_means(aes(group=supp))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819151513.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#只显示p-value
p+stat_compare_means(aes(group=supp), label = &amp;quot;p.format&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819151523.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#显示显著性水平
p+stat_compare_means(aes(group=supp), label = &amp;quot;p.signif&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819151533.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;进行paired sample检验
compare_means(len~supp, data=ToothGrowth, group.by = &amp;quot;dose&amp;quot;, paired = TRUE)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819151544.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#可视化
p &amp;lt;- ggpaired(ToothGrowth, x=&amp;quot;supp&amp;quot;, y=&amp;quot;len&amp;quot;, color = &amp;quot;supp&amp;quot;, 
palette = &amp;quot;jco&amp;quot;, line.color=&amp;quot;gray&amp;quot;, line.size=0.4, facet.by = &amp;quot;dose&amp;quot;, 
short.panel.labs = FALSE)#按dose分面
#只显示p-value
p+stat_compare_means(label = &amp;quot;p.format&amp;quot;, paired = TRUE)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819151554.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;其他图形&#34;&gt;其他图形&lt;/h2&gt;
&lt;h3 id=&#34;条形图与线图一个分组变量&#34;&gt;条形图与线图（一个分组变量）&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;#有误差棒的条形图，实际上我以前的文章里有纯粹用ggplot2实现
ggbarplot(ToothGrowth, x=&amp;quot;dose&amp;quot;, y=&amp;quot;len&amp;quot;, add = &amp;quot;mean_se&amp;quot;)+ 
stat_compare_means()+ 
stat_compare_means(ref.group = &amp;quot;0.5&amp;quot;, label = &amp;quot;p.signif&amp;quot;, label.y = c(22, 29))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819151605.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#有误差棒的线图
ggline(ToothGrowth, x=&amp;quot;dose&amp;quot;, y=&amp;quot;len&amp;quot;, add = &amp;quot;mean_se&amp;quot;)+
stat_compare_means()+ 
stat_compare_means(ref.group = &amp;quot;0.5&amp;quot;, label = &amp;quot;p.signif&amp;quot;, label.y = c(22, 29))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819151619.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;条形图与线图两个分组变量&#34;&gt;条形图与线图（两个分组变量）&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;ggbarplot(ToothGrowth, x=&amp;quot;dose&amp;quot;, y=&amp;quot;len&amp;quot;, add = &amp;quot;mean_se&amp;quot;, color = &amp;quot;supp&amp;quot;, 
palette = &amp;quot;jco&amp;quot;, position = position_dodge(0.8))+ 
stat_compare_means(aes(group=supp), label = &amp;quot;p.signif&amp;quot;, label.y = 29)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819151632.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ggline(ToothGrowth, x=&amp;quot;dose&amp;quot;, y=&amp;quot;len&amp;quot;, add = &amp;quot;mean_se&amp;quot;, color = &amp;quot;supp&amp;quot;, 
palette = &amp;quot;jco&amp;quot;)+ 
stat_compare_means(aes(group=supp), label = &amp;quot;p.signif&amp;quot;, label.y = c(16, 25, 29))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819151647.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;sessioninfo&#34;&gt;Sessioninfo&lt;/h2&gt;
&lt;hr&gt;
&lt;pre&gt;&lt;code&gt;sessionInfo()
## R version 3.4.0 (2017-04-21)
## Platform: x86_64-w64-mingw32/x64 (64-bit)
## Running under: Windows 8.1 x64 (build 9600)
## 
## Matrix products: default
## 
## locale:
## [1] LC_COLLATE=Chinese (Simplified)_China.936 
## [2] LC_CTYPE=Chinese (Simplified)_China.936 
## [3] LC_MONETARY=Chinese (Simplified)_China.936
## [4] LC_NUMERIC=C 
## [5] LC_TIME=Chinese (Simplified)_China.936 
## 
## attached base packages:
## [1] stats graphics grDevices utils datasets methods base 
## 
## other attached packages:
## [1] survminer_0.4.0 ggpubr_0.1.3 magrittr_1.5 ggplot2_2.2.1 
## 
## loaded via a namespace (and not attached):
## [1] Rcpp_0.12.11 compiler_3.4.0 plyr_1.8.4
## [4] tools_3.4.0 digest_0.6.12 evaluate_0.10 
## [7] tibble_1.3.3 gtable_0.2.0 nlme_3.1-131 
## [10] lattice_0.20-35 rlang_0.1.1 Matrix_1.2-10 
## [13] psych_1.7.5 ggsci_2.4 DBI_0.6-1 
## [16] cmprsk_2.2-7 yaml_2.1.14 parallel_3.4.0 
## [19] gridExtra_2.2.1 dplyr_0.5.0 stringr_1.2.0 
## [22] knitr_1.16 survMisc_0.5.4 rprojroot_1.2 
## [25] grid_3.4.0 data.table_1.10.4 KMsurv_0.1-5 
## [28] R6_2.2.1 km.ci_0.5-2 survival_2.41-3 
## [31] foreign_0.8-68 rmarkdown_1.5 reshape2_1.4.2 
## [34] tidyr_0.6.3 purrr_0.2.2.2 splines_3.4.0 
## [37] backports_1.1.0 scales_0.4.1 htmltools_0.3.6 
## [40] assertthat_0.2.0 mnormt_1.5-5 xtable_1.8-2 
## [43] colorspace_1.3-2 ggsignif_0.2.0 labeling_0.3 
## [46] stringi_1.1.5 lazyeval_0.2.0 munsell_0.4.3 
## [49] broom_0.4.2 zoo_1.8-0
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>R语言可视化学习笔记之相关矩阵可视化包ggcorrplot</title>
      <link>https://taoyan.netlify.app/post/2017-06-25.r%E8%AF%AD%E8%A8%80%E5%8F%AF%E8%A7%86%E5%8C%96%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%8B%E7%9B%B8%E5%85%B3%E7%9F%A9%E9%98%B5%E5%8F%AF%E8%A7%86%E5%8C%96%E5%8C%85ggcorrplot/</link>
      <pubDate>Sun, 25 Jun 2017 12:34:08 -0500</pubDate>
      <guid>https://taoyan.netlify.app/post/2017-06-25.r%E8%AF%AD%E8%A8%80%E5%8F%AF%E8%A7%86%E5%8C%96%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%8B%E7%9B%B8%E5%85%B3%E7%9F%A9%E9%98%B5%E5%8F%AF%E8%A7%86%E5%8C%96%E5%8C%85ggcorrplot/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819151730.png&#34; alt=&#34;&#34;&gt;
基于&lt;strong&gt;ggplot2&lt;/strong&gt;包以及&lt;strong&gt;corrplot&lt;/strong&gt;包的相关矩阵可视化包&lt;strong&gt;ggcorrplot&lt;/strong&gt;，&lt;strong&gt;ggcorrplot&lt;/strong&gt;包提供对相关矩阵重排序以及在相关图中展示显著性水平的方法，同时也能计算相关性p-value&lt;/p&gt;
&lt;p&gt;安装方法就不提了，不懂的可以浏览我以前的
&lt;a href=&#34;https://www.jianshu.com/p/678213d605a5&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;文章&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;library(ggcorrplot)
#计算相关矩阵(cor()计算结果不提供p-value)
data(&amp;quot;mtcars&amp;quot;)
corr &amp;lt;- round(cor(mtcars), 1)
head(corr[, 1:6])
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819151744.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#用ggcorrplot包提供的函数cor_pmat()
p.mat &amp;lt;- cor_pmat(mtcars)
head(p.mat[, 1:4])
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819151756.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;可视化相关性矩阵&#34;&gt;可视化相关性矩阵&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;ggcorrplot(corr)#method默认为square
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819151810.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#方法为circle
ggcorrplot(corr, method = &amp;quot;circle&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819151820.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#重排矩阵，使用分等级聚类
ggcorrplot(corr, hc.order = TRUE, outline.color = &amp;quot;white&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819151833.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#控制矩阵形状
ggcorrplot(corr, hc.order = TRUE, type = &amp;quot;lower&amp;quot;, outline.color = &amp;quot;white&amp;quot;)#下三角形
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819151845.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#上三角形
ggcorrplot(corr, hc.order = TRUE, type = &amp;quot;upper&amp;quot;, outline.color = &amp;quot;white&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819151856.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#更改颜色以及主题
ggcorrplot(corr, hc.order = TRUE, type = &amp;quot;lower&amp;quot;, outline.color = &amp;quot;white&amp;quot;, 
ggtheme = ggplot2::theme_gray, colors = c(&amp;quot;#6D9EC1&amp;quot;, &amp;quot;white&amp;quot;, &amp;quot;#E46726&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819151907.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#添加相关系数
ggcorrplot(corr, hc.order = TRUE, type = &amp;quot;lower&amp;quot;, lab = TRUE)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819151918.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#增加显著性水平，不显著的话就不添加了
ggcorrplot(corr, hc.order = TRUE, type = &amp;quot;lower&amp;quot;, p.mat = p.mat)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819151929.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#将不显著的色块设置成空白
ggcorrplot(corr, p.mat = p.mat, hc.order=TRUE, type = &amp;quot;lower&amp;quot;, insig = &amp;quot;blank&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819151942.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>R语言学习笔记之相关性矩阵分析及其可视化</title>
      <link>https://taoyan.netlify.app/post/2017-06-25.r%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%8B%E7%9B%B8%E5%85%B3%E6%80%A7%E7%9F%A9%E9%98%B5%E5%88%86%E6%9E%90%E5%8F%8A%E5%85%B6%E5%8F%AF%E8%A7%86%E5%8C%96/</link>
      <pubDate>Sun, 25 Jun 2017 12:34:08 -0500</pubDate>
      <guid>https://taoyan.netlify.app/post/2017-06-25.r%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%8B%E7%9B%B8%E5%85%B3%E6%80%A7%E7%9F%A9%E9%98%B5%E5%88%86%E6%9E%90%E5%8F%8A%E5%85%B6%E5%8F%AF%E8%A7%86%E5%8C%96/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819152129.png&#34; alt=&#34;&#34;&gt;
计算相关矩阵&lt;/p&gt;
&lt;p&gt;R内置函数&lt;code&gt;cor()&lt;/code&gt;可以用来计算相关系数：&lt;code&gt;cor(x, method = c(&amp;quot;pearson&amp;quot;, &amp;quot;kendall&amp;quot;, &amp;quot;spearman&amp;quot;))&lt;/code&gt;，如果数据有缺失值，用&lt;code&gt;cor(x, method = &amp;quot;pearson&amp;quot;, use = &amp;quot;complete.obs&amp;quot;)&lt;/code&gt;。&lt;/p&gt;
&lt;h2 id=&#34;导入数据&#34;&gt;导入数据&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;如果数据格式是txt，用&lt;code&gt;my_data &amp;lt;- read.delim(file.choose())&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;csv则用&lt;code&gt;my_data &amp;lt;- read.csv(file.choose())&lt;/code&gt;导入。 
这里我们利用R内置数据集&lt;em&gt;mtcars&lt;/em&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;data(mtcars)#加载数据集
mydata &amp;lt;- mtcars[, c(1,3,4,5,6,7)]
head(mydata, 6)#查看数据前6行
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819152142.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;计算相关系数矩阵&#34;&gt;计算相关系数矩阵&lt;/h2&gt;
&lt;hr&gt;
&lt;pre&gt;&lt;code&gt;res &amp;lt;- cor(mydata)
round(res, 2)#保留两位小数
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819152151.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;cor()&lt;/code&gt;只能计算出相关系数，无法给出显著性水平&lt;code&gt;p-value&lt;/code&gt;,&lt;strong&gt;Hmisc&lt;/strong&gt;
包里的&lt;code&gt;rcorr()&lt;/code&gt;函数能够同时给出相关系数以及显著性水平&lt;code&gt;p-value&lt;/code&gt;。&lt;code&gt;rcorr(x, type = c(“pearson”,“spearman”))&lt;/code&gt;。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The output of the function rcorr() is a list containing the following elements : - r : the correlation matrix - n : the matrix of the number of observations used in analyzing each pair of variables - P : the p-values corresponding to the significance levels of correlations.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;library(Hmisc)#加载包
res2 &amp;lt;- rcorr(as.matrix(mydata))
res2
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819152203.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#可以用res2$r、res2$P来提取相关系数以及显著性p-value
res2$r
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819152215.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;res2$P
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819152225.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;如何将相关系数以及显著性水平p-value整合进一个矩阵内，可以自定义一个函数&lt;code&gt;flattenCorrMatrix&lt;/code&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;# ++++++++++++++++++++++++++++
# flattenCorrMatrix
# ++++++++++++++++++++++++++++
# cormat : matrix of the correlation coefficients
# pmat : matrix of the correlation p-values
flattenCorrMatrix &amp;lt;- function(cormat, pmat) {
ut &amp;lt;- upper.tri(cormat) data.frame( row = rownames(cormat)[row(cormat)[ut]], 
column = rownames(cormat)[col(cormat)[ut]], cor =(cormat)[ut], p = pmat[ut] )
}
举个栗子
---
res3 &amp;lt;- rcorr(as.matrix(mtcars[,1:7]))
flattenCorrMatrix(res3$r, res3$P)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819152237.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;可视化相关系数矩阵&#34;&gt;可视化相关系数矩阵&lt;/h2&gt;
&lt;hr&gt;
&lt;p&gt;有不同的方法来可视化，主要有下面四种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;symnum()&lt;/em&gt; function&lt;/li&gt;
&lt;li&gt;&lt;em&gt;corrplot()&lt;/em&gt; function to plot a correlogram&lt;/li&gt;
&lt;li&gt;scatter plots&lt;/li&gt;
&lt;li&gt;heatmap&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;symnumfunction&#34;&gt;&lt;em&gt;symnum()&lt;/em&gt; function&lt;/h2&gt;
&lt;p&gt;主要用法：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;symnum(x, cutpoints = c(0.3, 0.6, 0.8, 0.9, 0.95), symbols = c(&amp;quot; “,”.“,”,“,”+“,”*“,”B“), 
abbr.colnames = TRUE) #很好理解，0-0.3用空格表示， 0.3-0.6用.表示， 以此类推。 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;举个栗子&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;symnum(res, abbr.colnames = FALSE)#abbr.colnames用来控制列名
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819152251.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;corrplotfunction-to-plot-a-correlogram&#34;&gt;corrplot() function to plot a correlogram&lt;/h2&gt;
&lt;p&gt;这个函数来自于包corrplot()
,通过颜色深浅来显著相关程度。参数主要有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;type: “upper”, “lower”, “full”,显示上三角还是下三角还是全部&lt;/li&gt;
&lt;li&gt;order:用什么方法，这里是&lt;em&gt;hclust&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;tl.col (for text label color) and tl.srt (for text label string rotation) :控制文本颜色以及旋转角度&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;library(corrplot)#先加载包
corrplot(res, type = &amp;quot;upper&amp;quot;, order = &amp;quot;hclust&amp;quot;, tl.col = &amp;quot;black&amp;quot;, tl.srt = 45)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819152302.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;也可以结合显著性绘制&#34;&gt;也可以结合显著性绘制&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;# Insignificant correlations are leaved blank
corrplot(res2$r, type=&amp;quot;upper&amp;quot;, order=&amp;quot;hclust&amp;quot;, p.mat = res2$P, sig.level = 0.01, insig = &amp;quot;blank&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819152313.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;usechartcorrelation-draw-scatter-plots&#34;&gt;Use &lt;em&gt;chart.Correlation()&lt;/em&gt;: Draw scatter plots&lt;/h2&gt;
&lt;p&gt;*chart.Correlation()*来自于包&lt;strong&gt;PerformanceAnalytics&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;library(PerformanceAnalytics)#加载包
chart.Correlation(mydata, histogram=TRUE, pch=19)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819152327.png&#34; alt=&#34;&#34;&gt;
解释一下上图：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对角线上显示的是分布图&lt;/li&gt;
&lt;li&gt;左下部显示的是具有拟合线的双变量散点图&lt;/li&gt;
&lt;li&gt;右上部显示的是相关系数以及显著性水平&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;heatmap&#34;&gt;heatmap()&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;col&amp;lt;- colorRampPalette(c(&amp;quot;blue&amp;quot;, &amp;quot;white&amp;quot;, &amp;quot;red&amp;quot;))(20)#调用颜色版自定义颜色
heatmap(x = res, col = col, symm = TRUE)#symm表示是否对称
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819152339.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>R语言学习笔记之聚类分析</title>
      <link>https://taoyan.netlify.app/post/2017-06-25.r%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%8B%E8%81%9A%E7%B1%BB%E5%88%86%E6%9E%90/</link>
      <pubDate>Sun, 25 Jun 2017 12:34:08 -0500</pubDate>
      <guid>https://taoyan.netlify.app/post/2017-06-25.r%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%8B%E8%81%9A%E7%B1%BB%E5%88%86%E6%9E%90/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819152418.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;使用&lt;code&gt;k-means&lt;/code&gt;聚类所需的包：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;factoextra&lt;/li&gt;
&lt;li&gt;cluster&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;加载包&#34;&gt;加载包&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;library(factoextra)
library(cluster)
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;数据准备&#34;&gt;数据准备&lt;/h2&gt;
&lt;p&gt;使用内置的R数据集&lt;code&gt;USArrests&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#load the dataset
data(&amp;quot;USArrests&amp;quot;)
#remove any missing value (i.e, NA values for not available)
#That might be present in the data
USArrests &amp;lt;- na.omit(USArrests)#view the first 6 rows of the data
head(USArrests, n=6)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819152431.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;在此数据集中，列是变量，行是观测值&lt;/strong&gt;
在聚类之前我们可以先进行一些必要的数据检查即数据描述性统计，如平均值、标准差等&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;desc_stats &amp;lt;- data.frame( Min=apply(USArrests, 2, min),#minimum
Med=apply(USArrests, 2, median),#median 
Mean=apply(USArrests, 2, mean),#mean 
SD=apply(USArrests, 2, sd),#Standard deviation 
Max=apply(USArrests, 2, max)#maximum
)
desc_stats &amp;lt;- round(desc_stats, 1)#保留小数点后一位head(desc_stats)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819152442.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;变量有很大的方差及均值时需进行标准化&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;df &amp;lt;- scale(USArrests)
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;数据集群性评估&#34;&gt;数据集群性评估&lt;/h2&gt;
&lt;p&gt;使用&lt;code&gt;get_clust_tendency()&lt;/code&gt;计算&lt;code&gt;Hopkins&lt;/code&gt;统计量&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;res &amp;lt;- get_clust_tendency(df, 40, graph = TRUE)
res$hopkins_stat
## [1] 0.3440875
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;#Visualize the dissimilarity matrix
res$plot
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819152453.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Hopkins统计量的值&amp;lt;0.5，表明数据是高度可聚合的。另外，从图中也可以看出数据可聚合。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;估计聚合簇数&#34;&gt;估计聚合簇数&lt;/h2&gt;
&lt;p&gt;由于k均值聚类需要指定要生成的聚类数量，因此我们将使用函数&lt;code&gt;clusGap()&lt;/code&gt;来计算用于估计最优聚类数。函数&lt;code&gt;fviz_gap_stat()&lt;/code&gt;用于可视化。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;set.seed(123)
## Compute the gap statistic
gap_stat &amp;lt;- clusGap(df, FUN = kmeans, nstart = 25, K.max = 10, B = 500) 
# Plot the result
fviz_gap_stat(gap_stat)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819152509.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;图中显示最佳为聚成四类（k=4）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;进行聚类&#34;&gt;进行聚类&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;set.seed(123)
km.res &amp;lt;- kmeans(df, 4, nstart = 25)
head(km.res$cluster, 20)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819152521.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# Visualize clusters using factoextra
fviz_cluster(km.res, USArrests)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819152531.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;检查cluster-silhouette图&#34;&gt;检查&lt;code&gt;cluster silhouette&lt;/code&gt;图&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Recall that the silhouette measures (SiSi) how similar an object ii is to the the other objects in its own cluster versus those in the neighbor cluster. SiSi values range from 1 to - 1:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;A value of SiSi close to 1 indicates that the object is well clustered. In the other words, the object ii is similar to the other objects in its group.&lt;/li&gt;
&lt;li&gt;A value of SiSi close to -1 indicates that the object is poorly clustered, and that assignment to some other cluster would probably improve the overall results.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;sil &amp;lt;- silhouette(km.res$cluster, dist(df))
rownames(sil) &amp;lt;- rownames(USArrests)
head(sil[, 1:3])
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819152544.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#Visualize 
fviz_silhouette(sil)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819152555.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819152605.png&#34; alt=&#34;&#34;&gt;
图中可以看出有负值，可以通过函数&lt;code&gt;silhouette()&lt;/code&gt;确定是哪个观测值&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;neg_sil_index &amp;lt;- which(sil[, &amp;quot;sil_width&amp;quot;] &amp;lt; 0)
sil[neg_sil_index, , drop = FALSE]
##          cluster    neighbor     sil_width
## Missouri    3          2        -0.07318144
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;eclust增强的聚类分析&#34;&gt;&lt;strong&gt;eclust()&lt;/strong&gt;:增强的聚类分析&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;与其他聚类分析包相比，&lt;code&gt;eclust()&lt;/code&gt;有以下优点：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;简化了聚类分析的工作流程&lt;/li&gt;
&lt;li&gt;可以用于计算层次聚类和分区聚类&lt;/li&gt;
&lt;li&gt;eclust()自动计算最佳聚类簇数。&lt;/li&gt;
&lt;li&gt;自动提供Silhouette plot&lt;/li&gt;
&lt;li&gt;可以结合ggplot2绘制优美的图形&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;使用eclust的k均值聚类&#34;&gt;使用eclust()的&lt;strong&gt;K&lt;/strong&gt;均值聚类&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;# Compute k-means
res.km &amp;lt;- eclust(df, &amp;quot;kmeans&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819152616.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# Gap statistic plot
fviz_gap_stat(res.km$gap_stat)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819152628.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# Silhouette plotfviz_silhouette(res.km)

##    cluster size ave.sil.width
## 1     1     13      0.31
## 2     2     29      0.38
## 3     3      8      0.39
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819152638.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;使用eclust的层次聚类&#34;&gt;使用**eclust（）**的层次聚类&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;# Enhanced hierarchical clustering
res.hc &amp;lt;- eclust(df, &amp;quot;hclust&amp;quot;) # compute hclust
fviz_dend(res.hc, rect = TRUE) # dendrogam
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819152649.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#下面的R代码生成Silhouette plot和分层聚类散点图。
fviz_silhouette(res.hc) # silhouette plot
##   cluster size ave.sil.width
## 1    1     19      0.26
## 2    2     19      0.28
## 3    3     12      0.43
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819152702.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;fviz_cluster(res.hc) # scatter plot
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819152713.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;infos&#34;&gt;Infos&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;This analysis has been performed using R software (R version 3.3.2)&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>”R语言可视化学习笔记之ggrepel包“</title>
      <link>https://taoyan.netlify.app/post/2017-06-25.r%E8%AF%AD%E8%A8%80%E5%8F%AF%E8%A7%86%E5%8C%96%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%8Bggrepel%E5%8C%85/</link>
      <pubDate>Sun, 25 Jun 2017 12:34:08 -0500</pubDate>
      <guid>https://taoyan.netlify.app/post/2017-06-25.r%E8%AF%AD%E8%A8%80%E5%8F%AF%E8%A7%86%E5%8C%96%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%8Bggrepel%E5%8C%85/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819152751.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;当我们在图形中添加标签时，标签之间很容易相互重叠，包
&lt;a href=&#34;https://github.com/slowkow/ggrepel&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;ggrepel&lt;/strong&gt;&lt;/a&gt;就专门用来解决这个问题！ 首先我们来看看通过geom_text()添加标签时的情形：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;library(ggplot2)
#使用数据集mtcars演示
ggplot(mtcars)+ geom_point(aes(wt, mpg), color=&amp;quot;red&amp;quot;)+ 
geom_text(aes(wt, mpg, label=rownames(mtcars)))+ 
theme_classic(base_size = 16)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819152803.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;可以看到可视化效果不是很好。接下来看看包&lt;strong&gt;ggrepel&lt;/strong&gt;的效果。
geom_text_repel()是基于geom_text()&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;library(ggrepel)
set.seed(42)
ggplot(mtcars)+ geom_point(aes(wt, mpg), color=&amp;quot;red&amp;quot;)+ 
geom_text_repel(aes(wt, mpg, label=rownames(mtcars)))+
theme_classic(base_size = 16)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819152818.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;geom_label_repel&#34;&gt;geom_label_repel()&lt;/h2&gt;
&lt;hr&gt;
&lt;p&gt;geom_label_repel()是基于geom_label(),它将标签置于一个小方框中&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;set.seed(42)
ggplot(mtcars)+ geom_point(aes(wt, mpg), color=&amp;quot;grey&amp;quot;, size=5)+
geom_label_repel(aes(wt, mpg, fill=factor(cyl), 
label=rownames(mtcars)), fontface=&amp;quot;bold&amp;quot;, color=&amp;quot;white&amp;quot;, 
box.padding=unit(0.35, &amp;quot;lines&amp;quot;), point.padding=unit(0.5, &amp;quot;lines&amp;quot;), 
segment.colour = &amp;quot;grey50&amp;quot;)+ theme_classic(base_size = 16)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819152830.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;参数&#34;&gt;参数&lt;/h2&gt;
&lt;hr&gt;
&lt;p&gt;大部分&lt;code&gt;geom_text()&lt;/code&gt;的参数都适用于&lt;code&gt;geom_text_repel()&lt;/code&gt;,除了以下几个：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;hjust&lt;/li&gt;
&lt;li&gt;vjust&lt;/li&gt;
&lt;li&gt;position&lt;/li&gt;
&lt;li&gt;check_overlap&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;ggrepel&lt;/strong&gt;包为&lt;code&gt;geom_text_repel()&lt;/code&gt;与&lt;code&gt;geom_label_repel()&lt;/code&gt;提供了特有的参数设置：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;segment.color:连接点与标签的线段的颜色&lt;/li&gt;
&lt;li&gt;segment.size:线段的粗细&lt;/li&gt;
&lt;li&gt;segment.alpha:线段的透明度&lt;/li&gt;
&lt;li&gt;box.padding:文本框周边填充&lt;/li&gt;
&lt;li&gt;point.padding:点周围填充&lt;/li&gt;
&lt;li&gt;arrow:grid:arrow提供的箭头&lt;/li&gt;
&lt;li&gt;force:强制性将重叠文本散开&lt;/li&gt;
&lt;li&gt;max.oter:最大迭代次数&lt;/li&gt;
&lt;li&gt;nudge_x/y:标签开始位置在坐标轴的移动距离&lt;/li&gt;
&lt;li&gt;direction:允许标签的方向，x、y or both&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;下面举个栗子来详细了解这些参数的图形效果&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;set.seed(42)
ggplot(mtcars)+ geom_point(aes(wt, mpg, color=factor(cyl)), size=3)+
geom_text_repel(aes(wt, mpg, color=factor(cyl), 
label=rownames(mtcars), angle=ifelse(mtcars$cyl==4, 90, 0)), 
size=4, family=&amp;quot;Times&amp;quot;, fontface=&amp;quot;bold&amp;quot;, 
box.padding=unit(0.5, &amp;quot;lines&amp;quot;), point.padding=unit(1.6, &amp;quot;lines&amp;quot;), 
segment.color = &amp;quot;#cccccc&amp;quot;, segment.size = 0.5, 
arrow = arrow(length=unit(0.01, &amp;quot;npc&amp;quot;)),force = 1, max.iter = 3e3, 
nudge_x = ifelse(mtcars$cyl==6, 2, 0), nudge_y = ifelse(mtcars$cyl==6, 9, 0))+ 
scale_color_discrete(name=&amp;quot;cyl&amp;quot;)+ 
scale_x_continuous(expand = c(0.5, 0))+ 
scale_y_continuous(expand = c(0.25, 0))+ 
theme_classic(base_size = 16)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819152841.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;也可以通过设置参数&lt;code&gt;point.padding=NA&lt;/code&gt;不对点进行&lt;strong&gt;repel&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;set.seed(42)
mtcars$label &amp;lt;- rownames(mtcars)
ggplot(mtcars, aes(wt, mpg, label=label))+ 
geom_point(color=&amp;quot;red&amp;quot;)+ geom_text_repel(point.padding = NA)+
theme_classic(base_size = 16)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819152856.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;通过赋值某些&lt;strong&gt;label&lt;/strong&gt;空字符“”来隐藏。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;set.seed(42)
mtcars$label &amp;lt;- rownames(mtcars)
mtcars$label[1:15] &amp;lt;- &amp;quot;&amp;quot;
ggplot(mtcars, aes(wt, mpg))+ geom_point(aes(color=factor(cyl)), size=2)+
geom_text_repel(aes(color=factor(cyl), size=hp, label=label), 
point.padding = unit(0.25, &amp;quot;lines&amp;quot;), box.padding = unit(0.25, &amp;quot;lines&amp;quot;), 
nudge_y = 0.1)+ theme_classic(base_size = 16)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819152907.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;将标签控制在特定区域&#34;&gt;将标签控制在特定区域&lt;/h2&gt;
&lt;hr&gt;
&lt;p&gt;通过设置参数xlim和ylim来限制label的位置&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;set.seed(42)
data &amp;lt;- mtcars
mu &amp;lt;- mean(data$wt)
left &amp;lt;- data[data$wt &amp;lt;mu, ]
right &amp;lt;- data[data$wt&amp;gt;=mu, ]
ggplot()+ geom_vline(xintercept = mu)+ 
geom_point(aes(wt, mpg), data=data)+ 
geom_text_repel(data=left, aes(wt, mpg, label=rownames(left), 
color=&amp;quot;Left half&amp;quot;), xlim=c(NA, mu))+ 
geom_text_repel(data=right, aes(wt, mpg, label=rownames(right), 
color=&amp;quot;Rigth half&amp;quot;), xlim=c(mu, NA))+ theme_classic(base_size = 16)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819152930.png&#34; alt=&#34;&#34;&gt;
通过控制参数direction来决定label是左右移动还是上下移动， 默认是both&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;set.seed(42)
#direction=&amp;quot;x&amp;quot; 左右移动
ggplot(mtcars)+
  geom_point(aes(wt, mpg), color=&amp;quot;red&amp;quot;)+
  geom_text_repel(aes(wt, mpg, label=rownames(mtcars)), direction=&amp;quot;x&amp;quot;)+
  theme_classic(base_size = 16)+xlim(1, 6)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819152944.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#direction=&amp;quot;x&amp;quot; 上下移动
ggplot(mtcars)+
  geom_point(aes(wt, mpg), color=&amp;quot;red&amp;quot;)+
  geom_text_repel(aes(wt, mpg, label=rownames(mtcars)), direction=&amp;quot;y&amp;quot;)+
  theme_classic(base_size = 16)+xlim(1, 6)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819152956.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;线图&#34;&gt;线图&lt;/h2&gt;
&lt;hr&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;set.seed(42)
ggplot(Orange, aes(age, circumference, color=Tree))+
  geom_line()+
  coord_cartesian(xlim=c(min(Orange$age), max(Orange$age)+90))+
  geom_text_repel(data=subset(Orange, age==max(age)),
                  aes(label=paste(&amp;quot;Tree&amp;quot;, Tree)),size=6, nudge_x = 45, segment.color = NA)+
  theme_classic(base_size = 16)+
  theme(legend.position = &amp;quot;none&amp;quot;)+
  labs(title=&amp;quot;Orange Trees&amp;quot;, x=&amp;quot;Age(days)&amp;quot;, y=&amp;quot;Circumference(mm)&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819153011.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;sessioninfo&#34;&gt;SessionInfo&lt;/h2&gt;
&lt;hr&gt;
&lt;pre&gt;&lt;code&gt;sessionInfo()
## R version 3.4.0 (2017-04-21)
## Platform: x86_64-w64-mingw32/x64 (64-bit)
## Running under: Windows 8.1 x64 (build 9600)
## 
## Matrix products: default
## 
## locale:
## [1] LC_COLLATE=Chinese (Simplified)_China.936 
## [2] LC_CTYPE=Chinese (Simplified)_China.936 
## [3] LC_MONETARY=Chinese (Simplified)_China.936
## [4] LC_NUMERIC=C 
## [5] LC_TIME=Chinese (Simplified)_China.936 
## 
## attached base packages:
## [1] stats graphics grDevices utils datasets methods base 
##
## other attached packages:
## [1] ggrepel_0.6.5 ggplot2_2.2.1
## 
## loaded via a namespace (and not attached):
## [1] Rcpp_0.12.11 digest_0.6.12 rprojroot_1.2 plyr_1.8.4 
## [5] grid_3.4.0 gtable_0.2.0 backports_1.1.0 magrittr_1.5 
## [9] evaluate_0.10 scales_0.4.1 rlang_0.1.1 stringi_1.1.5 
## [13] lazyeval_0.2.0 rmarkdown_1.5 labeling_0.3 tools_3.4.0 
## [17] stringr_1.2.0 munsell_0.4.3 yaml_2.1.14 compiler_3.4.0 
## [21] colorspace_1.3-2 htmltools_0.3.6 knitr_1.16 tibble_1.3.3
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>图像处理R包magick学习笔记</title>
      <link>https://taoyan.netlify.app/post/2017-09-03.%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86r%E5%8C%85magick%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Sun, 25 Jun 2017 12:34:08 -0500</pubDate>
      <guid>https://taoyan.netlify.app/post/2017-09-03.%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86r%E5%8C%85magick%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/a2jGAc87jB.gif?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;简介&#34;&gt;简介&lt;/h2&gt;
&lt;hr&gt;
&lt;p&gt;本文主要简单介绍一下magick包，主要用于图像处理&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#安装的话就直接从CRAN安装进行
install.packages(&amp;quot;magick&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;#Load the package
library(magick)
#查看支持哪些格式
str(magick_config())
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## List of 21
##  $ version           :Class &#39;numeric_version&#39;  hidden list of 1
##   ..$ : int [1:4] 6 9 9 9
##  $ modules           : logi FALSE
##  $ cairo             : logi TRUE
##  $ fontconfig        : logi FALSE
##  $ freetype          : logi TRUE
##  $ fftw              : logi TRUE
##  $ ghostscript       : logi TRUE
##  $ jpeg              : logi TRUE
##  $ lcms              : logi TRUE
##  $ libopenjp2        : logi FALSE
##  $ lzma              : logi TRUE
##  $ pangocairo        : logi TRUE
##  $ pango             : logi TRUE
##  $ png               : logi TRUE
##  $ rsvg              : logi TRUE
##  $ tiff              : logi TRUE
##  $ webp              : logi TRUE
##  $ wmf               : logi FALSE
##  $ x11               : logi FALSE
##  $ xml               : logi TRUE
##  $ zero-configuration: logi FALSE
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;可以看出大部分格式都是支持的&lt;/p&gt;
&lt;h2 id=&#34;读取图像&#34;&gt;读取图像&lt;/h2&gt;
&lt;hr&gt;
&lt;p&gt;读取的话可以直接从本地读取，也可以读取URL格式的图片，主要通过image_read()来读取，image_info()则可以显示图像的一些属性数据。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;#读取网上随便选的图片
night_king &amp;lt;- image_read(&amp;quot;https://github.com/YTLogos/Pic_blog/blob/master/ha6Cchfk38.jpg?raw=true&amp;quot;)
image_info(night_king)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   format width height colorspace filesize
## 1   JPEG   189    267       sRGB     6449
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;#通过image_write()可以讲图片以任何格式输出，比如将刚读取的图片以png格式输出。
image_write(night_king, path = &amp;quot;night_king.png&amp;quot;, format = &amp;quot;png&amp;quot;)

&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;转换格式&#34;&gt;转换格式&lt;/h2&gt;
&lt;hr&gt;
&lt;p&gt;通过image_convert()可以将图片转换为我们需要的格式，比如这里我们可以将night_king的格式转换为png格式&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;night_king.png &amp;lt;- image_convert(night_king, &amp;quot;png&amp;quot;)
image_info(night_king.png)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   format width height colorspace filesize
## 1    PNG   189    267       sRGB        0
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;可以看到这里的filesize为0，直到被渲染（这里涉及到ImageMagick方面，我不是很懂）。&lt;/p&gt;
&lt;h2 id=&#34;预览&#34;&gt;预览&lt;/h2&gt;
&lt;hr&gt;
&lt;p&gt;在RStudio中可以查看我们读取的图片&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/1kEj0h191l.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;转换transformations&#34;&gt;转换(transformations)&lt;/h2&gt;
&lt;p&gt;magick提供一系列函数对图片进行裁剪以及编辑，主要有以下函数：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;image_crop(image, &amp;ldquo;100x150+50&amp;rdquo;):裁剪&lt;/li&gt;
&lt;li&gt;image_scale(image, &amp;ldquo;200&amp;rdquo;):按宽比例进行放大缩小&lt;/li&gt;
&lt;li&gt;image_scale(image, &amp;ldquo;x200&amp;rdquo;):按高比例进行放大缩小&lt;/li&gt;
&lt;li&gt;image_fill(image, &amp;ldquo;blue&amp;rdquo;, &amp;ldquo;+100+200&amp;rdquo;):对特定部位着色&lt;/li&gt;
&lt;li&gt;image_border(image, &amp;ldquo;red&amp;rdquo;, &amp;ldquo;20x10&amp;rdquo;):添加边框&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;下面我们来试试这些函数&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;#Example image
wolf &amp;lt;- image_read(&amp;quot;https://github.com/YTLogos/Pic_blog/blob/master/4h96Df21AI.png?raw=true&amp;quot;)
print(wolf)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/4h96Df21AI.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;#Add 20px left/right and 10px top/bottom
image_border(image_background(wolf, &amp;quot;hotpink&amp;quot;), &amp;quot;#000080&amp;quot;, &amp;quot;20x10&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/6LE8j4jECf.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;#trim margins
image_trim(wolf)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/HB0lELbmhE.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;#裁剪
image_crop(wolf, &amp;quot;500x300+50&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/f05HDcIG4d.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;#Resize
image_scale(wolf, &amp;quot;300&amp;quot;)#width:300px
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/KjfE0bhl7H.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;#Resize
image_scale(wolf, &amp;quot;x300&amp;quot;)#heigth:300px
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/0me686bm2e.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;#Rotate or mirror
image_rotate(wolf, 45)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/1H6D4bjKbm.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;#Flip
image_flip(wolf)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/4CGL43f8AK.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;#Flop
image_flop(wolf)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/Cg4hL5Hi72.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;#Paint 
image_fill(wolf, &amp;quot;red&amp;quot;, point = &amp;quot;+190+100&amp;quot;, fuzz = 4000)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/fd7IfD0m2a.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;这个函数最难掌握，我本来是想将wolf的眼睛渲染成红色，但是不断调整point以及fuzz都没弄成，感兴趣的可以自己捣鼓捣鼓。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;#Add randomness
image_blur(wolf, 10, 5)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/k5EF1DA9Lk.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;可以通过调整参数来设置模糊度&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;image_noise(wolf)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/D92FH0I3G1.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;#Silly filters
image_charcoal(wolf)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/KAEA3gIIF0.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;image_oilpaint(wolf)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/ACD0Fg5675.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;image_negate(wolf)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/kILkaEe9kl.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;文字注释&#34;&gt;文字注释&lt;/h2&gt;
&lt;hr&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;#Add some text on the image
image_annotate(wolf, &amp;quot;I am the King of wolf&amp;quot;, size=25, gravity = &amp;quot;southeast&amp;quot;, color=&amp;quot;gold&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/dfc3iB0E3D.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;自定义text&#34;&gt;自定义text&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;#customize the text
image_annotate(wolf, &amp;quot;I am the King&amp;quot;, size=30, color=&amp;quot;red&amp;quot;, boxcolor = &amp;quot;pink&amp;quot;, degrees = 45, location = &amp;quot;+30+30&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/59CEEa0gm0.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;设置字体&#34;&gt;设置字体&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;#Set the font times-new-roman
image_annotate(wolf, &amp;quot;I am the King&amp;quot;, size=30, color=&amp;quot;red&amp;quot;, boxcolor = &amp;quot;pink&amp;quot;, degrees = 45, location = &amp;quot;+30+30&amp;quot;, font = &#39;times-new-roman&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/BIbiF712bE.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;管道操作&#34;&gt;管道操作&lt;/h2&gt;
&lt;hr&gt;
&lt;p&gt;你没看错，magick支持管道操作，下面试试&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;library(magrittr)
wolf%&amp;gt;%
  image_rotate(270)%&amp;gt;%
  image_background(&amp;quot;white&amp;quot;, flatten = TRUE)%&amp;gt;%
  image_border(&amp;quot;red&amp;quot;, &amp;quot;10x10&amp;quot;)%&amp;gt;%
  image_annotate(&amp;quot;I am the King&amp;quot;, color=&#39;red&#39;, size = 25, location = &amp;quot;+100+300&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/mEG1lL005b.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;图片向量&#34;&gt;图片向量&lt;/h2&gt;
&lt;hr&gt;
&lt;p&gt;magick除了支持管道操作外，还支持图层叠加、拼图以及动图处理，来个经典的动态地球&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;earth &amp;lt;- image_read(&amp;quot;https://github.com/YTLogos/Pic_blog/blob/master/a9CjAEGiC5.gif&amp;quot;)
length(earth)
print(earth)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/a9CjAEGiC5.gif?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;rev(earth) %&amp;gt;% 
  image_flip() %&amp;gt;% 
  image_annotate(&amp;quot;This is the Earth&amp;quot;, size = 20, color = &amp;quot;white&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;不知什么鬼，图片竟然显示出来乱的，电脑渣的话还是别搞动画&lt;/p&gt;
&lt;h2 id=&#34;图层&#34;&gt;图层&lt;/h2&gt;
&lt;hr&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;bigdata &amp;lt;- image_read(&amp;quot;https://github.com/YTLogos/Pic_blog/blob/master/JclK3efbB3.jpg?raw=true&amp;quot;)
logo &amp;lt;- image_read(&amp;quot;https://github.com/YTLogos/Pic_blog/blob/master/JdjdB88CLm.png?raw=true&amp;quot;)
frink &amp;lt;- image_read(&amp;quot;https://github.com/YTLogos/Pic_blog/blob/master/E5fbmb1FIb.png?raw=true&amp;quot;)
img &amp;lt;- c(bigdata, logo, frink)
img &amp;lt;- image_scale(img, &amp;quot;300x300&amp;quot;)
image_mosaic(img)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/EE0CEL1K57.jpeg?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;动画&#34;&gt;动画&lt;/h2&gt;
&lt;hr&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;image_animate(image_scale(img, &amp;quot;200x200&amp;quot;), fps = 1, dispose = &amp;quot;previous&amp;quot;)#fps控制放映速度
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/0Bi5fCJBE5.gif?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;静图动图&#34;&gt;静图+动图&lt;/h2&gt;
&lt;hr&gt;
&lt;p&gt;静图就用我以前绘制过的，具体可看
&lt;a href=&#34;https://ytlogos.github.io/2017/08/24/ggplot2%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%8B%E5%9B%BE%E5%BD%A2%E6%8E%92%E5%88%97/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;博客&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;image1 &amp;lt;- image_read(&amp;quot;https://github.com/YTLogos/Pic_blog/blob/master/kLeL888DbI.png?raw=true&amp;quot;)
dance_man &amp;lt;- image_read(&amp;quot;https://github.com/YTLogos/Pic_blog/blob/master/86iEDe36lf.gif?raw=true&amp;quot;)
dance_man &amp;lt;- image_scale(dance_man, &amp;quot;200&amp;quot;)
#Background image
background &amp;lt;- image_background(image_scale(image1, &amp;quot;800&amp;quot;), &amp;quot;white&amp;quot;, flatten = TRUE)
#Combine and flatten frames
frames &amp;lt;- image_apply(dance_man, function(frame){
  image_composite(background, frame, offset = &amp;quot;+500+270&amp;quot;)
})
#Turn frames into animation
animation &amp;lt;- image_animate(frames, fps = 10)
print(animation)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/a2jGAc87jB.gif?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;还有一些有趣的功能这里我就不讲了，有兴趣的可以试试，还是很好玩的。&lt;/p&gt;
&lt;h2 id=&#34;sessioninfo&#34;&gt;SessionInfo&lt;/h2&gt;
&lt;hr&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;sessionInfo()

## R version 3.4.1 (2017-06-30)
## Platform: x86_64-w64-mingw32/x64 (64-bit)
## Running under: Windows 10 x64 (build 15063)
## 
## Matrix products: default
## 
## locale:
## [1] LC_COLLATE=Chinese (Simplified)_China.936 
## [2] LC_CTYPE=Chinese (Simplified)_China.936   
## [3] LC_MONETARY=Chinese (Simplified)_China.936
## [4] LC_NUMERIC=C                              
## [5] LC_TIME=Chinese (Simplified)_China.936    
## 
## attached base packages:
## [1] stats     graphics  grDevices utils     datasets  methods   base     
## 
## other attached packages:
## [1] magrittr_1.5 magick_1.2  
## 
## loaded via a namespace (and not attached):
##  [1] compiler_3.4.1  backports_1.1.0 rprojroot_1.2   tools_3.4.1    
##  [5] htmltools_0.3.6 curl_2.8.1      yaml_2.1.14     Rcpp_0.12.12   
##  [9] stringi_1.1.5   rmarkdown_1.6   knitr_1.17      stringr_1.2.0  
## [13] digest_0.6.12   evaluate_0.10.1
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>用circlize包绘制circos-plot</title>
      <link>https://taoyan.netlify.app/post/2017-06-25.%E7%94%A8circlize%E5%8C%85%E7%BB%98%E5%88%B6circos-plot/</link>
      <pubDate>Sun, 25 Jun 2017 12:34:08 -0500</pubDate>
      <guid>https://taoyan.netlify.app/post/2017-06-25.%E7%94%A8circlize%E5%8C%85%E7%BB%98%E5%88%B6circos-plot/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819145001.png&#34; alt=&#34;&#34;&gt;
&lt;code&gt;circlize&lt;/code&gt;包&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;code&gt;circlize&lt;/code&gt;包在德国癌症中心的华人博士Zuguang Gu开发的，有兴趣的可以去看看他的
&lt;a href=&#34;https://github.com/jokergoo&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Github主页&lt;/a&gt;。这个包有两个文档，一个是介绍基本原理的绘制简单
&lt;a href=&#34;https://cran.r-project.org/web/packages/circlize/vignettes/circlize.pdf&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;圈圈图&lt;/a&gt;的，也是本次要介绍的。另外一份文档专门介绍基因组数据绘制圈圈图
&lt;a href=&#34;https://cran.r-project.org/web/packages/circlize/vignettes/genomic_plot.pdf&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Genomic Circos Plot&lt;/a&gt;,我自己还没看完，下次再介绍。
根据我的学习发现这个包与&lt;code&gt;ggplot2&lt;/code&gt;很相似，也是先创建一个图层，然后不断的添加图形元素（&lt;code&gt;point&lt;/code&gt;、&lt;code&gt;line&lt;/code&gt;、&lt;code&gt;bar&lt;/code&gt;等），这些简单的图形元素都有&lt;code&gt;circos.&lt;/code&gt;这个前缀进行绘制，比如要绘制点，则用&lt;code&gt;circos.points()&lt;/code&gt;。具体的下面一一介绍。&lt;/p&gt;
&lt;h2 id=&#34;用circlize绘制圈圈图&#34;&gt;用&lt;code&gt;circlize&lt;/code&gt;绘制圈圈图&lt;/h2&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;照例，没有安装这个包的先安装：&lt;code&gt;install.packages(&amp;quot;circlize&amp;quot;)&lt;/code&gt;或者&lt;code&gt;devtools::install_github(&amp;quot;jokergoo/circlize&amp;quot;)&lt;/code&gt;。绘图第一步是先初始化(&lt;code&gt;circos.initialize&lt;/code&gt;),接下来绘制&lt;code&gt;track&lt;/code&gt;，再添加基本元素。需要提一下的是，由于&lt;code&gt;circlize&lt;/code&gt;绘制图是不断叠加的，因此如果我们一大段代码下来我们只能看到最终的图形，这里为了演示每端代码的结果，所以每次我都得初始化以及&lt;code&gt;circlize.clear&lt;/code&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;library(circlize)
# 简单创建一个数据集
set.seed(999)
n &amp;lt;- 1000
a &amp;lt;- data.frame(factors = sample(letters[1:8], n, replace = TRUE), x = rnorm(n), y = runif(n))
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;绘制第一个track&#34;&gt;绘制第一个&lt;code&gt;track&lt;/code&gt;&lt;/h2&gt;
&lt;hr&gt;
&lt;pre&gt;&lt;code&gt;par(mar = c(1, 1, 1, 1), lwd = 0.1, cex = 0.6)
circos.par(track.height = 0.1)
circos.initialize(factors = a$factors, x = a$x) #初始化，factors来控制track数目，初始化里只有x， 没有y。这一步相当于ggplot()
circos.trackPlotRegion(factors = a$factors, y = a$y, 
panel.fun = function(x, y) { 
circos.axis()})
col &amp;lt;- rep(c(&amp;quot;#FF0000&amp;quot;, &amp;quot;#00FF00&amp;quot;), 4) #自定义一下颜色# 这里先解释一下，一个track有好几个cell，具体数目由factors决定的，向本数据集中factors有八个，因此绘制一个track，其包含八个cell。含有前缀circos.track的函数会在所有的cel里添加基本元素，而只有前缀circos.的函数可以在特定的track、cell里添加基本元素。具体看下演示。
circos.trackPoints(a$factors, a$x, a$y, col = col, pch = 16, cex = 0.5) #所有的cell里都绘制点图
circos.text(-1, 0.5, &amp;quot;left&amp;quot;, sector.index = &amp;quot;a&amp;quot;, track.index = 1) #在track 1中的标记为a的cell里添加
textcircos.text(1, 0.5, &amp;quot;right&amp;quot;, sector.index = &amp;quot;a&amp;quot;)
circos.clear()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819145016.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;接下来绘制第二个track&#34;&gt;接下来绘制第二个&lt;code&gt;track&lt;/code&gt;&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;circos.trackHist&lt;/code&gt;添加柱状图，由于柱状图相对高级一点，因此&lt;code&gt;circos.trackHist&lt;/code&gt;会自动创建一个&lt;code&gt;track&lt;/code&gt;，无需我们&lt;code&gt;circos.trackPlotRegion&lt;/code&gt;进行创建。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;par(mar = c(1, 1, 1, 1), lwd = 0.1, cex = 0.6)
circos.par(track.height = 0.1)
circos.initialize(factors = a$factors, x = a$x)
circos.trackPlotRegion(factors = a$factors, y = a$y, 
panel.fun = function(x, y) { 
circos.axis()})
col &amp;lt;- rep(c(&amp;quot;#FF0000&amp;quot;, &amp;quot;#00FF00&amp;quot;), 4)
circos.trackPoints(a$factors, a$x, a$y, col = col, pch = 16, cex = 0.5)
circos.text(-1, 0.5, &amp;quot;left&amp;quot;, sector.index = &amp;quot;a&amp;quot;, track.index = 1)
circos.text(1, 0.5, &amp;quot;right&amp;quot;, sector.index = &amp;quot;a&amp;quot;)
bg.col &amp;lt;- rep(c(&amp;quot;#EFEFEF&amp;quot;, &amp;quot;#CCCCCC&amp;quot;), 4)
circos.trackHist(a$factors, a$x, bg.col = bg.col, col = NA)
circos.clear()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819145031.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;创建第三个track&#34;&gt;创建第三个&lt;code&gt;track&lt;/code&gt;&lt;/h2&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;这里又得提一下，当我们绘制多个&lt;code&gt;track&lt;/code&gt;时，我们添加基本元素时要指定添加到哪个&lt;code&gt;track&lt;/code&gt;(&lt;code&gt;track.index&lt;/code&gt;指定)、哪个&lt;code&gt;cell&lt;/code&gt;(&lt;code&gt;sector.index&lt;/code&gt;指定)里，如果不指定，那么将默认&lt;code&gt;track&lt;/code&gt;是我们刚刚创建的那个。&lt;code&gt;track.index&lt;/code&gt;、&lt;code&gt;sector.index&lt;/code&gt;等参数可以通过&lt;code&gt;get.cell.meta.data&lt;/code&gt;函数获取。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;par(mar = c(1, 1, 1, 1), lwd = 0.1, cex = 0.6)
circos.par(track.height = 0.1)
circos.initialize(factors = a$factors, x = a$x)
circos.trackPlotRegion(factors = a$factors, y = a$y,
 panel.fun = function(x, y) { 
circos.axis()})
col &amp;lt;- rep(c(&amp;quot;#FF0000&amp;quot;, &amp;quot;#00FF00&amp;quot;), 4)
circos.trackPoints(a$factors, a$x, a$y, col = col, pch = 16, cex = 0.5)
circos.text(-1, 0.5, &amp;quot;left&amp;quot;, sector.index = &amp;quot;a&amp;quot;, track.index = 1)
circos.text(1, 0.5, &amp;quot;right&amp;quot;, sector.index = &amp;quot;a&amp;quot;)
bg.col &amp;lt;- rep(c(&amp;quot;#EFEFEF&amp;quot;, &amp;quot;#CCCCCC&amp;quot;), 4)
circos.trackHist(a$factors, a$x, bg.col = bg.col, col = NA)
circos.trackPlotRegion(factors = a$factors, x = a$x, y = a$y, 
panel.fun = function(x, y) {
 grey = c(&amp;quot;#FFFFFF&amp;quot;, &amp;quot;#CCCCCC&amp;quot;, &amp;quot;#999999&amp;quot;) 
sector.index = get.cell.meta.data(&amp;quot;sector.index&amp;quot;) #这个是第三个track，因为我们刚刚创建，这里这一步不用也可。
 xlim = get.cell.meta.data(&amp;quot;xlim&amp;quot;)
 ylim = get.cell.meta.data(&amp;quot;ylim&amp;quot;) 
circos.text(mean(xlim), mean(ylim), sector.index) 
circos.points(x[1:10], y[1:10], col = &amp;quot;red&amp;quot;, pch = 16, cex = 0.6) 
circos.points(x[11:20], y[11:20], col = &amp;quot;blue&amp;quot;, cex = 0.6)})
circos.clear()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819145044.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;实际操作中我们常常会更新数据或者想更新图形，这是可以通过&lt;code&gt;circos.updatePlotRegion&lt;/code&gt;函数在特定的&lt;code&gt;track&lt;/code&gt;、&lt;code&gt;cell&lt;/code&gt;里(先删除再添加)&lt;code&gt;update&lt;/code&gt;，下面我们将通过&lt;code&gt;circos.updatePlotRegion&lt;/code&gt;函数先删除&lt;code&gt;track 2&lt;/code&gt;、&lt;code&gt;sector d&lt;/code&gt;中的图形元素再添加点图。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;par(mar = c(1, 1, 1, 1), lwd = 0.1, cex = 0.6)
circos.par(track.height = 0.1)
circos.initialize(factors = a$factors, x = a$x)
circos.trackPlotRegion(factors = a$factors, y = a$y, 
panel.fun = function(x, y) { 
circos.axis()})col &amp;lt;- rep(c(&amp;quot;#FF0000&amp;quot;, &amp;quot;#00FF00&amp;quot;), 4)
circos.trackPoints(a$factors, a$x, a$y, col = col, pch = 16, cex = 0.5)
circos.text(-1, 0.5, &amp;quot;left&amp;quot;, sector.index = &amp;quot;a&amp;quot;, track.index = 1)
circos.text(1, 0.5, &amp;quot;right&amp;quot;, sector.index = &amp;quot;a&amp;quot;)
circos.trackPoints(a$factors, a$x, a$y, col = col, pch = 16, cex = 0.5)
circos.text(-1, 0.5, &amp;quot;left&amp;quot;, sector.index = &amp;quot;a&amp;quot;, track.index = 1)
circos.text(1, 0.5, &amp;quot;right&amp;quot;, sector.index = &amp;quot;a&amp;quot;)
bg.col &amp;lt;- rep(c(&amp;quot;#EFEFEF&amp;quot;, &amp;quot;#CCCCCC&amp;quot;), 4)
circos.trackHist(a$factors, a$x, bg.col = bg.col, col = NA)
circos.trackPlotRegion(factors = a$factors, x = a$x, y = a$y,
 panel.fun = function(x, y) { 
grey = c(&amp;quot;#FFFFFF&amp;quot;, &amp;quot;#CCCCCC&amp;quot;, &amp;quot;#999999&amp;quot;) 
sector.index = get.cell.meta.data(&amp;quot;sector.index&amp;quot;)
 xlim = get.cell.meta.data(&amp;quot;xlim&amp;quot;) 
ylim = get.cell.meta.data(&amp;quot;ylim&amp;quot;) 
circos.text(mean(xlim), mean(ylim), sector.index)
circos.points(x[1:10], y[1:10], col = &amp;quot;red&amp;quot;, pch = 16, cex = 0.6)
 circos.points(x[11:20], y[11:20], col = &amp;quot;blue&amp;quot;, cex = 0.6)})
# update第2个track中标记为d的sector
circos.updatePlotRegion(sector.index = &amp;quot;d&amp;quot;, track.index = 2)
circos.points(x = -2:2, y = rep(0, 5))
xlim &amp;lt;- get.cell.meta.data(&amp;quot;xlim&amp;quot;)
ylim &amp;lt;- get.cell.meta.data(&amp;quot;ylim&amp;quot;)
circos.text(mean(xlim), mean(ylim), &amp;quot;updated&amp;quot;)
circos.clear()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819145058.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;接下来绘制第四个track&#34;&gt;接下来绘制第四个&lt;code&gt;track&lt;/code&gt;&lt;/h2&gt;
&lt;hr&gt;
&lt;pre&gt;&lt;code&gt;par(mar = c(1, 1, 1, 1), lwd = 0.1, cex = 0.6)
circos.par(track.height = 0.1)
circos.initialize(factors = a$factors, x = a$x)
circos.trackPlotRegion(factors = a$factors, y = a$y,
 panel.fun = function(x, y) { circos.axis()})
col &amp;lt;- rep(c(&amp;quot;#FF0000&amp;quot;, &amp;quot;#00FF00&amp;quot;), 4)
circos.trackPoints(a$factors, a$x, a$y, col = col, pch = 16, cex = 0.5)
circos.text(-1, 0.5, &amp;quot;left&amp;quot;, sector.index = &amp;quot;a&amp;quot;, track.index = 1)
circos.text(1, 0.5, &amp;quot;right&amp;quot;, sector.index = &amp;quot;a&amp;quot;)
circos.trackPoints(a$factors, a$x, a$y, col = col, pch = 16, cex = 0.5)
circos.text(-1, 0.5, &amp;quot;left&amp;quot;, sector.index = &amp;quot;a&amp;quot;, track.index = 1)
circos.text(1, 0.5, &amp;quot;right&amp;quot;, sector.index = &amp;quot;a&amp;quot;)
bg.col &amp;lt;- rep(c(&amp;quot;#EFEFEF&amp;quot;, &amp;quot;#CCCCCC&amp;quot;), 4)
circos.trackHist(a$factors, a$x, bg.col = bg.col, col = NA)
circos.trackPlotRegion(factors = a$factors, x = a$x, y = a$y, 
panel.fun = function(x, y) { 
grey = c(&amp;quot;#FFFFFF&amp;quot;, &amp;quot;#CCCCCC&amp;quot;, &amp;quot;#999999&amp;quot;) 
sector.index = get.cell.meta.data(&amp;quot;sector.index&amp;quot;) 
xlim = get.cell.meta.data(&amp;quot;xlim&amp;quot;)
 ylim = get.cell.meta.data(&amp;quot;ylim&amp;quot;) 
circos.text(mean(xlim), mean(ylim), sector.index) 
circos.points(x[1:10], y[1:10], col = &amp;quot;red&amp;quot;, pch = 16, cex = 0.6) 
circos.points(x[11:20], y[11:20], col = &amp;quot;blue&amp;quot;, cex = 0.6)})
# update第2个track中标记为d的sector
circos.updatePlotRegion(sector.index = &amp;quot;d&amp;quot;, track.index = 2)
circos.points(x = -2:2, y = rep(0, 5))
xlim &amp;lt;- get.cell.meta.data(&amp;quot;xlim&amp;quot;)
ylim &amp;lt;- get.cell.meta.data(&amp;quot;ylim&amp;quot;)
circos.text(mean(xlim), mean(ylim), &amp;quot;updated&amp;quot;)
circos.clear()
circos.trackPlotRegion(factors = a$factors, y = a$y)
circos.trackLines(a$factors[1:100], a$x[1:100], a$y[1:100], type = &amp;quot;h&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819145113.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;接下来添加&lt;code&gt;links&lt;/code&gt;，&lt;code&gt;links&lt;/code&gt;可以是&lt;code&gt;point&lt;/code&gt;到&lt;code&gt;point&lt;/code&gt;、&lt;code&gt;point&lt;/code&gt;到&lt;code&gt;interval&lt;/code&gt;、&lt;code&gt;interval&lt;/code&gt;到&lt;code&gt;interval&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;par(mar = c(1, 1, 1, 1), lwd = 0.1, cex = 0.6)
circos.par(track.height = 0.1)
circos.initialize(factors = a$factors, x = a$x)
circos.trackPlotRegion(factors = a$factors, y = a$y,
 panel.fun = function(x, y) { circos.axis()})
col &amp;lt;- rep(c(&amp;quot;#FF0000&amp;quot;, &amp;quot;#00FF00&amp;quot;), 4)
circos.trackPoints(a$factors, a$x, a$y, col = col, pch = 16, cex = 0.5)
circos.text(-1, 0.5, &amp;quot;left&amp;quot;, sector.index = &amp;quot;a&amp;quot;, track.index = 1)
circos.text(1, 0.5, &amp;quot;right&amp;quot;, sector.index = &amp;quot;a&amp;quot;)
circos.trackPoints(a$factors, a$x, a$y, col = col, pch = 16, cex = 0.5)
circos.text(-1, 0.5, &amp;quot;left&amp;quot;, sector.index = &amp;quot;a&amp;quot;, track.index = 1)
circos.text(1, 0.5, &amp;quot;right&amp;quot;, sector.index = &amp;quot;a&amp;quot;)
bg.col &amp;lt;- rep(c(&amp;quot;#EFEFEF&amp;quot;, &amp;quot;#CCCCCC&amp;quot;), 4)
circos.trackHist(a$factors, a$x, bg.col = bg.col, col = NA)
circos.trackPlotRegion(factors = a$factors, x = a$x, y = a$y,
 panel.fun = function(x, y) {
 grey = c(&amp;quot;#FFFFFF&amp;quot;, &amp;quot;#CCCCCC&amp;quot;, &amp;quot;#999999&amp;quot;) 
sector.index = get.cell.meta.data(&amp;quot;sector.index&amp;quot;) 
xlim = get.cell.meta.data(&amp;quot;xlim&amp;quot;) 
ylim = get.cell.meta.data(&amp;quot;ylim&amp;quot;)
circos.text(mean(xlim), mean(ylim), sector.index) 
circos.points(x[1:10], y[1:10], col = &amp;quot;red&amp;quot;, pch = 16, cex = 0.6) 
circos.points(x[11:20], y[11:20], col = &amp;quot;blue&amp;quot;, cex = 0.6)})
# update第2个track中标记为d的sector
circos.updatePlotRegion(sector.index = &amp;quot;d&amp;quot;, track.index = 2)
circos.points(x = -2:2, y = rep(0, 5))
xlim &amp;lt;- get.cell.meta.data(&amp;quot;xlim&amp;quot;)
ylim &amp;lt;- get.cell.meta.data(&amp;quot;ylim&amp;quot;)
circos.text(mean(xlim), mean(ylim), &amp;quot;updated&amp;quot;)
circos.clear()
circos.trackPlotRegion(factors = a$factors, y = a$y)
circos.trackLines(a$factors[1:100], a$x[1:100], a$y[1:100], type = &amp;quot;h&amp;quot;)
circos.link(&amp;quot;a&amp;quot;, 0, &amp;quot;b&amp;quot;, 0, h = 0.3) #point to point
circos.link(&amp;quot;c&amp;quot;, c(-0.5, 0.5), &amp;quot;d&amp;quot;, c(-0.5, 0.5), col = &amp;quot;red&amp;quot;, border = NA, h = 0.2) #intreval to interval
circos.link(&amp;quot;e&amp;quot;, 0, &amp;quot;g&amp;quot;, c(-1, 1), col = &amp;quot;green&amp;quot;, border = &amp;quot;black&amp;quot;, lwd = 2, lty = 2) #point to interval
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819145127.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;circlize详述&#34;&gt;circlize详述&lt;/h2&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;circlize&lt;/code&gt;的绘图规则是初始化(&lt;code&gt;initialize&lt;/code&gt;)-创建&lt;code&gt;track&lt;/code&gt;-添加图形元素-创建&lt;code&gt;track&lt;/code&gt;-添加图形元素-…-&lt;code&gt;circos.clear&lt;/code&gt;。具体参数设置以及解释由于内容太多，有兴趣的可以自己
&lt;a href=&#34;https://cran.r-project.org/web/packages/circlize/vignettes/circlize.pdf&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;参考文档&lt;/a&gt;。 我认为比较重要的是要理解&lt;code&gt;track&lt;/code&gt;、&lt;code&gt;sector&lt;/code&gt;。由于基本所有的图形元素我们都是添加在&lt;code&gt;sector&lt;/code&gt;
里面，因此就需要指定&lt;code&gt;track.index&lt;/code&gt;以及&lt;code&gt;sector.index&lt;/code&gt;。接下来就用个例子来讲解一下如何操纵&lt;code&gt;track&lt;/code&gt;、&lt;code&gt;sector&lt;/code&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;par(mar = c(1, 1, 1, 1))
factors &amp;lt;- letters[1:8]
circos.initialize(factors = factors, xlim = c(0, 1)) #初始化# 绘制三个track，并显示具体信息
for (i in 1:3) { 
circos.trackPlotRegion(ylim = c(0, 1))}
circos.info(plot = TRUE)
# 通过draw.sector()来高亮某一sector，比如a：
draw.sector(get.cell.meta.data(&amp;quot;cell.start.degree&amp;quot;, sector.index = &amp;quot;a&amp;quot;), 
get.cell.meta.data(&amp;quot;cell.end.degree&amp;quot;, sector.index = &amp;quot;a&amp;quot;), rou1 = 1, col = &amp;quot;blue&amp;quot;)
circos.clear()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819145140.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;### 高亮某一track， 比如第一个track：
circos.initialize(factors = factors, xlim = c(0, 1))
for (i in 1:3) { 
circos.trackPlotRegion(ylim = c(0, 1))}
circos.info(plot = TRUE)
draw.sector(0, 360, rou1 = get.cell.meta.data(&amp;quot;cell.top.radius&amp;quot;, track.index = 1), 
rou2 = get.cell.meta.data(&amp;quot;cell.bottom.radius&amp;quot;, track.index = 1), col = &amp;quot;green&amp;quot;)
circos.clear()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819145152.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# 高亮某一track某一sector，比如地2、3track中的e、f(sector)：
circos.initialize(factors = factors, xlim = c(0, 1))
for (i in 1:3) { circos.trackPlotRegion(ylim = c(0, 1))}
circos.info(plot = TRUE)
draw.sector(get.cell.meta.data(&amp;quot;cell.start.degree&amp;quot;, sector.index = &amp;quot;e&amp;quot;), 
get.cell.meta.data(&amp;quot;cell.end.degree&amp;quot;, sector.index = &amp;quot;f&amp;quot;), 
get.cell.meta.data(&amp;quot;cell.top.radius&amp;quot;, track.index = 2), 
get.cell.meta.data(&amp;quot;cell.bottom.radius&amp;quot;, track.index = 3), col = &amp;quot;red&amp;quot;)
circos.clear() #千万别忘了circos.clear，不然下次无法绘图。
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819145239.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;放大某一特定区域&#34;&gt;放大某一特定区域&lt;/h3&gt;
&lt;hr&gt;
&lt;pre&gt;&lt;code&gt;df &amp;lt;- data.frame(factors = sample(letters[1:6], 100, replace = TRUE),
                          x = rnorm(100), 
                          y = rnorm(100), 
                          stringsAsFactors = FALSE)
# 放大a，b区域
zoom_df &amp;lt;- df %&amp;gt;% dplyr::filter(factors %in% c(&amp;quot;a&amp;quot;, &amp;quot;b&amp;quot;))
zoom_df$factors &amp;lt;- paste0(&amp;quot;zoom_&amp;quot;, zoom_df$factors)
df2 &amp;lt;- rbind(df, zoom_df)
xrange &amp;lt;- tapply(df2$x, df2$factors, function(x) max(x) - min(x))
normal_sector_index &amp;lt;- unique(df$factors)
zoomed_sector_index &amp;lt;- unique(zoom_df$factors)
sector.width &amp;lt;- c(xrange[normal_sector_index]/sum(xrange[normal_sector_index]), 
xrange[zoomed_sector_index]/sum(xrange[zoomed_sector_index]))
# 绘图
par(mar = c(1, 1, 1, 1))
circos.par(start.degree = 90)
circos.initialize(df2$factors, x = df2$x, sector.width = sector.width)
circos.trackPlotRegion(df2$factors, x = df2$x, y = df2$y, 
panel.fun = function(x, y) { 
circos.points(x, y, col = &amp;quot;red&amp;quot;, pch = 16, cex = 0.5) 
xlim = get.cell.meta.data(&amp;quot;xlim&amp;quot;) 
ylim = get.cell.meta.data(&amp;quot;ylim&amp;quot;) 
sector.index = get.cell.meta.data(&amp;quot;sector.index&amp;quot;) 
circos.text(mean(xlim), mean(ylim), sector.index, niceFacing = TRUE)})
# 添加links
circos.link(&amp;quot;a&amp;quot;, get.cell.meta.data(&amp;quot;cell.xlim&amp;quot;, sector.index = &amp;quot;a&amp;quot;), &amp;quot;zoom_a&amp;quot;, 
get.cell.meta.data(&amp;quot;cell.xlim&amp;quot;, sector.index = &amp;quot;zoom_a&amp;quot;), border = NA, col = &amp;quot;red&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819145251.png&#34; alt=&#34;&#34;&gt;
circos.clear()&lt;/p&gt;
&lt;h2 id=&#34;举个栗子&#34;&gt;举个栗子&lt;/h2&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;圈圈图+热图+进化树&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;set.seed(1234)
data &amp;lt;- matrix(rnorm(100 * 10), nrow = 10, ncol = 100)
col &amp;lt;- colorRamp2(c(-2, 0, 2), c(&amp;quot;green&amp;quot;, &amp;quot;black&amp;quot;, &amp;quot;red&amp;quot;))
factors &amp;lt;- rep(letters[1:2], times = c(30, 70))
data_list &amp;lt;- list(a = data[, factors == &amp;quot;a&amp;quot;], b = data[, factors == &amp;quot;b&amp;quot;])
dend_list &amp;lt;- list(a = as.dendrogram(hclust(dist(t(data_list[[&amp;quot;a&amp;quot;]])))), 
                  b = as.dendrogram(hclust(dist(t(data_list[[&amp;quot;b&amp;quot;]])))))
circos.par(cell.padding = c(0, 0, 0, 0), gap.degree = 5)
circos.initialize(factors = factors, xlim = cbind(c(0, 0), table(factors)))
circos.track(ylim = c(0, 10), bg.border = NA, 
panel.fun = function(x, y) {
 sector.index = get.cell.meta.data(&amp;quot;sector.index&amp;quot;) 
d = data_list[[sector.index]] 
dend = dend_list[[sector.index]] 
d2 = d[, order.dendrogram(dend)] 
col_data = col(d2)
nr = nrow(d2)
nc = ncol(d2) 
for (i in 1:nr) { 
circos.rect(1:nc - 1, rep(nr - i, nc), 1:nc, rep(nr - i + 1, nc),
border = col_data[i, ], col = col_data[i, ]) }})
max_height &amp;lt;- max(sapply(dend_list, function(x) attr(x, &amp;quot;height&amp;quot;)))
circos.track(ylim = c(0, max_height), 
bg.border = NA, track.height = 0.3,
panel.fun = function(x, y) { 
sector.index = get.cell.meta.data(&amp;quot;sector.index&amp;quot;)
dend = dend_list[[sector.index]]
circos.dendrogram(dend, max_height = max_height)})
circos.clear()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819145302.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;多图排列&#34;&gt;多图排列&lt;/h2&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;直接用layout设置&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;layout(matrix(1:9, 3, 3))
for (i in 1:9) {
 factors = letters[1:8] 
par(mar = c(0.5, 0.5, 0.5, 0.5)) 
circos.par(cell.padding = c(0, 0, 0, 0)) 
circos.initialize(factors = factors, xlim = c(0, 1)) 
circos.trackPlotRegion(ylim = c(0, 1), track.height = 0.05, 
bg.col = rand_color(8), bg.border = NA) 
# 绘制links 
for (i in 1:20) {
se = sample(letters[1:8], 2) 
circos.link(se[1], runif(2), se[2], runif(2),
col = rand_color(1, transparency = 0.4), border = NA) 
} 
circos.clear()
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;sessioninfo&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819145316.png&#34; alt=&#34;&#34;&gt;
sessionInfo&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;理解circlize包的原理，绘制基因组数据的图形也是一样的。有时间下次介绍(主要是我自己还没看完，看不太懂)&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819145332.png&#34; alt=&#34;&#34;&gt;。
老规矩，给出&lt;code&gt;sessionInfo&lt;/code&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;sessionInfo()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## R version 3.4.0 (2017-04-21)
## Platform: x86_64-w64-mingw32/x64 (64-bit)
## Running under: Windows 8.1 x64 (build 9600)
## ## Matrix products: default## 
## locale:
## [1] LC_COLLATE=Chinese (Simplified)_China.936 
## [2] LC_CTYPE=Chinese (Simplified)_China.936 
## [3] LC_MONETARY=Chinese (Simplified)_China.936
## [4] LC_NUMERIC=C 
## [5] LC_TIME=Chinese (Simplified)_China.936 
## ## attached base packages:
## [1] stats graphics grDevices utils datasets methods base 
## ## other attached packages:
## [1] circlize_0.4.0 BiocInstaller_1.26.0 forcats_0.2.0
## [4] stringr_1.2.0 dplyr_0.5.0 purrr_0.2.2.2 
## [7] readr_1.1.1 tidyr_0.6.3 tibble_1.3.1
## [10] ggplot2_2.2.1 tidyverse_1.1.1.9000
#### loaded via a namespace (and not attached):
## [1] shape_1.4.2 clisymbols_1.2.0 reshape2_1.4.2 
## [4] haven_1.0.0 lattice_0.20-35 colorspace_1.3-2
## [7] htmltools_0.3.6 yaml_2.1.14 rlang_0.1.1 
## [10] foreign_0.8-68 DBI_0.6-1 modelr_0.1.0
## [13] readxl_1.0.0 plyr_1.8.4 munsell_0.4.3 
## [16] gtable_0.2.0 cellranger_1.1.0 rvest_0.3.2 
## [19] GlobalOptions_0.0.12 psych_1.7.5 evaluate_0.10 
## [22] knitr_1.16 parallel_3.4.0 broom_0.4.2 
## [25] Rcpp_0.12.11 scales_0.4.1 backports_1.1.0 
## [28] formatR_1.5 jsonlite_1.4 boxes_0.0.0.9000
## [31] mnormt_1.5-5 hms_0.3 digest_0.6.12 
## [34] stringi_1.1.5 grid_3.4.0 rprojroot_1.2
## [37] tools_3.4.0 magrittr_1.5 lazyeval_0.2.0 
## [40] crayon_1.3.2.9000 xml2_1.1.1 lubridate_1.6.0 
## [43] assertthat_0.2.0 rmarkdown_1.5 httr_1.2.1 
## [46] rstudioapi_0.6 R6_2.2.1 nlme_3.1-131
## [49] compiler_3.4.0
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>ggplot2学习笔记系列之利用ggplot2绘制条形图</title>
      <link>https://taoyan.netlify.app/post/2017-06-25.ggplot2%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E7%B3%BB%E5%88%97%E4%B9%8B%E5%88%A9%E7%94%A8ggplot2%E7%BB%98%E5%88%B6%E6%9D%A1%E5%BD%A2%E5%9B%BE/</link>
      <pubDate>Sun, 25 Jun 2017 09:23:05 -0500</pubDate>
      <guid>https://taoyan.netlify.app/post/2017-06-25.ggplot2%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E7%B3%BB%E5%88%97%E4%B9%8B%E5%88%A9%E7%94%A8ggplot2%E7%BB%98%E5%88%B6%E6%9D%A1%E5%BD%A2%E5%9B%BE/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819144529.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;简介&#34;&gt;简介&lt;/h2&gt;
&lt;hr&gt;
&lt;p&gt;条形图可以说是我们最常用的数据可视化方法了，通常用于展示不同分类条件下（在x轴上）某个数值型变量的取值（y轴上）。绘制条形图时需要特别注意的一个细节是条形图的条形高度有时表示的是数据集中变量的频数，有时表示的则是变量本身。本文将会介绍这两类条形图的绘图技巧。&lt;/p&gt;
&lt;h2 id=&#34;绘制条形图&#34;&gt;绘制条形图&lt;/h2&gt;
&lt;hr&gt;
&lt;p&gt;使用&lt;code&gt;ggplot()&lt;/code&gt;函数与&lt;code&gt;geom_bar(stat=&amp;quot;identity&amp;quot;)&lt;/code&gt;，绘制条形图，我们将利用&lt;strong&gt;gcookbook&lt;/strong&gt;包中的数据进行绘制。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#没安装包要先安装包gcookbook、ggplot2以及dplyr
library(gcookbook)#加载gcookbook以使用其包含的数据
library(ggplot2)#用于可视化
library(dplyr)#用于数据处理
这里我们调用**gcookbook**里的数据集绘制条形图
head(pg_mean)#查看数据集
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## group weigh
 1 ctrl 5.032
 2 trt1 4.661
 3 trt2 5.526
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;ggplot(data=pg_mean, aes(x=group, y=weight))+#将group、weight分别赋值给x、y轴 
geom_bar(stat = &amp;quot;identity&amp;quot;)#必须将geom_bar()中的stat(统计变换)参数设置
为”identity“，即对原始数据集不作任何统计变换，而该参数的默认值为&#39;count&#39;，即观测数量。
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819144542.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;当x是连续型（数值型）变量时，条形图略有不同，需要略作调整，具体如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;str(BOD)#查看BOD数据集可以发现Time变量是数值型

## &#39;data.frame&#39;:  6 obs. of 2 variables: 
## $ Time : num 1 2 3 4 5 7
## $ demand: num 8.3 10.3 19 16 15.6 19.8
## - attr(*, &amp;quot;reference&amp;quot;)= chr &amp;quot;A1.4, p. 270&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;ggplot(data=BOD, aes(x=Time, y=demand))+ geom_bar(stat = &amp;quot;identity&amp;quot;)#此时Time是数值型
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819144559.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ggplot(data=BOD, aes(x=factor(Time), y=demand))+ 
geom_bar(stat = &amp;quot;identity&amp;quot;)#将Time转换为因子型（分类/离散变量），仔细比较两图
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819144616.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;条形图颜色有两部分：填充颜色（&lt;strong&gt;fill&lt;/strong&gt;）以及边框颜色（&lt;strong&gt;color&lt;/strong&gt;），因此调整条形图颜色要调两部分，具体如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ggplot(data=BOD, aes(x=factor(Time), y=demand))+ 
geom_bar(stat = &amp;quot;identity&amp;quot;, fill=&amp;quot;blue&amp;quot;, color=&amp;quot;black&amp;quot;)#可以自己设定喜好的颜色
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819144629.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;绘制簇状条形图&#34;&gt;绘制簇状条形图&lt;/h2&gt;
&lt;hr&gt;
&lt;p&gt;方法：将分类变量映射到fill参数，运用&lt;code&gt;geom_bar(position=&amp;quot;dodge&amp;quot;)&lt;/code&gt;绘制，具体如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;head(cabbage_exp)#查看数据，发现含有两个分类变量：`Cultivar`和`Date`以及一个连续型变量Weight

##  Cultivar Date Weight   sd       n     se
## 1 c39     d16   3.18  0.9566144 10 0.30250803
## 2 c39     d20   2.80  0.2788867 10 0.08819171
## 3 c39     d21   2.74  0.9834181 10 0.31098410
## 4 c52     d16   2.26  0.4452215 10 0.14079141
## 5 c52     d20   3.11  0.7908505 10 0.25008887
## 6 c52     d21   1.47   0.2110819 10 0.06674995
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;ggplot(data=cabbage_exp, aes(x=Date, y=Weight, fill=Cultivar))+#分别将Date与Cultivar映射给x和fill 
geom_bar(stat = &amp;quot;identity&amp;quot;, position = &amp;quot;dodge&amp;quot;)#position = &amp;quot;dodge&amp;quot;表示条形图分开不重叠(簇形图)，默认的为stack（堆叠式）,还有百分比堆叠式(fill)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819144653.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ggplot(data=cabbage_exp, aes(x=Date, y=Weight, fill=Cultivar))+
geom_bar(stat = &amp;quot;identity&amp;quot;, position = &amp;quot;stack&amp;quot;)#堆叠式
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819144707.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ggplot(data=cabbage_exp, aes(x=Date, y=Weight, fill=Cultivar))+ 
geom_bar(stat = &amp;quot;identity&amp;quot;, position = &amp;quot;fill&amp;quot;)#百分比堆叠式
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819144718.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;设置颜色或者调用调色板&#34;&gt;设置颜色或者调用调色板&lt;/h2&gt;
&lt;hr&gt;
&lt;pre&gt;&lt;code&gt;ggplot(data=cabbage_exp, aes(x=Date, y=Weight, fill=Cultivar))+ 
geom_bar(stat = &amp;quot;identity&amp;quot;, position = &amp;quot;dodge&amp;quot;, color=&amp;quot;black&amp;quot;)+ 
scale_fill_brewer(palette = &amp;quot;Set1&amp;quot;)#Set1为调色板，后期将会专门讲解Color设置
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819144729.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ggplot(data=cabbage_exp, aes(x=Date, y=Weight, fill=Cultivar))+ 
geom_bar(stat = &amp;quot;identity&amp;quot;, position = &amp;quot;dodge&amp;quot;, color=&amp;quot;black&amp;quot;)+ 
scale_fill_manual(values = c(&amp;quot;darkred&amp;quot;, &amp;quot;purple&amp;quot;))#自设置颜色
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819144741.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;绘制频数条形图&#34;&gt;绘制频数条形图&lt;/h2&gt;
&lt;hr&gt;
&lt;pre&gt;&lt;code&gt;head(diamonds,n=10)#查看前10行数据

## # A tibble: 10 × 10
##   carat  cut     color clarity depth table  price   x    y     z
##   &amp;lt;dbl&amp;gt; &amp;lt;ord&amp;gt;    &amp;lt;ord&amp;gt;  &amp;lt;ord&amp;gt;  &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;  &amp;lt;int&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;
## 1  0.23 Ideal      E     SI2    61.5   55    326   3.95  3.98 2.43
## 2  0.21 Premium    E     SI1    59.8   61    326   3.89  3.84 2.31
## 3  0.23 Good       E     VS1    56.9   65    327   4.05  4.07 2.31
## 4  0.29 Premium    I     VS2    62.4   58    334   4.20  4.23 2.63
## 5  0.31 Good       J     SI2    63.3   58    335   4.34  4.35 2.75
## 6  0.24 Very Good  J     VVS2   62.8   57    336   3.94  3.96 2.48
## 7  0.24 Very Good  I     VVS1   62.3   57    336   3.95  3.98 2.47
## 8  0.26 Very Good  H     SI1    61.9   55    337   4.07  4.11 2.53
## 9  0.22 Fair       E     VS2    65.1   61    337   3.87  3.78 2.49
## 10 0.23 Very Good  H     VS1    59.4   61    338   4.00  4.05 2.39
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;ggplot(diamonds, aes(x=cut))+#此时不要映射任何变量到y 
geom_bar()#等价于geom_bar(stat=&amp;quot;bin&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819144752.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;绘制y轴正负轴都有数据的条形图&#34;&gt;绘制y轴正负轴都有数据的条形图&lt;/h2&gt;
&lt;hr&gt;
&lt;pre&gt;&lt;code&gt;#首先先创建一下数据集
set.seed(1111)#此命令保证数据结果可以重现在任何电脑上
x &amp;lt;- 1980+1:36#赋值x
y &amp;lt;- round(100*rnorm(36))#赋值y
mydata &amp;lt;- data.frame(x=x, y=y)#创建数据集mydata
head(mydata)#查看数据集
##    x    y
## 1 1981  -9
## 2 1982  132
## 3 1983  64
## 4 1984  117
## 5 1985  12
## 6 1986 -293
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;mydata &amp;lt;- mydata%&amp;gt;%#%&amp;gt;%管道操作，结合dplyr为数据处理神器 
mutate(judge=ifelse(y&amp;gt;=0,&amp;quot;Yes&amp;quot;, &amp;quot;No&amp;quot;))#创建judge变量，将y正负分类
head(mydata)#查看数据
##    x    y   judge
## 1 1981  -9    No
## 2 1982  132   Yes
## 3 1983  64    Yes
## 4 1984  117   Yes
## 5 1985  12    Yes
## 6 1986 -293   No
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;接下来绘制条形图
ggplot(data=mydata, aes(x=x, y=y, fill=judge))+
 geom_bar(stat = &amp;quot;identity&amp;quot;,position = &amp;quot;identity&amp;quot;)+#这里position=&amp;quot;identity&amp;quot;可以避免系统对负值绘制条形图发出警告信息 
scale_fill_manual(values = c(&amp;quot;purple&amp;quot;, &amp;quot;blue&amp;quot;), guide=FALSE)+xlab(&amp;quot;Year&amp;quot;)#guide=FALSE表示不要图例,x轴标题为Year
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819144802.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;通过width来调整条形宽度以及条形距离&#34;&gt;通过width来调整条形宽度以及条形距离&lt;/h2&gt;
&lt;hr&gt;
&lt;pre&gt;&lt;code&gt;head(diamonds)

## # A tibble: 6 × 10
##  carat  cut    color  clarity  depth    table   price   x     y     z
##  &amp;lt;dbl&amp;gt; &amp;lt;ord&amp;gt;    &amp;lt;ord&amp;gt;   &amp;lt;ord&amp;gt;   &amp;lt;dbl&amp;gt;   &amp;lt;dbl&amp;gt;   &amp;lt;int&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;
## 1 0.23  Ideal     E      SI2    61.5     55      326   3.95  3.98  2.43
## 2 0.21  Premium   E      SI1    59.8     61      326   3.89  3.84  2.31
## 3 0.23  Good      E      VS1    56.9     65      327   4.05  4.07  2.31
## 4 0.29  Premium   I      VS2    62.4     58      334   4.20  4.23  2.63
## 5 0.31  Good      J      SI2    63.3     58      335   4.34  4.35  2.75
## 6 0.24  Very Good J      VVS2    62.8    57      336   3.94  3.96  2.48
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;ggplot(data=diamonds, aes(x=color, y=price, fill=cut))+ 
geom_bar(stat = &amp;quot;identity&amp;quot;, width = 0.6, position = position_dodge(0.8))+#调整条形宽度以及条形距离 
scale_fill_brewer(palette = &amp;quot;Set1&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819144813.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;geom_text添加数据标签&#34;&gt;&lt;code&gt;geom_text()&lt;/code&gt;添加数据标签&lt;/h2&gt;
&lt;hr&gt;
&lt;p&gt;使用&lt;code&gt;geom_text()&lt;/code&gt;为条形图添加标签，需要分别指定一个变量映射给x、y以及标签（label），&lt;code&gt;vjust&lt;/code&gt;和&lt;code&gt;hjust&lt;/code&gt;分别调整标签的竖直和水平位置。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;### 标签在条形图顶端下方
ggplot(data=cabbage_exp, aes(x=interaction(Date, Cultivar), y=Weight))+ 
geom_bar(stat = &amp;quot;identity&amp;quot;)+ 
geom_text(aes(label=Weight), vjust=1.5, color=&amp;quot;white&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819144827.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;### 标签在条形图顶端上方
ggplot(data=cabbage_exp, aes(x=interaction(Date, Cultivar), y=Weight))+ 
geom_bar(stat = &amp;quot;identity&amp;quot;)+ 
geom_text(aes(label=Weight), vjust=-0.3, color=&amp;quot;red&amp;quot;)#可以通过color、size等自行调整标签属性
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819144844.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;堆叠图也一样
ggplot(data=cabbage_exp, aes(x=Date, y=Weight, fill=Cultivar))+ 
geom_bar(stat=&amp;quot;identity&amp;quot;, position = &amp;quot;stack&amp;quot;)+ 
geom_text(aes(label=Weight), size=5, color=&amp;quot;black&amp;quot;, vjust=3.5, hjust=0.5, 
position = position_stack())#这里的position要与geom_bar()里面的保持一致，各种参数多调整才能效果最佳
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819144901.png&#34; alt=&#34;&#34;&gt;
下次将重点讲解如何添加误差棒、显著性标记、坐标轴标题、图标题以及部分小技巧等等&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
