<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ggpubr | Tao Yan</title>
    <link>https://taoyan.netlify.app/tags/ggpubr/</link>
      <atom:link href="https://taoyan.netlify.app/tags/ggpubr/index.xml" rel="self" type="application/rss+xml" />
    <description>ggpubr</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><copyright>© Tao Yan, 2018-2020</copyright><lastBuildDate>Wed, 31 Jan 2018 19:43:11 +0000</lastBuildDate>
    <image>
      <url>https://taoyan.netlify.app/img/pom-card.png</url>
      <title>ggpubr</title>
      <link>https://taoyan.netlify.app/tags/ggpubr/</link>
    </image>
    
    <item>
      <title>关于如何修改坐标轴表达式以及分面图例的一个例子</title>
      <link>https://taoyan.netlify.app/post/2018-01-31.%E5%85%B3%E4%BA%8E%E5%A6%82%E4%BD%95%E4%BF%AE%E6%94%B9%E5%9D%90%E6%A0%87%E8%BD%B4%E8%A1%A8%E8%BE%BE%E5%BC%8F%E4%BB%A5%E5%8F%8A%E5%88%86%E9%9D%A2%E5%9B%BE%E4%BE%8B%E7%9A%84%E4%B8%80%E4%B8%AA%E4%BE%8B%E5%AD%90/</link>
      <pubDate>Wed, 31 Jan 2018 19:43:11 +0000</pubDate>
      <guid>https://taoyan.netlify.app/post/2018-01-31.%E5%85%B3%E4%BA%8E%E5%A6%82%E4%BD%95%E4%BF%AE%E6%94%B9%E5%9D%90%E6%A0%87%E8%BD%B4%E8%A1%A8%E8%BE%BE%E5%BC%8F%E4%BB%A5%E5%8F%8A%E5%88%86%E9%9D%A2%E5%9B%BE%E4%BE%8B%E7%9A%84%E4%B8%80%E4%B8%AA%E4%BE%8B%E5%AD%90/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/ElKca96m2c.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;ggplot2&lt;/strong&gt;绘制的图形如果需要修改细节的话，没有对&lt;strong&gt;ggplot2&lt;/strong&gt;有一定的了解的话是十分困难的，毕竟连创建这个包的作者&lt;strong&gt;Hadley Wickham&lt;/strong&gt;都自称自己使用&lt;strong&gt;ggplot2&lt;/strong&gt;的时候都需要查文档。在对&lt;strong&gt;ggplot2&lt;/strong&gt;有一定了解的基础上如果需要修改ggplot图的话稍微查查文档基本能解决。&lt;/p&gt;
&lt;h2 id=&#34;来源&#34;&gt;来源&lt;/h2&gt;
&lt;p&gt;这两天有人问我如何修改她的图形，她绘制的图如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/5fA4FDKGJB.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;p&gt;她希望修改三点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;各个分面的图例比如DK、NL等是否可以修改，使得大一点&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Y轴标题中的-1如何变成上标&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;平均值虚线如何针对不同物种画相对应的虚线平均值&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;她是使用&lt;strong&gt;ggpubr&lt;/strong&gt;包绘制的，这个包就是对一些&lt;strong&gt;ggplot2&lt;/strong&gt;函数的一些封装及继承，本质上来说是可以通过&lt;strong&gt;ggplot2&lt;/strong&gt;来修改参数的。我参考了一部分的官方文档之后解决了这三个问题，所以写了这篇博客。&lt;/p&gt;
&lt;h2 id=&#34;数据&#34;&gt;数据&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;library(tidyverse)
library(ggpubr)
ICP&amp;lt;-read.csv(&amp;quot;C:/Users/taoyan/Desktop/element.csv&amp;quot;)
ICP$Order &amp;lt;- factor(ICP$Species, levels = c(&amp;quot;DK&amp;quot;, &amp;quot;NL&amp;quot;, &amp;quot;RO&amp;quot;, &amp;quot;IT&amp;quot;, &amp;quot;TL&amp;quot;, &amp;quot;AP&amp;quot;, &amp;quot;AD&amp;quot;))
head(ICP)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   Species Treatment       Na       Ca        P
## 1      DK         A 268.4234 3021.933 1791.317
## 2      DK         A 301.9390 3314.308 1595.479
## 3      DK         A 261.1024 3417.643 1547.596
## 4      DK         A 229.1169 3069.978 1735.703
## 5      DK         A 265.1454 3205.965 1667.524
## 6      DK         B 330.7135 4028.279 1638.113
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;构造数据&#34;&gt;构造数据&lt;/h2&gt;
&lt;p&gt;由于后面需要用到平均值，所以需要构造含有平均值的数据集&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;meanvalue &amp;lt;- ICP%&amp;gt;%group_by(Species)%&amp;gt;%summarise(mean=mean(Na))
data &amp;lt;- left_join(ICP,meanvalue,by=c(&#39;Species&#39;=&#39;Species&#39;))
head(data[,c(1:4,13)])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   Species Treatment       Na       Ca     mean
## 1      DK         A 268.4234 3021.933 426.6542
## 2      DK         A 301.9390 3314.308 426.6542
## 3      DK         A 261.1024 3417.643 426.6542
## 4      DK         A 229.1169 3069.978 426.6542
## 5      DK         A 265.1454 3205.965 426.6542
## 6      DK         B 330.7135 4028.279 426.6542
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;绘图&#34;&gt;绘图&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;p &amp;lt;- ggboxplot(ICP, x=&amp;quot;Treatment&amp;quot;, y=&amp;quot;Na&amp;quot;,group=&amp;quot;Species&amp;quot;, color=&amp;quot;Treatment&amp;quot;,
add=&amp;quot;mean_se&amp;quot;,facet.by = &amp;quot;Order&amp;quot;,ncol=4, legend=&amp;quot;none&amp;quot;)+
geom_hline(aes(yintercept=mean),data,linetype=2)+ #由于要在不同的分面里绘制水平线，这里要mapping
stat_compare_means(method=&amp;quot;anova&amp;quot;,label=&amp;quot;p.format&amp;quot;,label.y=3500,size=8)+
stat_compare_means(label=&amp;quot;p.signif&amp;quot;,size=8,method=&amp;quot;wilcox.test&amp;quot;,ref.group=&amp;quot;.all.&amp;quot;,hide.ns=TRUE)
ggpar(p,palette = &amp;quot;npg&amp;quot;,font.tickslab = c(18,&amp;quot;bold&amp;quot;))+
  theme(strip.text = element_text(size=15,face = &amp;quot;bold&amp;quot;))+ #调整分面legend
  labs(x=&amp;quot;Treatment&amp;quot;, y=expression(bold(paste(&amp;quot;Na (  &amp;quot;, &#39;mg Kg&#39;^{-1},&amp;quot;)&amp;quot;,&#39; DM&#39;))))+
  theme(axis.title = element_text(face = &amp;quot;bold&amp;quot;, size=18))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/ElKca96m2c.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;sessioninfo&#34;&gt;SessionInfo()&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;sessionInfo()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## R version 3.4.3 (2017-11-30)
## Platform: x86_64-w64-mingw32/x64 (64-bit)
## Running under: Windows 10 x64 (build 16299)
## 
## Matrix products: default
## 
## locale:
## [1] LC_COLLATE=Chinese (Simplified)_China.936 
## [2] LC_CTYPE=Chinese (Simplified)_China.936   
## [3] LC_MONETARY=Chinese (Simplified)_China.936
## [4] LC_NUMERIC=C                              
## [5] LC_TIME=Chinese (Simplified)_China.936    
## 
## attached base packages:
## [1] stats     graphics  grDevices utils     datasets  methods   base     
## 
## other attached packages:
##  [1] bindrcpp_0.2       ggpubr_0.1.6       magrittr_1.5      
##  [4] forcats_0.2.0      stringr_1.2.0      dplyr_0.7.4       
##  [7] purrr_0.2.4        readr_1.1.1        tidyr_0.7.2       
## [10] tibble_1.4.2       ggplot2_2.2.1.9000 tidyverse_1.2.1   
## 
## loaded via a namespace (and not attached):
##  [1] tidyselect_0.2.3  reshape2_1.4.3    haven_1.1.1      
##  [4] lattice_0.20-35   colorspace_1.3-2  htmltools_0.3.6  
##  [7] yaml_2.1.16       rlang_0.1.6       pillar_1.1.0     
## [10] foreign_0.8-69    glue_1.2.0        modelr_0.1.1     
## [13] readxl_1.0.0      bindr_0.1         plyr_1.8.4       
## [16] munsell_0.4.3     gtable_0.2.0      cellranger_1.1.0 
## [19] rvest_0.3.2       ggsci_2.8         psych_1.7.8      
## [22] evaluate_0.10.1   labeling_0.3      knitr_1.18       
## [25] parallel_3.4.3    broom_0.4.3       Rcpp_0.12.15     
## [28] scales_0.5.0.9000 backports_1.1.2   jsonlite_1.5     
## [31] mnormt_1.5-5      hms_0.4.1         digest_0.6.14    
## [34] stringi_1.1.6     grid_3.4.3        rprojroot_1.3-2  
## [37] cli_1.0.0         tools_3.4.3       lazyeval_0.2.1   
## [40] crayon_1.3.4      pkgconfig_2.0.1   xml2_1.2.0       
## [43] lubridate_1.7.1   assertthat_0.2.0  rmarkdown_1.8    
## [46] httr_1.3.1        rstudioapi_0.7    R6_2.2.2         
## [49] nlme_3.1-131      compiler_3.4.3
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>创建及自定义ggplot分面图形参数</title>
      <link>https://taoyan.netlify.app/post/2017-09-14.%E5%88%9B%E5%BB%BA%E5%8F%8A%E8%87%AA%E5%AE%9A%E4%B9%89ggplot%E5%88%86%E9%9D%A2%E5%9B%BE%E5%BD%A2%E5%8F%82%E6%95%B0/</link>
      <pubDate>Thu, 14 Sep 2017 07:47:05 -0500</pubDate>
      <guid>https://taoyan.netlify.app/post/2017-09-14.%E5%88%9B%E5%BB%BA%E5%8F%8A%E8%87%AA%E5%AE%9A%E4%B9%89ggplot%E5%88%86%E9%9D%A2%E5%9B%BE%E5%BD%A2%E5%8F%82%E6%95%B0/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/1.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;简介&#34;&gt;简介&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;ggplot2&lt;/strong&gt;有一个十分重要的功能就是分面，而今天要讲得R包&lt;strong&gt;ggpubr&lt;/strong&gt;中也有一个函数facet()专门用来进行分面操作。&lt;/p&gt;
&lt;h2 id=&#34;安装&#34;&gt;安装&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;install.packages(&amp;quot;ggpubr&amp;quot;)
#or
if(!require(devtools)) install.packages(&amp;quot;devtools&amp;quot;)
devtools::install_github(&amp;quot;kassambara/ggpubr&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;绘图&#34;&gt;绘图&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;library(ggpubr)
df &amp;lt;- ToothGrowth
df$dose &amp;lt;- as.factor(df$dose)
head(df)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    len supp dose
## 1  4.2   VC  0.5
## 2 11.5   VC  0.5
## 3  7.3   VC  0.5
## 4  5.8   VC  0.5
## 5  6.4   VC  0.5
## 6 10.0   VC  0.5
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;p &amp;lt;- ggdensity(df, x=&amp;quot;len&amp;quot;, fill = &amp;quot;dose&amp;quot;, palette = &amp;quot;jco&amp;quot;, ggtheme = theme_light(), legend=&amp;quot;top&amp;quot;)
p
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/1.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;分面&#34;&gt;分面&lt;/h2&gt;
&lt;h3 id=&#34;水平方向分面&#34;&gt;水平方向分面&lt;/h3&gt;
&lt;p&gt;按照变量&lt;code&gt;supp&lt;/code&gt;进行水平方向的分面&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;facet(p, facet.by = &amp;quot;supp&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/2.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;竖直方向分面&#34;&gt;竖直方向分面&lt;/h3&gt;
&lt;p&gt;按照变量&lt;code&gt;supp&lt;/code&gt;进行竖直方向的分面&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;facet(p, facet.by = &amp;quot;supp&amp;quot;, ncol = 1)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/3.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;双变量分面&#34;&gt;双变量分面&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;#divide with &amp;quot;supp&amp;quot; vertical, &amp;quot;dose&amp;quot; horizontal
facet(p, facet.by = c(&amp;quot;supp&amp;quot;, &amp;quot;dose&amp;quot;), short.panel.labs = FALSE)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/4.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;修改面板外观&#34;&gt;修改面板外观&lt;/h2&gt;
&lt;p&gt;主要有以下参数进行修改：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;short.panel.label:默认为TRUE，此时变量名不会显示&lt;/li&gt;
&lt;li&gt;panel.label: 通过自定义label来设置面板label,是一个list&lt;/li&gt;
&lt;li&gt;panel.labs.background: 控制面板背景，里面参数设置很多&lt;/li&gt;
&lt;li&gt;panel.labs.font: 设置字体&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;下面演示一下&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;#divide with &amp;quot;supp&amp;quot; vertical, &amp;quot;sode&amp;quot; horizontal
facet(p, facet.by = c(&amp;quot;supp&amp;quot;, &amp;quot;dose&amp;quot;),
      panel.labs = list(
        supp=c(&amp;quot;Orange Juice&amp;quot;, &amp;quot;Vitamin C&amp;quot;),
        dose=c(&amp;quot;D0.5&amp;quot;, &amp;quot;D1&amp;quot;, &amp;quot;D2&amp;quot;)),
      panel.labs.background = list(
        color=&amp;quot;steelblue&amp;quot;, 
        fill=&amp;quot;steelblue&amp;quot;,
        size=0.5),
      panel.labs.font = list(color=&amp;quot;white&amp;quot;),
      panel.labs.font.x = list(angle=45, color=&amp;quot;white&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/5.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;sessioninfo&#34;&gt;SessionInfo&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;sessionInfo()
## R version 3.4.1 (2017-06-30)
## Platform: x86_64-pc-linux-gnu (64-bit)
## Running under: Ubuntu 16.04.3 LTS
## 
## Matrix products: default
## BLAS: /usr/lib/atlas-base/atlas/libblas.so.3.0
## LAPACK: /usr/lib/atlas-base/atlas/liblapack.so.3.0
## 
## locale:
##  [1] LC_CTYPE=zh_CN.UTF-8       LC_NUMERIC=C              
##  [3] LC_TIME=zh_CN.UTF-8        LC_COLLATE=zh_CN.UTF-8    
##  [5] LC_MONETARY=zh_CN.UTF-8    LC_MESSAGES=zh_CN.UTF-8   
##  [7] LC_PAPER=zh_CN.UTF-8       LC_NAME=C                 
##  [9] LC_ADDRESS=C               LC_TELEPHONE=C            
## [11] LC_MEASUREMENT=zh_CN.UTF-8 LC_IDENTIFICATION=C       
## 
## attached base packages:
## [1] stats     graphics  grDevices utils     datasets  methods   base     
## 
## other attached packages:
## [1] ggpubr_0.1.5  magrittr_1.5  ggplot2_2.2.1
## 
## loaded via a namespace (and not attached):
##  [1] Rcpp_0.12.12     bindr_0.1        knitr_1.17       munsell_0.4.3   
##  [5] colorspace_1.3-2 R6_2.2.2         rlang_0.1.2      stringr_1.2.0   
##  [9] plyr_1.8.4       dplyr_0.7.3      tools_3.4.1      grid_3.4.1      
## [13] gtable_0.2.0     htmltools_0.3.6  yaml_2.1.14      lazyeval_0.2.0  
## [17] rprojroot_1.2    digest_0.6.12    assertthat_0.2.0 tibble_1.3.4    
## [21] bindrcpp_0.2     ggsci_2.7        reshape2_1.4.2   purrr_0.2.3     
## [25] glue_1.1.1       evaluate_0.10.1  rmarkdown_1.6    labeling_0.3    
## [29] stringi_1.1.5    compiler_3.4.1   scales_0.5.0     backports_1.1.0 
## [33] pkgconfig_2.0.1
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>ggpubr包学习笔记之轻松修改图形参数</title>
      <link>https://taoyan.netlify.app/post/2017-09-13-r-ggpubr%E5%8C%85%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%8B%E8%BD%BB%E6%9D%BE%E4%BF%AE%E6%94%B9%E5%9B%BE%E5%BD%A2%E5%8F%82%E6%95%B0/</link>
      <pubDate>Wed, 13 Sep 2017 21:13:14 -0500</pubDate>
      <guid>https://taoyan.netlify.app/post/2017-09-13-r-ggpubr%E5%8C%85%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%8B%E8%BD%BB%E6%9D%BE%E4%BF%AE%E6%94%B9%E5%9B%BE%E5%BD%A2%E5%8F%82%E6%95%B0/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/dm80Clb7Eh.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;简介&#34;&gt;简介&lt;/h2&gt;
&lt;p&gt;越学习包&lt;strong&gt;ggpubr&lt;/strong&gt;越感觉其功能强大，本文主要讲解一下如何修改图形参数，我们知道&lt;strong&gt;ggplot2&lt;/strong&gt;有着十分强大的绘图功能，但是其参数之复杂足以让人望而却步。&lt;strong&gt;ggpubr&lt;/strong&gt;提供的函数ggpar()可以十分轻松地让我们修改图形参数，并且可以无缝对接到ggplot图形中。ggpar()可以修改以下图形参数：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;图形标题，包括坐标轴标题以及图例标题&lt;/li&gt;
&lt;li&gt;图例的位置以及外观&lt;/li&gt;
&lt;li&gt;颜色必需的能修改&lt;/li&gt;
&lt;li&gt;坐标轴limits&lt;/li&gt;
&lt;li&gt;坐标转换&lt;/li&gt;
&lt;li&gt;坐标刻度&lt;/li&gt;
&lt;li&gt;主题&lt;/li&gt;
&lt;li&gt;翻转等&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;安装包&#34;&gt;安装包&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;#two ways to isntall the ggpubr package
install.packages(&amp;quot;ggpubr&amp;quot;)
#install the packages from the Github
devtools::install_github(&amp;quot;kassambara/ggpubr&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;绘图&#34;&gt;绘图&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;library(ggpubr)#load ggpubr
#basic plots
p &amp;lt;- ggboxplot(ToothGrowth, x=&amp;quot;dose&amp;quot;, y=&amp;quot;len&amp;quot;, color=&amp;quot;dose&amp;quot;)
p
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/7hKdEb1ehB.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#add grids by the function grids()
p+grids(linetype=&amp;quot;dashed&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/f77I1FIlbB.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#add panel borders lines by the function border()
p+border(&amp;quot;black&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/cGa2dj6AB8.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#change background color
p+bgcolor(&amp;quot;#BFD5E3&amp;quot;)+border(&amp;quot;#BFD5E3&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/jAIc0AjBi8.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;修改标题以及坐标轴标签&#34;&gt;修改标题以及坐标轴标签&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;p2 &amp;lt;- ggpar(p,
            title = &amp;quot;Box plot created with ggpubr&amp;quot;,
            subtitle = &amp;quot;Length by dose&amp;quot;,
            caption = &amp;quot;Source: ggpubr&amp;quot;,
            xlab = &amp;quot;Dose (mg)&amp;quot;,
            ylab = &amp;quot;Teeth length&amp;quot;,
            legend.title = &amp;quot;Dose (mg)&amp;quot;)
p2
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/5K7D23dIcC.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;修改标题以及标签的字体&#34;&gt;修改标题以及标签的字体&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;ggpar(p2, 
      font.title = c(14, &amp;quot;bold.italic&amp;quot;, &amp;quot;red&amp;quot;),
      font.subtitle = c(10, &amp;quot;orange&amp;quot;),
      font.caption = c(10, &amp;quot;orange&amp;quot;),
      font.x = c(14, &amp;quot;blue&amp;quot;),
      font.y = c(14, &amp;quot;#993333&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/dm80Clb7Eh.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;当然也可以直接用函数font()&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;p2+
  font(&amp;quot;title&amp;quot;, size = 14, color = &amp;quot;red&amp;quot;, face = &amp;quot;bold.italic&amp;quot;)+
  font(&amp;quot;subtitle&amp;quot;, size = 10, color = &amp;quot;orange&amp;quot;)+
  font(&amp;quot;caption&amp;quot;, size = 10, color = &amp;quot;orange&amp;quot;)+
  font(&amp;quot;xlab&amp;quot;, size = 12, color = &amp;quot;blue&amp;quot;)+
  font(&amp;quot;ylab&amp;quot;, size = 12, color = &amp;quot;#993333&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/6EHIKCbjdB.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;从上面可以看出我们可以一次性完成添加标题以及修改字体&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ggpar(p,
      title = &amp;quot;Plot of length \n by dose&amp;quot;,
      xlab = &amp;quot;Dose (mg)&amp;quot;,
      legend.title = &amp;quot;Dose (mg)&amp;quot;,
      font.title = c(14, &amp;quot;bold.italic&amp;quot;, &amp;quot;red&amp;quot;),
      font.x = c(14, &amp;quot;bold&amp;quot;, &amp;quot;#2E9FDF&amp;quot;),
      font.y = c(14, &amp;quot;bold&amp;quot;, &amp;quot;#E7B800&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/K5Hh142DDJ.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;修改图例位置与外观&#34;&gt;修改图例位置与外观&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;ggpar(p,
      legend = &amp;quot;right&amp;quot;, legend.title = &amp;quot;Dose (mg)&amp;quot;)+
  font(&amp;quot;legend.title&amp;quot;, color=&amp;quot;blue&amp;quot;, face = &amp;quot;bold&amp;quot;)+
  font(&amp;quot;legend.text&amp;quot;, color = &amp;quot;red&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/66Fl04A1Eg.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;颜色修改&#34;&gt;颜色修改&lt;/h2&gt;
&lt;p&gt;ggpar()中有一个参数palette，即调色板，除了可以我们自定义颜色外，还可以调用RColorBrewer中的调色板以及包&lt;strong&gt;ggsci&lt;/strong&gt;中的专门用于学术杂志的配色。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#use custom color palette
ggpar(p, palette = c(&amp;quot;#00AFBB&amp;quot;, &amp;quot;#E7B800&amp;quot;, &amp;quot;#FC4E07&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/j04LBcgCFf.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#use the RColorBrewer palette
ggpar(p, palette = &amp;quot;Dark2&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/gg16gmeE3D.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ggpar(p, palette = &amp;quot;grey&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/3h1K0f5aaK.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#use the ggsci palette
ggpar(p, palette = &amp;quot;npg&amp;quot;)#nature
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/13fcD9GfDC.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;当然也可以直接用&lt;strong&gt;ggpubr&lt;/strong&gt;中的函数color_palette()以及fill_palette()&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#jco color palette
p+color_palette(&amp;quot;jco&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/aD2IK0b75D.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#custom color
p+color_palette(c(&amp;quot;#00AFBB&amp;quot;, &amp;quot;#E7B800&amp;quot;, &amp;quot;#FC4E07&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/Jj9BG7J24h.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;颜色梯度&#34;&gt;颜色梯度&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;ggpubr&lt;/strong&gt;提供了两个函数用来处理颜色梯度：gradient_color()和gradient_fill()
通过一个例子来看如何运作&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#first create a scatter plot
p3 &amp;lt;- ggscatter(mtcars, x=&amp;quot;wt&amp;quot;, y=&amp;quot;mpg&amp;quot;, color=&amp;quot;mpg&amp;quot;, size = 2)
#change the gradient color
#use one custom color
p3+gradient_color(&amp;quot;red&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/ah3ed5b1Ai.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#use two colors
p3+gradient_color(c(&amp;quot;blue&amp;quot;, &amp;quot;red&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/1H7KBAdKLd.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#three colors
p3+gradient_color(c(&amp;quot;blue&amp;quot;, &amp;quot;white&amp;quot;, &amp;quot;red&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/kCaHdmcG6i.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#use the RColorBrewer palette
p3+gradient_color(&amp;quot;RdYlBu&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/FHKlGj4H8F.png?raw=true&#34; alt=&#34;&#34;&gt;
gradient_fill()用法也一样，不过是填充，这里就不演示了。&lt;/p&gt;
&lt;h2 id=&#34;修改坐标轴limitsscales&#34;&gt;修改坐标轴limits、scales&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;#change y axis limits
ggpar(p, ylim = c(0, 50))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/CFamb4cglg.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#change y axis cale to log2
ggpar(p, yscale = &amp;quot;log2&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/Deh1KddGKj.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#format  axis scale
ggpar(p, yscale = &amp;quot;log2&amp;quot;, format.scale = TRUE)#format.scale=TRUE说明y轴刻度也会scale
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/IgF4D3LFiL.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#也可以直接用yscale()
p+yscale(&amp;quot;log2&amp;quot;, .format = TRUE)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/lfk8D0i00d.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;自定义坐标轴标签及刻度&#34;&gt;自定义坐标轴标签及刻度&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;#change the font of x and y axis texts
#rotate x and y texts
p+
  font(&amp;quot;xy.text&amp;quot;, size = 12, color = &amp;quot;blue&amp;quot;, face = &amp;quot;bold&amp;quot;)+
  rotate_x_text(45)+
  rotate_y_text(45)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/DhAlF966Cb.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#remove ticks and axis texts
p+rremove(&amp;quot;ticks&amp;quot;)+
  rremove(&amp;quot;axis.text&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/c6cHkJj7Hk.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;修改主题&#34;&gt;修改主题&lt;/h2&gt;
&lt;p&gt;默认主题为theme_pubr(),可以调用包&lt;strong&gt;ggthemes&lt;/strong&gt;里面的主题&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;library(ggthemes)
p+ggthemes::theme_economist()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/k49JlfLfDg.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;移除ggplot组件&#34;&gt;移除ggplot组件&lt;/h2&gt;
&lt;p&gt;通过ggpubr::rremove()可以移除组件：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;p &amp;lt;- ggboxplot(ToothGrowth, x=&amp;quot;dose&amp;quot;, y=&amp;quot;len&amp;quot;, ggtheme = theme_igray())
p
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/G53edij9j4.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;p+rremove(&amp;quot;grid&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/CciAa0JEhH.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;sessioninfo&#34;&gt;SessionInfo&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;sessionInfo()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## R version 3.4.1 (2017-06-30)
## Platform: x86_64-pc-linux-gnu (64-bit)
## Running under: Ubuntu 16.04.3 LTS
## 
## Matrix products: default
## BLAS: /usr/lib/atlas-base/atlas/libblas.so.3.0
## LAPACK: /usr/lib/atlas-base/atlas/liblapack.so.3.0
## 
## locale:
##  [1] LC_CTYPE=zh_CN.UTF-8       LC_NUMERIC=C              
##  [3] LC_TIME=zh_CN.UTF-8        LC_COLLATE=zh_CN.UTF-8    
##  [5] LC_MONETARY=zh_CN.UTF-8    LC_MESSAGES=zh_CN.UTF-8   
##  [7] LC_PAPER=zh_CN.UTF-8       LC_NAME=C                 
##  [9] LC_ADDRESS=C               LC_TELEPHONE=C            
## [11] LC_MEASUREMENT=zh_CN.UTF-8 LC_IDENTIFICATION=C       
## 
## attached base packages:
## [1] stats     graphics  grDevices utils     datasets  methods   base     
## 
## other attached packages:
## [1] ggthemes_3.4.0 ggpubr_0.1.5   magrittr_1.5   ggplot2_2.2.1 
## 
## loaded via a namespace (and not attached):
##  [1] Rcpp_0.12.12       bindr_0.1          knitr_1.17        
##  [4] munsell_0.4.3      colorspace_1.3-2   R6_2.2.2          
##  [7] rlang_0.1.2        stringr_1.2.0      plyr_1.8.4        
## [10] dplyr_0.7.3        tools_3.4.1        grid_3.4.1        
## [13] gtable_0.2.0       htmltools_0.3.6    yaml_2.1.14       
## [16] lazyeval_0.2.0     rprojroot_1.2      digest_0.6.12     
## [19] assertthat_0.2.0   tibble_1.3.4       bindrcpp_0.2      
## [22] ggsci_2.7          RColorBrewer_1.1-2 purrr_0.2.3       
## [25] glue_1.1.1         evaluate_0.10.1    rmarkdown_1.6     
## [28] labeling_0.3       stringi_1.1.5      compiler_3.4.1    
## [31] scales_0.5.0       backports_1.1.0    pkgconfig_2.0.1
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>R语言可视化学习笔记之基因组数据可视化</title>
      <link>https://taoyan.netlify.app/post/2017-09-10.r%E8%AF%AD%E8%A8%80%E5%8F%AF%E8%A7%86%E5%8C%96%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%8B%E5%9F%BA%E5%9B%A0%E7%BB%84%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96/</link>
      <pubDate>Sun, 10 Sep 2017 12:34:08 -0500</pubDate>
      <guid>https://taoyan.netlify.app/post/2017-09-10.r%E8%AF%AD%E8%A8%80%E5%8F%AF%E8%A7%86%E5%8C%96%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%8B%E5%9F%BA%E5%9B%A0%E7%BB%84%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819142235.png&#34; alt=&#34;&#34;&gt;
本文主要利用&lt;strong&gt;ggpubr&lt;/strong&gt;包来探索基因组数据,主要是可视化TCGA基因组数据的基因表达谱。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;library(ggpubr)#加载包
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;TCGA是一个包含大量癌症数据的数据库，由Marcin Kosinski创建的RTCGA包可以让我们很方便的获取这些数据。主要有三个包：RTCGA、RTCGA.clininal、RTCGA.mRNA。安装方法如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#Load the bioconductor installersource
(&amp;quot;https://bioconductor.org/biocLite.R&amp;quot;&amp;quot;)
#设置镜像，这里我们选择中科大的镜像options(BioC_mirror=&amp;quot;https://ustc.edu.cn/bioc&amp;quot;)
#下载包
biocLite(&amp;quot;RTCGA&amp;quot;)
biocLite(&amp;quot;RTCGA.clininal&amp;quot;)
biocLite(&amp;quot;RTCGA.mRNA&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;library(RTCGA)
#查看每一种癌症的数据集
infoTCGA()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819142259.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;RTCGA&lt;/strong&gt;包里的函数&lt;code&gt;expressionTCGA()&lt;/code&gt;可以十分方便地从不同数据集中提取基因的表达值，下面我们将从三个数据集BRCA(乳腺癌)、OV(卵巢癌)、LUSC(肺癌)中提取五个基因的表达值。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;library(RTCGA)
library(RTCGA.mRNA)
expr &amp;lt;- expressionsTCGA(BRCA.mRNA, OV.mRNA, LUSC.mRNA, 
extract.cols = c(&amp;quot;GATA3&amp;quot;, &amp;quot;PTEN&amp;quot;, &amp;quot;XBP1&amp;quot;, &amp;quot;ESR1&amp;quot;, &amp;quot;MUC1&amp;quot;))
expr
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819142313.png&#34; alt=&#34;&#34;&gt;
查看每个数据集中的样品数量&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;nb_samples &amp;lt;- table(expr$dataset)nb_samples

## 
## BRCA.mRNA  LUSC.mRNA  OV.mRNA 
##    590        154      561
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;为了方便，我们将部分数据集名称简化&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;expr$dataset &amp;lt;- gsub(pattern = &amp;quot;.mRNA&amp;quot;, replacement = &amp;quot;&amp;quot;, expr$dataset)
expr$bcr_patient_barcode &amp;lt;- paste0(expr$dataset, c(1:590, 1:561, 1:154))
expr
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819142333.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;接下来绘制图形：
1、箱线图&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;library(ggpubr)
ggboxplot(expr, x=&amp;quot;dataset&amp;quot;, y=&amp;quot;GATA3&amp;quot;, title=&amp;quot;GATA3&amp;quot;, ylab = &amp;quot;Expression&amp;quot;, 
color = &amp;quot;dataset&amp;quot;, palette = &amp;quot;jco&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819142349.png&#34; alt=&#34;&#34;&gt;
我们可以一次性绘制多个基因，然后一一查看，而不用每次写代码：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#Creat a list of plots
p &amp;lt;- ggboxplot(expr, x=&amp;quot;dataset&amp;quot;, y=c(&amp;quot;GATA3&amp;quot;, &amp;quot;PTEN&amp;quot;, &amp;quot;XBP1&amp;quot;, &amp;quot;ESR1&amp;quot;, &amp;quot;MUC1&amp;quot;),
title = c(&amp;quot;GATA3&amp;quot;, &amp;quot;PTEN&amp;quot;, &amp;quot;XBP1&amp;quot;, &amp;quot;ESR1&amp;quot;, &amp;quot;MUC1&amp;quot;), 
ylab = &amp;quot;EXpression&amp;quot;, color = &amp;quot;dataset&amp;quot;, palette = &amp;quot;jco&amp;quot;)
#接下来一一查看每个plot
p$GATA3
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819142404.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;p$PTEN
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819142417.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;p$XBP1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819142429.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;p$ESR1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819142440.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;p$MUC1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819142458.png&#34; alt=&#34;&#34;&gt;
当一次性绘制多个基因时，xlab,ylab,title也可以是一个跟y等长的向量。 接下来就是添加p-value以及显著性了&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;my_comparisons &amp;lt;- list(c(&amp;quot;BRCA&amp;quot;, &amp;quot;OV&amp;quot;), c(&amp;quot;OV&amp;quot;, &amp;quot;LUSC&amp;quot;))
ggboxplot(expr, x=&amp;quot;dataset&amp;quot;, y=&amp;quot;GATA3&amp;quot;, title = &amp;quot;GATA3&amp;quot;, ylab = &amp;quot;Expression&amp;quot;, 
color = &amp;quot;dataset&amp;quot;, palette = &amp;quot;jco&amp;quot;)+ stat_compare_means(comparisons = my_comparisons)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819142518.png&#34; alt=&#34;&#34;&gt;
也可以查看每个类型中每一个基因的比较：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;compare_means(c(GATA3, PTEN, XBP1)~dataset, data = expr)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819142529.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;可以通过select以及remove来决定比较那几个类型，比如这里我们只比较BRCA和OV&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ggboxplot(expr, x=&amp;quot;dataset&amp;quot;, y=&amp;quot;GATA3&amp;quot;, title = &amp;quot;GATA3&amp;quot;, ylab = &amp;quot;Expression&amp;quot;, 
color = &amp;quot;dataset&amp;quot;, palette = &amp;quot;jco&amp;quot;, select = c(&amp;quot;BRCA&amp;quot;, &amp;quot;OV&amp;quot;))#通过select选择
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819142541.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ggboxplot(expr, x=&amp;quot;dataset&amp;quot;, y=&amp;quot;GATA3&amp;quot;, title = &amp;quot;GATA3&amp;quot;, ylab = &amp;quot;Expression&amp;quot;, 
color = &amp;quot;dataset&amp;quot;, palette = &amp;quot;jco&amp;quot;, remove = &amp;quot;BRCA&amp;quot;)#通过remove选择
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819142559.png&#34; alt=&#34;&#34;&gt;
通过order来改变各类型在x轴上的顺序&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ggboxplot(expr, x=&amp;quot;dataset&amp;quot;, y=&amp;quot;GATA3&amp;quot;, title = &amp;quot;GATA3&amp;quot;, ylab = &amp;quot;Expression&amp;quot;, 
color = &amp;quot;dataset&amp;quot;, palette = &amp;quot;jco&amp;quot;, order = c(&amp;quot;LUSC&amp;quot;, &amp;quot;OV&amp;quot;, &amp;quot;BRCA&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819142610.png&#34; alt=&#34;&#34;&gt;
通过rotate=TRUE来变换坐标轴&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ggboxplot(expr, x=&amp;quot;dataset&amp;quot;, y=&amp;quot;GATA3&amp;quot;, title = &amp;quot;GATA3&amp;quot;, ylab = &amp;quot;Expression&amp;quot;, 
color = &amp;quot;dataset&amp;quot;, palette = &amp;quot;jco&amp;quot;, rotate=TRUE)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819142622.png&#34; alt=&#34;&#34;&gt;
通过combine=TRUE来进行分面（类似于facet）&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ggboxplot(expr, x=&amp;quot;dataset&amp;quot;, y=c(&amp;quot;GATA3&amp;quot;, &amp;quot;PTEN&amp;quot;, &amp;quot;XBP1&amp;quot;), ylab = &amp;quot;Expression&amp;quot;, 
color = &amp;quot;dataset&amp;quot;, palette = &amp;quot;jco&amp;quot;, combine = TRUE)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819142638.png&#34; alt=&#34;&#34;&gt;
通过merge=TRUE或者merge=“axis”将三个类型的plot绘制在一个panel中&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ggboxplot(expr, x=&amp;quot;dataset&amp;quot;, y=c(&amp;quot;GATA3&amp;quot;, &amp;quot;PTEN&amp;quot;, &amp;quot;XBP1&amp;quot;), ylab = &amp;quot;Expression&amp;quot;,
color = &amp;quot;dataset&amp;quot;, palette = &amp;quot;jco&amp;quot;, merge = TRUE)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819142650.png&#34; alt=&#34;&#34;&gt;
通过merge=flip利用不同癌症类型进行group&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ggboxplot(expr, x=&amp;quot;dataset&amp;quot;, y=c(&amp;quot;GATA3&amp;quot;, &amp;quot;PTEN&amp;quot;, &amp;quot;XBP1&amp;quot;), 
ylab = &amp;quot;Expression&amp;quot;, palette = &amp;quot;jco&amp;quot;, merge = &amp;quot;flip&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819142704.png&#34; alt=&#34;&#34;&gt;
通过add=jitter增加抖动点&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ggboxplot(expr, x=&amp;quot;dataset&amp;quot;, y=c(&amp;quot;GATA3&amp;quot;, &amp;quot;PTEN&amp;quot;, &amp;quot;XBP1&amp;quot;), combine = TRUE,
color = &amp;quot;dataset&amp;quot;, palette = &amp;quot;jco&amp;quot;, ylab = &amp;quot;Expression&amp;quot;, add = &amp;quot;jitter&amp;quot;, 
add.params = list(size=0.1, jitter=0.2))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819142716.png&#34; alt=&#34;&#34;&gt;
通过add=dotplot增加dotplot&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ggboxplot(expr, x=&amp;quot;dataset&amp;quot;, y=c(&amp;quot;GATA3&amp;quot;, &amp;quot;PTEN&amp;quot;, &amp;quot;XBP1&amp;quot;), 
combine = TRUE, color = &amp;quot;dataset&amp;quot;, palette = &amp;quot;jco&amp;quot;, ylab = &amp;quot;Expression&amp;quot;, 
add = &amp;quot;dotplot&amp;quot;, add.params = list(binwidth=0.1, dotsize=0.2))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819142731.png&#34; alt=&#34;&#34;&gt;
很多时候我们很像知道箱线图两端的数据，我们可以通过label来进行展示&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ggboxplot(expr, x=&amp;quot;dataset&amp;quot;, y=c(&amp;quot;GATA3&amp;quot;, &amp;quot;PTEN&amp;quot;, &amp;quot;XBP1&amp;quot;), combine = TRUE,
color = &amp;quot;dataset&amp;quot;, palette = &amp;quot;jco&amp;quot;, ylab = &amp;quot;Expression&amp;quot;, add = &amp;quot;jitter&amp;quot;, 
add.params = list(size=0.1, jitter=0.2), label = &amp;quot;bcr_patient_barcode&amp;quot;, 
label.select = list(top.up=2, top.down=2), 
font.label = list(size=9, face=&amp;quot;italic&amp;quot;), repel = TRUE)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819142743.png&#34; alt=&#34;&#34;&gt;
2、小提琴图&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ggviolin(expr,x=&amp;quot;dataset&amp;quot;, y=c(&amp;quot;GATA3&amp;quot;, &amp;quot;PTEN&amp;quot;, &amp;quot;XBP1&amp;quot;), combine = TRUE, 
color = &amp;quot;dataset&amp;quot;, palette = &amp;quot;jco&amp;quot;, ylab = &amp;quot;Expression&amp;quot;, add = &amp;quot;boxplot&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819142756.png&#34; alt=&#34;&#34;&gt;
通过修改add来更改添加小提琴图里的图形&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ggviolin(expr,x=&amp;quot;dataset&amp;quot;, y=c(&amp;quot;GATA3&amp;quot;, &amp;quot;PTEN&amp;quot;, &amp;quot;XBP1&amp;quot;), combine = TRUE, 
color = &amp;quot;dataset&amp;quot;, palette = &amp;quot;jco&amp;quot;, ylab = &amp;quot;Expression&amp;quot;, add = &amp;quot;median_iqr&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819142817.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;add有好多选项可以选择：“mean”, “mean_se”, “mean_sd”, “mean_ci”, “mean_range”, “median”, “median_iqr”, “median_mad”, “median_range”.有兴趣的可以自己试试。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;3、带状图&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ggstripchart(expr, x=&amp;quot;dataset&amp;quot;, y=c(&amp;quot;GATA3&amp;quot;, &amp;quot;PTEN&amp;quot;, &amp;quot;XBP1&amp;quot;), combine = TRUE,
color = &amp;quot;dataset&amp;quot;, palette = &amp;quot;jco&amp;quot;, size = 0.1, jitter=0.2, ylab = &amp;quot;Expression&amp;quot;, 
add = &amp;quot;median_iqr&amp;quot;, add.params = list(color=&amp;quot;red&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819142835.png&#34; alt=&#34;&#34;&gt;
4、dotplot&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ggdotplot(expr, x=&amp;quot;dataset&amp;quot;, y=c(&amp;quot;GATA3&amp;quot;, &amp;quot;PTEN&amp;quot;, &amp;quot;XBP1&amp;quot;), combine = TRUE, 
color = &amp;quot;dataset&amp;quot;, palette = &amp;quot;jco&amp;quot;, fill = &amp;quot;white&amp;quot;, binwidth = 0.1, ylab = &amp;quot;Expression&amp;quot;,
add = &amp;quot;median_iqr&amp;quot;, add.params = list(size=0.9))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819142847.png&#34; alt=&#34;&#34;&gt;
5、密度图&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ggdensity(expr, x=c(&amp;quot;GATA3&amp;quot;, &amp;quot;PTEN&amp;quot;, &amp;quot;XBP1&amp;quot;), y=&amp;quot;..density..&amp;quot;, 
combine = TRUE, xlab = &amp;quot;Expression&amp;quot;, add = &amp;quot;median&amp;quot;, rug = TRUE)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819142910.png&#34; alt=&#34;&#34;&gt;
将dataset映射给颜色&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ggdensity(expr, x=c(&amp;quot;GATA3&amp;quot;, &amp;quot;PTEN&amp;quot;, &amp;quot;XBP1&amp;quot;), y=&amp;quot;..density..&amp;quot;, combine = TRUE,
xlab = &amp;quot;Expression&amp;quot;, add = &amp;quot;median&amp;quot;, rug = TRUE, color = &amp;quot;dataset&amp;quot;, 
fill = &amp;quot;dataset&amp;quot;, palette = &amp;quot;jco&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819142922.png&#34; alt=&#34;&#34;&gt;
将三幅图整合进一个panel中，并对y轴进行..count..，而不是..density..&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ggdensity(expr, x=c(&amp;quot;GATA3&amp;quot;, &amp;quot;PTEN&amp;quot;, &amp;quot;XBP1&amp;quot;), y=&amp;quot;..count..&amp;quot;, xlab = &amp;quot;Expression&amp;quot;,
add = &amp;quot;median&amp;quot;, rug = TRUE, palette = &amp;quot;jco&amp;quot;)
## $GATA3
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819143008.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;## ## $PTEN
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819143023.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;## ## $XBP1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819143041.png&#34; alt=&#34;&#34;&gt;
颜色映射，将x轴变量映射给颜色&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ggdensity(expr, x=c(&amp;quot;GATA3&amp;quot;, &amp;quot;PTEN&amp;quot;, &amp;quot;XBP1&amp;quot;), y=&amp;quot;..count..&amp;quot;, color = &amp;quot;.x.&amp;quot;, 
fill = &amp;quot;.x.&amp;quot;, merge = TRUE, xlab = &amp;quot;Expression&amp;quot;, add = &amp;quot;median&amp;quot;, rug = TRUE, palette = &amp;quot;jco&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819143107.png&#34; alt=&#34;&#34;&gt;
按dataset进行分面&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ggdensity(expr, x=c(&amp;quot;GATA3&amp;quot;, &amp;quot;PTEN&amp;quot;, &amp;quot;XBP1&amp;quot;), y=&amp;quot;..count..&amp;quot;, color = &amp;quot;.x.&amp;quot;, 
fill = &amp;quot;.x.&amp;quot;, merge = TRUE, xlab = &amp;quot;Expression&amp;quot;, add = &amp;quot;median&amp;quot;, 
rug = TRUE, palette = &amp;quot;jco&amp;quot;, facet.by = &amp;quot;dataset&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819143119.png&#34; alt=&#34;&#34;&gt;
6、直方图&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;gghistogram(expr, x=c(&amp;quot;GATA3&amp;quot;, &amp;quot;PTEN&amp;quot;, &amp;quot;XBP1&amp;quot;), y=&amp;quot;..density..&amp;quot;, 
xlab = &amp;quot;Expression&amp;quot;, add = &amp;quot;median&amp;quot;, rug = TRUE)
## $GATA3
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819143132.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;## ## $PTEN
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819143144.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;## ## $XBP1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819143154.png&#34; alt=&#34;&#34;&gt;
将dataset映射给颜色&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;gghistogram(expr, x=c(&amp;quot;GATA3&amp;quot;, &amp;quot;PTEN&amp;quot;, &amp;quot;XBP1&amp;quot;), y=&amp;quot;..density..&amp;quot;, xlab = &amp;quot;Expression&amp;quot;, 
add = &amp;quot;median&amp;quot;, rug = TRUE, color = &amp;quot;dataset&amp;quot;, fill = &amp;quot;dataset&amp;quot;, palette = &amp;quot;jco&amp;quot;)
## $GATA3
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819143208.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;## ## $PTEN
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819143228.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;## ## $XBP1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819143239.png&#34; alt=&#34;&#34;&gt;
后面还有一些将几幅图整合在一个panel以及分面等大同小异就不讲了。
7、Q-Q图&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ggqqplot(expr, x=c(&amp;quot;GATA3&amp;quot;, &amp;quot;PTEN&amp;quot;, &amp;quot;XBP1&amp;quot;), combine = TRUE, size = 0.5)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819143251.png&#34; alt=&#34;&#34;&gt;
颜色映射&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ggqqplot(expr, x=c(&amp;quot;GATA3&amp;quot;, &amp;quot;PTEN&amp;quot;, &amp;quot;XBP1&amp;quot;), combine = TRUE, size = 0.5, 
color = &amp;quot;dataset&amp;quot;, palette = &amp;quot;jco&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819143302.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;#sessionInfo&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sessionInfo()
## R version 3.4.0 (2017-04-21)
## Platform: x86_64-pc-linux-gnu (64-bit)
## Running under: Ubuntu 16.04.2 LTS
## 
## Matrix products: default
## BLAS: /usr/lib/libblas/libblas.so.3.6.0
## LAPACK: /usr/lib/lapack/liblapack.so.3.6.0
## 
## locale:
## [1] LC_CTYPE=en_US.UTF-8 LC_NUMERIC=C 
## [3] LC_TIME=zh_CN.UTF-8 LC_COLLATE=en_US.UTF-8 
## [5] LC_MONETARY=zh_CN.UTF-8 LC_MESSAGES=en_US.UTF-8
## [7] LC_PAPER=zh_CN.UTF-8 LC_NAME=C 
## [9] LC_ADDRESS=C LC_TELEPHONE=C 
## [11] LC_MEASUREMENT=zh_CN.UTF-8 LC_IDENTIFICATION=C 
## 
## attached base packages:
## [1] stats graphics grDevices utils datasets methods base 
## 
## other attached packages:
## [1] bindrcpp_0.2 RTCGA.mRNA_1.4.0 RTCGA_1.6.0 ggpubr_0.1.3 
## [5] magrittr_1.5 ggplot2_2.2.1 
## 
## loaded via a namespace (and not attached):
## [1] zoo_1.8-0 reshape2_1.4.2 purrr_0.2.2.2 
## [4] splines_3.4.0 ggthemes_3.4.0 lattice_0.20-35 
## [7] colorspace_1.3-2 htmltools_0.3.6 viridisLite_0.2.0
## [10] yaml_2.1.14 survival_2.41-3 XML_3.98-1.9 
## [13] survMisc_0.5.4 rlang_0.1.1 foreign_0.8-68 
## [16] glue_1.1.0 bindr_0.1 plyr_1.8.4 
## [19] stringr_1.2.0 ggsignif_0.2.0 munsell_0.4.3 
## [22] gtable_0.2.0 ggsci_2.7 rvest_0.3.2 
## [25] psych_1.7.5 evaluate_0.10 labeling_0.3 
## [28] knitr_1.16 parallel_3.4.0 broom_0.4.2 
## [31] Rcpp_0.12.11 xtable_1.8-2 scales_0.4.1
## [34] backports_1.1.0 cmprsk_2.2-7 km.ci_0.5-2 
## [37] gridExtra_2.2.1 mnormt_1.5-5 digest_0.6.12 
## [40] stringi_1.1.5 ggrepel_0.6.5 dplyr_0.7.0 
## [43] KMsurv_0.1-5 grid_3.4.0 rprojroot_1.2 
## [46] tools_3.4.0 lazyeval_0.2.0 tibble_1.3.3 
## [49] tidyr_0.6.3 Matrix_1.2-10 data.table_1.10.4
## [52] xml2_1.1.1 survminer_0.4.0 assertthat_0.2.0 
## [55] rmarkdown_1.6 httr_1.2.1 viridis_0.4.0 
## [58] R6_2.2.2 nlme_3.1-131 compiler_3.4.0
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>ggplot2学习笔记之图形排列</title>
      <link>https://taoyan.netlify.app/post/2017-08-24.ggplot2%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%8B%E5%9B%BE%E5%BD%A2%E6%8E%92%E5%88%97/</link>
      <pubDate>Thu, 24 Aug 2017 12:34:08 -0500</pubDate>
      <guid>https://taoyan.netlify.app/post/2017-08-24.ggplot2%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%8B%E5%9B%BE%E5%BD%A2%E6%8E%92%E5%88%97/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819143351.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;R语言基本绘图函数中可以利用par()以及layout()来进行图形排列，但是这两个函数对于ggplot图则不太适用，本文主要讲解如何对多ggplot图形多页面进行排列。主要讲解如何利用包gridExtra、cowplot以及ggpubr中的函数进行图形排列。&lt;/p&gt;
&lt;h2 id=&#34;绘制图形&#34;&gt;绘制图形&lt;/h2&gt;
&lt;hr&gt;
&lt;pre&gt;&lt;code&gt;#load packages
library(gridExtra)
library(cowplot)
library(ggpubr)
#dataset ToothGrowth and mtcars
mtcars$name &amp;lt;- rownames(mtcars)
mtcars$cyl &amp;lt;- as.factor(mtcars$cyl)
head(mtcars[, c(&amp;quot;name&amp;quot;, &amp;quot;wt&amp;quot;,&amp;quot;mpg&amp;quot;, &amp;quot;cyl&amp;quot;)])
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819143411.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#First let&#39;s create some plots
#Box plot(bxp)
bxp &amp;lt;- ggboxplot(ToothGrowth, x=&amp;quot;dose&amp;quot;, y=&amp;quot;len&amp;quot;, color = &amp;quot;dose&amp;quot;, palette = &amp;quot;jco&amp;quot;)
#Dot plot(dp)
dp &amp;lt;- ggdotplot(ToothGrowth, x=&amp;quot;dose&amp;quot;, y=&amp;quot;len&amp;quot;, color = &amp;quot;dose&amp;quot;, palette = &amp;quot;jco&amp;quot;, binwidth = 1)
#An ordered Bar plot(bp)
bp &amp;lt;- ggbarplot(mtcars, x=&amp;quot;name&amp;quot;, y=&amp;quot;mpg&amp;quot;, fill=&amp;quot;cyl&amp;quot;, #change fill color by cyl 
color=&amp;quot;white&amp;quot;, #Set bar border colors to white 
palette = &amp;quot;jco&amp;quot;, #jco jourbal color palette 
sort.val = &amp;quot;asc&amp;quot;, #Sort the value in ascending order 
sort.by.groups = TRUE, #Sort inside each group 
x.text.angle=90 #Rotate vertically x axis texts )
bp+font(&amp;quot;x.text&amp;quot;, size = 8)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819143425.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#Scatter plots(sp)
sp &amp;lt;- ggscatter(mtcars, x=&amp;quot;wt&amp;quot;, y=&amp;quot;mpg&amp;quot;, add = &amp;quot;reg.line&amp;quot;, #Add regression line 
conf.int = TRUE, #Add confidence interval 
color = &amp;quot;cyl&amp;quot;, palette = &amp;quot;jco&amp;quot;,#Color by group cyl 
shape = &amp;quot;cyl&amp;quot; #Change point shape by groups cyl 
)+ 
stat_cor(aes(color=cyl), label.x = 3) #Add correlation coefficientsp
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819143437.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;图形排列&#34;&gt;图形排列&lt;/h2&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;多幅图形排列于一面&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;ggpubr::ggarrange()&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;ggarrange(bxp, dp, bp+rremove(&amp;quot;x.text&amp;quot;), labels = c(&amp;quot;A&amp;quot;, &amp;quot;B&amp;quot;, &amp;quot;C&amp;quot;), ncol = 2, nrow = 2)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819143450.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;cowplot::plot.grid()&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;plot_grid(bxp, dp, bp+rremove(&amp;quot;x.text&amp;quot;), labels = c(&amp;quot;A&amp;quot;, &amp;quot;B&amp;quot;, &amp;quot;C&amp;quot;), ncol = 2, nrow = 2)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819143501.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;gridExtra::grid.arrange()&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;grid.arrange(bxp, dp, bp+rremove(&amp;quot;x.text&amp;quot;), ncol=2, nrow=2)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819143516.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;排列图形注释&#34;&gt;排列图形注释&lt;/h2&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;ggpubr::annotate_figure()&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;figure &amp;lt;- ggarrange(sp, bp+font(&amp;quot;x.text&amp;quot;, size = 10), ncol = 1, nrow = 2)
annotate_figure(figure, top=text_grob(&amp;quot;Visualizing mpg&amp;quot;, color = &amp;quot;red&amp;quot;, 
face = &amp;quot;bold&amp;quot;, size=14), bottom = text_grob(&amp;quot;Data source:\n mtcars data set&amp;quot;, 
color = &amp;quot;blue&amp;quot;, hjust = 1, x=1, face = &amp;quot;italic&amp;quot;, size=10), left = text_grob(&amp;quot;Figure arranged using ggpubr&amp;quot;, color = &amp;quot;green&amp;quot;, rot = 90), 
right = &amp;quot;I&#39;m done, thanks :-)!&amp;quot;, fig.lab = &amp;quot;Figure 1&amp;quot;, fig.lab.face = &amp;quot;bold&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819143530.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;绘图面板对齐&#34;&gt;绘图面板对齐&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;绘制生存曲线&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;library(survival)
head(colon[, c(1:4)])
#Fit survival curves
fit &amp;lt;- survfit(Surv(time, status)~adhere, data = colon)
library(survminer)
ggsurv &amp;lt;- ggsurvplot(fit, data = colon, palette = &amp;quot;jco&amp;quot;, #jco palette 
pval = TRUE, pval.coord=c(500, 0.4), #Add p-value 
risk.table = TRUE #Add risk table)
names(ggsurv)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;plot&amp;quot; &amp;quot;table&amp;quot; &amp;quot;data.survplot&amp;quot; &amp;quot;data.survtable&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;ggsurv是一个包含两部分的list&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;plot：生存曲线&lt;/li&gt;
&lt;li&gt;table：风险表&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;可以用ggarrange()进行排列这两者&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ggarrange(ggsurv$plot, ggsurv$table, heights = c(2, 0.7), ncol = 1, nrow = 2)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819143545.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;上图中的坐标轴没有对齐，可以通过参数align来设置&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;ggarrange(ggsurv$plot, ggsurv$table, heights = c(2, 0.7), ncol = 1, nrow = 2, align = &amp;quot;v&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819143601.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;改变排列图的行列&#34;&gt;改变排列图的行列&lt;/h2&gt;
&lt;hr&gt;
&lt;p&gt;设置面板为两行两列，其中sp占据第一行的两列，bxp以及dp置于第二行的两列&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ggarrange(sp, #First row with scatter plot(sp) 
ggarrange(bxp, dp, ncol = 2, labels = c(&amp;quot;B&amp;quot;,&amp;quot;C&amp;quot;)),#Second row with box and dot plot 
nrow = 2, labels = &amp;quot;A&amp;quot; #Labels of the scatter plot)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819143613.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;r包cowplot&#34;&gt;R包cowplot&lt;/h2&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;cowplot::ggdraw()可以将图形置于特定位置, ggdraw()首先会初始化一个绘图面板， 接下来draw_plot()则是将图形绘制于初始化的绘图面板中，通过参数设置可以将图形置于特定位置。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;draw_plot(plot, x=0, y=0, width=1, height=1)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;其中：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;plot:将要放置的图形&lt;/li&gt;
&lt;li&gt;x,y:控制图形位置&lt;/li&gt;
&lt;li&gt;width,height:图形的宽度和高度&lt;/li&gt;
&lt;li&gt;draw_plot_label():为图形添加标签&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;draw_plot_label(label, x=0, y=1, size=16, ...)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;其中：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;label:标签&lt;/li&gt;
&lt;li&gt;x,y:控制标签位置&lt;/li&gt;
&lt;li&gt;size:标签字体大小&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;下面通过一个例子来讲解如何将多个图形放置在特定的位置。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ggdraw()+ draw_plot(bxp, x=0, y=0.5, width=0.5, height = 0.5)+
draw_plot(dp, x=0.5, y=0.5, width = 0.5, height = 0.5)+ 
draw_plot(bp, x=0, y=0, width = 1.5, height = 0.5)+ 
draw_plot_label(label = c(&amp;quot;A&amp;quot;, &amp;quot;B&amp;quot;, &amp;quot;C&amp;quot;), size = 15, x=c(0, 0.5, 0), y=c(1, 1, 0.5))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819143628.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;r包gridextra&#34;&gt;R包gridExtra&lt;/h2&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;gridExtra::arrangeGrop()改变行列分布&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;下面将sp置于第一行并横跨两列，而bxp和dp分别分布于第二行两列&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;grid.arrange(sp, #First row with one plot spaning over 2 columns
arrangeGrob(bxp, dp, ncol = 2), #Second row with 2plots in 2 different columns 
nrow=2) #number of rows
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819143641.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;也可以通过函数grid.arrange中的layout_matrix来设置复杂的图形布局&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;grid.arrange(bp, #bar plot spaning two columns 
bxp, sp, #box plot amd scatter plot 
ncol=2, nrow=2, layout_matrix=rbind(c(1, 1), c(2, 3)))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819143652.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;要相对grid.arrange()以及arrangeGrob()的输出进行注释，首先要利用as_ggplot()将其转化为ggplot图形，进而利用函数draw_plot_label()对其进行注释。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;gt &amp;lt;- arrangeGrob(bp, bxp, sp, layout_matrix = rbind(c(1,1),c(2, 3)))
p &amp;lt;- as_ggplot(gt)+ 
draw_plot_label(label = c(&amp;quot;A&amp;quot;, &amp;quot;B&amp;quot;, &amp;quot;C&amp;quot;), size = 15, x=c(0, 0, 0.5), y=c(1, 0.5, 0.5))
p
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819143706.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;r包grid&#34;&gt;R包grid&lt;/h2&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;R包grid中的grid.layout()可以设置复杂的图形布局，viewport()可以定义一个区域用来安置图形排列，print()则用来将图形置于特定区域。 总结起来步骤如下：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;创建图形p1,p2,p3,…&lt;/li&gt;
&lt;li&gt;grid.newpage()创建一个画布&lt;/li&gt;
&lt;li&gt;创建图形布局，几行几列&lt;/li&gt;
&lt;li&gt;定义布局的矩形区域&lt;/li&gt;
&lt;li&gt;print：将图形置于特定区域&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;library(grid)
#Move to a new page
grid.newpage()
#Create layout:nrow=3, ncol=2
pushViewport(viewport(layout = grid.layout(nrow=3, ncol=2)))
#A helper function to define a region on the layout
define_region &amp;lt;- function(row, col){ 
viewport(layout.pos.row = row, layout.pos.col = col)}
#Arrange the plots
print(sp, vp=define_region(row=1, col=1:2)) #Span over two columns
print(bxp, vp=define_region(row=2, col=1))
print(dp, vp=define_region(row=2, col=2))
print(bp+rremove(&amp;quot;x.text&amp;quot;), vp=define_region(row=3, col=1:2))
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;设置共同图例&#34;&gt;设置共同图例&lt;/h2&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;ggpubr::ggarrange()可以为组合图形添加共同图例&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;common.legeng=TRUE:在图形旁边添加图例&lt;/li&gt;
&lt;li&gt;legend：指定legend的位置，主要选项有：top、bottom、left、right。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;ggarrange(bxp, dp, labels = c(&amp;quot;A&amp;quot;, &amp;quot;B&amp;quot;), common.legend = TRUE, legend = &amp;quot;bottom&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819143722.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;含有边际密度图的散点图&#34;&gt;含有边际密度图的散点图&lt;/h2&gt;
&lt;hr&gt;
&lt;pre&gt;&lt;code&gt;sp &amp;lt;- ggscatter(iris, x=&amp;quot;Sepal.Length&amp;quot;, y=&amp;quot;Sepal.Width&amp;quot;, color=&amp;quot;Species&amp;quot;, 
palette = &amp;quot;jco&amp;quot;, size=3, alpha=0.6)+border()
#Marginal density plot of x(top panel) and y(right panel)
xplot &amp;lt;- ggdensity(iris, &amp;quot;Sepal.Length&amp;quot;, fill=&amp;quot;Species&amp;quot;,palette = &amp;quot;jco&amp;quot;)
yplot &amp;lt;- ggdensity(iris, &amp;quot;Sepal.Width&amp;quot;, fill=&amp;quot;Species&amp;quot;, palette = &amp;quot;jco&amp;quot;)+rotate()
#Clean the plots
xplot &amp;lt;- xplot+clean_theme()
yplot &amp;lt;- yplot+clean_theme()
#Arrange the plots
ggarrange(xplot, NULL, sp, yplot, ncol = 2, nrow = 2, align = &amp;quot;hv&amp;quot;, widths = c(2, 1), 
heights = c(1, 2), common.legend = TRUE)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819143734.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;ggplot图文本表格组合&#34;&gt;ggplot图、文本、表格组合&lt;/h2&gt;
&lt;hr&gt;
&lt;pre&gt;&lt;code&gt;density.p &amp;lt;- ggdensity(iris, x=&amp;quot;Sepal.Length&amp;quot;, fill=&amp;quot;Species&amp;quot;, palette = &amp;quot;jco&amp;quot;)
#Compute the summary table of Sepal.Length
stable &amp;lt;- desc_statby(iris, measure.var = &amp;quot;Sepal.Length&amp;quot;, grps = &amp;quot;Species&amp;quot;)
stable &amp;lt;- stable[, c(&amp;quot;Species&amp;quot;, &amp;quot;length&amp;quot;, &amp;quot;mean&amp;quot;, &amp;quot;sd&amp;quot;)]
#Summary table plot, medium and theme
stable.p &amp;lt;- ggtexttable(stable, rows = NULL, theme = ttheme(&amp;quot;mOrange&amp;quot;))
text &amp;lt;- paste(&amp;quot;iris data set gives the measurements in cm&amp;quot;, &amp;quot;of the variables sepal length and width&amp;quot;, &amp;quot;and petal length and width, respectively,&amp;quot;, &amp;quot;for 50 flowers from each of 3 species of iris.&amp;quot;, &amp;quot;The species are Iris setosa, versicolor, and virginica.&amp;quot;, sep = &amp;quot; &amp;quot;)
text.p &amp;lt;- ggparagraph(text = text, face = &amp;quot;italic&amp;quot;, size = 11, color = &amp;quot;black&amp;quot;)
#Arrange the plots on the same page
ggarrange(density.p, stable.p, text.p, ncol = 1, nrow = 3, heights = c(1, 0.5, 0.3))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819143747.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;ggplot图形中嵌入图形元素&#34;&gt;ggplot图形中嵌入图形元素&lt;/h2&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;ggplot2::annotation_custom()可以添加各种图形元素到ggplot图中&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;annotation_custom(grob, xmin, xmax, ymin, ymax)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;其中：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;grob:要添加的图形元素&lt;/li&gt;
&lt;li&gt;xmin, xmax: x轴方向位置（水平方向）&lt;/li&gt;
&lt;li&gt;ymin, ymax: y轴方向位置（竖直方向）&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;ggplot图形中添加table&#34;&gt;ggplot图形中添加table&lt;/h2&gt;
&lt;hr&gt;
&lt;pre&gt;&lt;code&gt;density.p+annotation_custom(ggplotGrob(stable.p), xmin = 5.5, xmax = 8, ymin = 0.7)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819143803.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;ggplot图形中添加box-plot&#34;&gt;ggplot图形中添加box plot&lt;/h2&gt;
&lt;hr&gt;
&lt;pre&gt;&lt;code&gt;sp &amp;lt;- ggscatter(iris, x=&amp;quot;Sepal.Length&amp;quot;, y=&amp;quot;Sepal.Width&amp;quot;, color = &amp;quot;Species&amp;quot;, palette = &amp;quot;jco&amp;quot;, size = 3, alpha=0.6)
xbp &amp;lt;- ggboxplot(iris$Sepal.Length, width = 0.3, fill = &amp;quot;lightgray&amp;quot;)+ rotate()+theme_transparent()
ybp &amp;lt;- ggboxplot(iris$Sepal.Width, width = 0.3, fill=&amp;quot;lightgray&amp;quot;)+theme_transparent()
# Create the external graphical objects
# called a &amp;quot;grop&amp;quot; in Grid terminology
xbp_grob &amp;lt;- ggplotGrob(xbp)
ybp_grob &amp;lt;- ggplotGrob(ybp)
#place box plots inside the scatter plot
xmin &amp;lt;- min(iris$Sepal.Length)
xmax &amp;lt;- max(iris$Sepal.Length)
ymin &amp;lt;- min(iris$Sepal.Width)
ymax &amp;lt;- max(iris$Sepal.Width)
yoffset &amp;lt;- (1/15)*ymax
xoffset &amp;lt;- (1/15)*xmax
# Insert xbp_grob inside the scatter plots
p+annotation_custom(grob = xbp_grob, xmin = xmin, xmax = xmax, 
ymin = ymin-yoffset, ymax = ymin+yoffset)+
# Insert ybp_grob inside the scatter plot
annotation_custom(grob = ybp_grob, xmin = xmin-xoffset, 
xmax=xmin+xoffset, ymin=ymin, ymax=ymax)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819143814.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;ggplot图形添加背景&#34;&gt;ggplot图形添加背景&lt;/h2&gt;
&lt;hr&gt;
&lt;pre&gt;&lt;code&gt;#import the imageimg.file &amp;lt;- system.file(file.path(&amp;quot;images&amp;quot;, &amp;quot;background-image.png&amp;quot;), package = &amp;quot;ggpubr&amp;quot;)
img &amp;lt;- png::readPNG(img.file)
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;利用ggpubr::background_image()为ggplot图形添加背景图&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;library(ggplot2)
library(ggpubr)
ggplot(iris, aes(Species,Sepal.Length))+
background_image(img)+
geom_boxplot(aes(fill=Species), color=&amp;quot;white&amp;quot;)+ fill_palette(&amp;quot;jco&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819143827.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;修改透明度&#34;&gt;修改透明度&lt;/h2&gt;
&lt;hr&gt;
&lt;pre&gt;&lt;code&gt;ggplot(iris, aes(Species,Sepal.Length))+
background_image(img)+geom_boxplot(aes(fill=Species), color=&amp;quot;white&amp;quot;, alpha=0.5)+ 
fill_palette(&amp;quot;jco&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819143843.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;多页排列&#34;&gt;多页排列&lt;/h2&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;日常工作中我们有时要绘制许多图，假如我们有16幅图，每页排列4张的话就需要4页才能排完，而ggpubr::ggarrange()可以通过制定行列数自动在多页之间进行图形排列&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;multi.page &amp;lt;-ggarrange(bxp, dp, bp, sp, nrow = 1, ncol = 2)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;上述代码返回两页每页两图&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;multi.page[[1]]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819143901.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;multi.page[[2]]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819143916.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;利用ggarrange嵌套布局&#34;&gt;利用ggarrange()嵌套布局&lt;/h2&gt;
&lt;hr&gt;
&lt;pre&gt;&lt;code&gt;p1 &amp;lt;- ggarrange(sp, bp+font(&amp;quot;x.text&amp;quot;, size = 9), ncol = 1, nrow = 2)
p2 &amp;lt;- ggarrange(density.p, stable.p, text.p, ncol = 1, nrow = 3, 
heights = c(1, 0.5, 0.3))
ggarrange(p1, p2, ncol = 2, nrow = 1)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819143929.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;sessioninfo&#34;&gt;SessionInfo&lt;/h2&gt;
&lt;hr&gt;
&lt;pre&gt;&lt;code&gt;sessionInfo()
## R version 3.4.1 (2017-06-30)
## Platform: x86_64-w64-mingw32/x64 (64-bit)
## Running under: Windows 10 x64 (build 15063)
## 
## Matrix products: default
## 
## locale:
## [1] LC_COLLATE=Chinese (Simplified)_China.936 
## [2] LC_CTYPE=Chinese (Simplified)_China.936 
## [3] LC_MONETARY=Chinese (Simplified)_China.936
## [4] LC_NUMERIC=C
## [5] LC_TIME=Chinese (Simplified)_China.936 
## 
## attached base packages:
## [1] grid stats graphics grDevices utils datasets methods 
## [8] base 
## 
## other attached packages:
## [1] survminer_0.4.0 survival_2.41-3 ggpubr_0.1.5 magrittr_1.5 
## [5] cowplot_0.8.0 ggplot2_2.2.1 gridExtra_2.2.1
## 
## loaded via a namespace (and not attached):
## [1] zoo_1.8-0 purrr_0.2.3 reshape2_1.4.2 
## [4] splines_3.4.1 lattice_0.20-35 colorspace_1.3-2 
## [7] htmltools_0.3.6 yaml_2.1.14 survMisc_0.5.4
## [10] rlang_0.1.2 foreign_0.8-69 glue_1.1.1 
## [13] bindrcpp_0.2 bindr_0.1 plyr_1.8.4 
## [16] stringr_1.2.0 munsell_0.4.3 gtable_0.2.0 
## [19] ggsci_2.7 psych_1.7.5 evaluate_0.10.1 
## [22] labeling_0.3 knitr_1.17 parallel_3.4.1 
## [25] broom_0.4.2 Rcpp_0.12.12 xtable_1.8-2 
## [28] scales_0.4.1 backports_1.1.0 cmprsk_2.2-7 
## [31] km.ci_0.5-2 mnormt_1.5-5 png_0.1-7 
## [34] digest_0.6.12 stringi_1.1.5 dplyr_0.7.2 
## [37] KMsurv_0.1-5 rprojroot_1.2 tools_3.4.1 
## [40] lazyeval_0.2.0 tibble_1.3.3 tidyr_0.7.0 
## [43] pkgconfig_2.0.1 Matrix_1.2-11 data.table_1.10.4
## [46] assertthat_0.2.0 rmarkdown_1.6 R6_2.2.2 
## [49] nlme_3.1-131 compiler_3.4.1
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>R语言可视化学习笔记之ggpubr包</title>
      <link>https://taoyan.netlify.app/post/2017-06-26.r%E8%AF%AD%E8%A8%80%E5%8F%AF%E8%A7%86%E5%8C%96%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%8Bggpubr%E5%8C%85/</link>
      <pubDate>Sun, 25 Jun 2017 12:34:08 -0500</pubDate>
      <guid>https://taoyan.netlify.app/post/2017-06-26.r%E8%AF%AD%E8%A8%80%E5%8F%AF%E8%A7%86%E5%8C%96%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%8Bggpubr%E5%8C%85/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819144020.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;
&lt;a href=&#34;https://docs.ggplot2.org/current/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Hadley Wickham&lt;/a&gt;创建的可视化包ggplot2可以流畅地进行优美的可视化，但是如果要通过ggplot2定制一套图形，尤其是适用于杂志期刊等出版物的图形，对于那些没有深入了解&lt;strong&gt;ggplot2&lt;/strong&gt;的人来说就有点困难了，&lt;strong&gt;ggplot2&lt;/strong&gt;的部分语法是很晦涩的。为此
&lt;a href=&#34;https://www.sthda.com/english/rpkgs/ggpubr/index.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Alboukadel Kassambara&lt;/a&gt;创建了基于&lt;strong&gt;ggplot2&lt;/strong&gt;的可视化包&lt;strong&gt;ggpubr&lt;/strong&gt;用于绘制符合出版物要求的图形。&lt;/p&gt;
&lt;h2 id=&#34;安装及加载ggpubr包&#34;&gt;安装及加载&lt;strong&gt;ggpubr&lt;/strong&gt;包&lt;/h2&gt;
&lt;p&gt;安装方式有两种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;直接从&lt;strong&gt;CRAN&lt;/strong&gt;安装：&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;install.packages(&amp;quot;ggpubr&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;从&lt;strong&gt;GitHub&lt;/strong&gt;上安装最新版本：&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;if(!require(devtools)) install.packages(&amp;quot;devtools&amp;quot;)
 devtools::install_github(&amp;quot;kassambara/ggpubr&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;安装完之后直接加载就行：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;library(ggpubr)
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;ggpubr可绘制图形&#34;&gt;&lt;strong&gt;ggpubr&lt;/strong&gt;可绘制图形：&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;ggpubr&lt;/strong&gt;可绘制大部分我们常用的图形，下面一一介绍。&lt;/p&gt;
&lt;h3 id=&#34;分布图distribution&#34;&gt;分布图(Distribution)&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;#构建数据集
set.seed(1234)
df &amp;lt;- data.frame( sex=factor(rep(c(&amp;quot;f&amp;quot;, &amp;quot;M&amp;quot;), each=200)), 
weight=c(rnorm(200, 55), rnorm(200, 58)))
head(df)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   sex   weight
## 1  f   53.79293
## 2  f   55.27743
## 3  f   56.08444
## 4  f   52.65430
## 5  f   55.42912
## 6  f   55.50606
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;密度分布图以及边际地毯线并添加平均值线&#34;&gt;密度分布图以及边际地毯线并添加平均值线&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;ggdensity(df, x=&amp;quot;weight&amp;quot;, add = &amp;quot;mean&amp;quot;, rug = TRUE, color = &amp;quot;sex&amp;quot;, fill = &amp;quot;sex&amp;quot;,
palette = c(&amp;quot;#00AFBB&amp;quot;, &amp;quot;#E7B800&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819144035.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;带有均值线和边际地毯线的直方图&#34;&gt;带有均值线和边际地毯线的直方图&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;gghistogram(df, x=&amp;quot;weight&amp;quot;, add = &amp;quot;mean&amp;quot;, rug = TRUE, color = &amp;quot;sex&amp;quot;, fill = &amp;quot;sex&amp;quot;,
palette = c(&amp;quot;#00AFBB&amp;quot;, &amp;quot;#E7B800&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819144048.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;箱线图与小提琴图&#34;&gt;箱线图与小提琴图&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;#加载数据集ToothGrowth
data(&amp;quot;ToothGrowth&amp;quot;)
df1 &amp;lt;- ToothGrowth
head(df1)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    len  supp  dose
## 1  4.2   VC    0.5
## 2  11.5  VC    0.5
## 3  7.3   VC    0.5
## 4  5.8   VC    0.5
## 5  6.4   VC    0.5
## 6  10.0  VC    0.5
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;p &amp;lt;- ggboxplot(df1, x=&amp;quot;dose&amp;quot;, y=&amp;quot;len&amp;quot;, color = &amp;quot;dose&amp;quot;, 
palette = c(&amp;quot;#00AFBB&amp;quot;, &amp;quot;#E7B800&amp;quot;, &amp;quot;#FC4E07&amp;quot;), 
add = &amp;quot;jitter&amp;quot;, shape=&amp;quot;dose&amp;quot;)#增加了jitter点，点shape由dose映射p
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819144100.png&#34; alt=&#34;&#34;&gt;
增加不同组间的p-value值，可以自定义需要标注的组间比较&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;my_comparisons &amp;lt;- list(c(&amp;quot;0.5&amp;quot;, &amp;quot;1&amp;quot;), c(&amp;quot;1&amp;quot;, &amp;quot;2&amp;quot;), c(&amp;quot;0.5&amp;quot;, &amp;quot;2&amp;quot;))
p+stat_compare_means(comparisons = my_comparisons)+#不同组间的比较
stat_compare_means(label.y = 50)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819144114.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;内有箱线图的小提琴图&#34;&gt;内有箱线图的小提琴图&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;ggviolin(df1, x=&amp;quot;dose&amp;quot;, y=&amp;quot;len&amp;quot;, fill = &amp;quot;dose&amp;quot;, 
palette = c(&amp;quot;#00AFBB&amp;quot;, &amp;quot;#E7B800&amp;quot;, &amp;quot;#FC4E07&amp;quot;), 
add = &amp;quot;boxplot&amp;quot;, add.params = list(fill=&amp;quot;white&amp;quot;))+ 
stat_compare_means(comparisons = my_comparisons, label = &amp;quot;p.signif&amp;quot;)+#label这里表示选择显著性标记（星号） 
stat_compare_means(label.y = 50)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819144125.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;条形图&#34;&gt;条形图&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;data(&amp;quot;mtcars&amp;quot;)
df2 &amp;lt;- mtcars
df2$cyl &amp;lt;- factor(df2$cyl)
df2$name &amp;lt;- rownames(df2)#添加一行name
head(df2[, c(&amp;quot;name&amp;quot;, &amp;quot;wt&amp;quot;, &amp;quot;mpg&amp;quot;, &amp;quot;cyl&amp;quot;)])
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819144135.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;按从小到大顺序绘制条形图（不分组排序）&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ggbarplot(df2, x=&amp;quot;name&amp;quot;, y=&amp;quot;mpg&amp;quot;, fill = &amp;quot;cyl&amp;quot;, color = &amp;quot;white&amp;quot;, 
palette = &amp;quot;jco&amp;quot;,#杂志jco的配色 
sort.val = &amp;quot;desc&amp;quot;,#下降排序 
sort.by.groups=FALSE,#不按组排序 
x.text.angle=60)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819144150.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;按组进行排序&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ggbarplot(df2, x=&amp;quot;name&amp;quot;, y=&amp;quot;mpg&amp;quot;, fill = &amp;quot;cyl&amp;quot;, color = &amp;quot;white&amp;quot;, 
palette = &amp;quot;jco&amp;quot;,#杂志jco的配色 
sort.val = &amp;quot;asc&amp;quot;,#上升排序,区别于desc，具体看图演示 
sort.by.groups=TRUE,#按组排序 
x.text.angle=90)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819144208.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;偏差图&#34;&gt;偏差图&lt;/h3&gt;
&lt;p&gt;偏差图展示了与参考值之间的偏差&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;df2$mpg_z &amp;lt;- (df2$mpg-mean(df2$mpg))/sd(df2$mpg)
df2$mpg_grp &amp;lt;- factor(ifelse(df2$mpg_z&amp;lt;0, &amp;quot;low&amp;quot;, &amp;quot;high&amp;quot;), levels = c(&amp;quot;low&amp;quot;, &amp;quot;high&amp;quot;))
head(df2[, c(&amp;quot;name&amp;quot;, &amp;quot;wt&amp;quot;, &amp;quot;mpg&amp;quot;, &amp;quot;mpg_grp&amp;quot;, &amp;quot;cyl&amp;quot;)])
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819144222.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;绘制排序过的条形图&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ggbarplot(df2, x=&amp;quot;name&amp;quot;, y=&amp;quot;mpg_z&amp;quot;, fill = &amp;quot;mpg_grp&amp;quot;, color = &amp;quot;white&amp;quot;, 
palette = &amp;quot;jco&amp;quot;, sort.val = &amp;quot;asc&amp;quot;, sort.by.groups = FALSE, x.text.angle=60, 
ylab = &amp;quot;MPG z-score&amp;quot;, xlab = FALSE, legend.title=&amp;quot;MPG Group&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819144234.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;坐标轴变换&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ggbarplot(df2, x=&amp;quot;name&amp;quot;, y=&amp;quot;mpg_z&amp;quot;, fill = &amp;quot;mpg_grp&amp;quot;, color = &amp;quot;white&amp;quot;, 
palette = &amp;quot;jco&amp;quot;, sort.val = &amp;quot;desc&amp;quot;, sort.by.groups = FALSE, 
x.text.angle=90, ylab = &amp;quot;MPG z-score&amp;quot;, xlab = FALSE, 
legend.title=&amp;quot;MPG Group&amp;quot;, rotate=TRUE, ggtheme = theme_minimal())
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819144248.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;点图dot-charts&#34;&gt;点图(&lt;strong&gt;Dot charts&lt;/strong&gt;)&lt;/h3&gt;
&lt;h4 id=&#34;棒棒糖图lollipop-chart&#34;&gt;棒棒糖图(&lt;strong&gt;Lollipop chart&lt;/strong&gt;)&lt;/h4&gt;
&lt;p&gt;棒棒图可以代替条形图展示数据&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ggdotchart(df2, x=&amp;quot;name&amp;quot;, y=&amp;quot;mpg&amp;quot;, color = &amp;quot;cyl&amp;quot;, 
palette = c(&amp;quot;#00AFBB&amp;quot;, &amp;quot;#E7B800&amp;quot;, &amp;quot;#FC4E07&amp;quot;), sorting = &amp;quot;ascending&amp;quot;, 
add = &amp;quot;segments&amp;quot;, ggtheme = theme_pubr())
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819144302.png&#34; alt=&#34;&#34;&gt;
可以自设置各种参数&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ggdotchart(df2, x=&amp;quot;name&amp;quot;, y=&amp;quot;mpg&amp;quot;, color = &amp;quot;cyl&amp;quot;, 
palette = c(&amp;quot;#00AFBB&amp;quot;, &amp;quot;#E7B800&amp;quot;, &amp;quot;#FC4E07&amp;quot;), sorting = &amp;quot;descending&amp;quot;, 
add = &amp;quot;segments&amp;quot;, rotate = TRUE, group = &amp;quot;cyl&amp;quot;, dot.size = 6, 
label = round(df2$mpg), font.label = list(color=&amp;quot;white&amp;quot;, size=9, vjust=0.5), 
ggtheme = theme_pubr())
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819144314.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;偏差图-1&#34;&gt;偏差图&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;ggdotchart(df2, x=&amp;quot;name&amp;quot;, y=&amp;quot;mpg_z&amp;quot;, color = &amp;quot;cyl&amp;quot;, 
palette = c(&amp;quot;#00AFBB&amp;quot;, &amp;quot;#E7B800&amp;quot;, &amp;quot;#FC4E07&amp;quot;), sorting = &amp;quot;descending&amp;quot;, 
add = &amp;quot;segment&amp;quot;, add.params = list(color=&amp;quot;lightgray&amp;quot;, size=2), 
group = &amp;quot;cyl&amp;quot;, dot.size = 6, label = round(df2$mpg_z, 1), 
font.label = list(color=&amp;quot;white&amp;quot;, size=9, vjust=0.5), ggtheme = theme_pubr())+ 
geom_line(yintercept=0, linetype=2, color=&amp;quot;lightgray&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819144330.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;cleveland点图&#34;&gt;&lt;strong&gt;Cleveland&lt;/strong&gt;点图&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;ggdotchart(df2, x=&amp;quot;name&amp;quot;, y=&amp;quot;mpg&amp;quot;, color = &amp;quot;cyl&amp;quot;, 
palette = c(&amp;quot;#00AFBB&amp;quot;, &amp;quot;#E7B800&amp;quot;, &amp;quot;#FC4E07&amp;quot;), sorting = &amp;quot;descending&amp;quot;, 
rotate = TRUE, dot.size = 2, y.text.col=TRUE, ggtheme = theme_pubr())+ 
theme_cleveland()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819144343.png&#34; alt=&#34;&#34;&gt; &lt;/p&gt;
&lt;h2 id=&#34;sessioninfo&#34;&gt;&lt;strong&gt;SessionInfo&lt;/strong&gt;&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;sessionInfo()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## R version 3.4.0 (2017-04-21)
## Platform: x86_64-w64-mingw32/x64 (64-bit)
## Running under: Windows 8.1 x64 (build 9600)
## 
## Matrix products: default
## 
## locale:
## [1] LC_COLLATE=Chinese (Simplified)_China.936 
## [2] LC_CTYPE=Chinese (Simplified)_China.936 
## [3] LC_MONETARY=Chinese (Simplified)_China.936
## [4] LC_NUMERIC=C 
## [5] LC_TIME=Chinese (Simplified)_China.936 
## 
## attached base packages:
## [1] stats graphics grDevices utils datasets methods base 
## 
## other attached packages:
## [1] ggpubr_0.1.3 magrittr_1.5 ggplot2_2.2.1
## 
## loaded via a namespace (and not attached):
## [1] Rcpp_0.12.11 knitr_1.16 munsell_0.4.3 colorspace_1.3-2
## [5] R6_2.2.1 rlang_0.1.1 stringr_1.2.0 plyr_1.8.4 
## [9] dplyr_0.5.0 tools_3.4.0 grid_3.4.0 gtable_0.2.0 
## [13] DBI_0.6-1 htmltools_0.3.6 yaml_2.1.14 lazyeval_0.2.0 
## [17] rprojroot_1.2 digest_0.6.12 assertthat_0.2.0 tibble_1.3.3 
## [21] ggsignif_0.2.0 ggsci_2.4 purrr_0.2.2.2 evaluate_0.10 
## [25] rmarkdown_1.5 labeling_0.3 stringi_1.1.5 compiler_3.4.0 
## [29] scales_0.4.1 backports_1.1.0
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
  </channel>
</rss>
