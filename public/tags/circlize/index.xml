<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>circlize | Tao Yan</title>
    <link>https://taoyan.netlify.app/tags/circlize/</link>
      <atom:link href="https://taoyan.netlify.app/tags/circlize/index.xml" rel="self" type="application/rss+xml" />
    <description>circlize</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><copyright>© Tao Yan, 2018-2020</copyright><lastBuildDate>Sun, 25 Jun 2017 12:34:08 -0500</lastBuildDate>
    <image>
      <url>https://taoyan.netlify.app/img/pom-card.png</url>
      <title>circlize</title>
      <link>https://taoyan.netlify.app/tags/circlize/</link>
    </image>
    
    <item>
      <title>用circlize包绘制circos-plot</title>
      <link>https://taoyan.netlify.app/post/2017-06-25.%E7%94%A8circlize%E5%8C%85%E7%BB%98%E5%88%B6circos-plot/</link>
      <pubDate>Sun, 25 Jun 2017 12:34:08 -0500</pubDate>
      <guid>https://taoyan.netlify.app/post/2017-06-25.%E7%94%A8circlize%E5%8C%85%E7%BB%98%E5%88%B6circos-plot/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819145001.png&#34; alt=&#34;&#34;&gt;
&lt;code&gt;circlize&lt;/code&gt;包&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;code&gt;circlize&lt;/code&gt;包在德国癌症中心的华人博士Zuguang Gu开发的，有兴趣的可以去看看他的
&lt;a href=&#34;https://github.com/jokergoo&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Github主页&lt;/a&gt;。这个包有两个文档，一个是介绍基本原理的绘制简单
&lt;a href=&#34;https://cran.r-project.org/web/packages/circlize/vignettes/circlize.pdf&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;圈圈图&lt;/a&gt;的，也是本次要介绍的。另外一份文档专门介绍基因组数据绘制圈圈图
&lt;a href=&#34;https://cran.r-project.org/web/packages/circlize/vignettes/genomic_plot.pdf&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Genomic Circos Plot&lt;/a&gt;,我自己还没看完，下次再介绍。
根据我的学习发现这个包与&lt;code&gt;ggplot2&lt;/code&gt;很相似，也是先创建一个图层，然后不断的添加图形元素（&lt;code&gt;point&lt;/code&gt;、&lt;code&gt;line&lt;/code&gt;、&lt;code&gt;bar&lt;/code&gt;等），这些简单的图形元素都有&lt;code&gt;circos.&lt;/code&gt;这个前缀进行绘制，比如要绘制点，则用&lt;code&gt;circos.points()&lt;/code&gt;。具体的下面一一介绍。&lt;/p&gt;
&lt;h2 id=&#34;用circlize绘制圈圈图&#34;&gt;用&lt;code&gt;circlize&lt;/code&gt;绘制圈圈图&lt;/h2&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;照例，没有安装这个包的先安装：&lt;code&gt;install.packages(&amp;quot;circlize&amp;quot;)&lt;/code&gt;或者&lt;code&gt;devtools::install_github(&amp;quot;jokergoo/circlize&amp;quot;)&lt;/code&gt;。绘图第一步是先初始化(&lt;code&gt;circos.initialize&lt;/code&gt;),接下来绘制&lt;code&gt;track&lt;/code&gt;，再添加基本元素。需要提一下的是，由于&lt;code&gt;circlize&lt;/code&gt;绘制图是不断叠加的，因此如果我们一大段代码下来我们只能看到最终的图形，这里为了演示每端代码的结果，所以每次我都得初始化以及&lt;code&gt;circlize.clear&lt;/code&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;library(circlize)
# 简单创建一个数据集
set.seed(999)
n &amp;lt;- 1000
a &amp;lt;- data.frame(factors = sample(letters[1:8], n, replace = TRUE), x = rnorm(n), y = runif(n))
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;绘制第一个track&#34;&gt;绘制第一个&lt;code&gt;track&lt;/code&gt;&lt;/h2&gt;
&lt;hr&gt;
&lt;pre&gt;&lt;code&gt;par(mar = c(1, 1, 1, 1), lwd = 0.1, cex = 0.6)
circos.par(track.height = 0.1)
circos.initialize(factors = a$factors, x = a$x) #初始化，factors来控制track数目，初始化里只有x， 没有y。这一步相当于ggplot()
circos.trackPlotRegion(factors = a$factors, y = a$y, 
panel.fun = function(x, y) { 
circos.axis()})
col &amp;lt;- rep(c(&amp;quot;#FF0000&amp;quot;, &amp;quot;#00FF00&amp;quot;), 4) #自定义一下颜色# 这里先解释一下，一个track有好几个cell，具体数目由factors决定的，向本数据集中factors有八个，因此绘制一个track，其包含八个cell。含有前缀circos.track的函数会在所有的cel里添加基本元素，而只有前缀circos.的函数可以在特定的track、cell里添加基本元素。具体看下演示。
circos.trackPoints(a$factors, a$x, a$y, col = col, pch = 16, cex = 0.5) #所有的cell里都绘制点图
circos.text(-1, 0.5, &amp;quot;left&amp;quot;, sector.index = &amp;quot;a&amp;quot;, track.index = 1) #在track 1中的标记为a的cell里添加
textcircos.text(1, 0.5, &amp;quot;right&amp;quot;, sector.index = &amp;quot;a&amp;quot;)
circos.clear()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819145016.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;接下来绘制第二个track&#34;&gt;接下来绘制第二个&lt;code&gt;track&lt;/code&gt;&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;circos.trackHist&lt;/code&gt;添加柱状图，由于柱状图相对高级一点，因此&lt;code&gt;circos.trackHist&lt;/code&gt;会自动创建一个&lt;code&gt;track&lt;/code&gt;，无需我们&lt;code&gt;circos.trackPlotRegion&lt;/code&gt;进行创建。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;par(mar = c(1, 1, 1, 1), lwd = 0.1, cex = 0.6)
circos.par(track.height = 0.1)
circos.initialize(factors = a$factors, x = a$x)
circos.trackPlotRegion(factors = a$factors, y = a$y, 
panel.fun = function(x, y) { 
circos.axis()})
col &amp;lt;- rep(c(&amp;quot;#FF0000&amp;quot;, &amp;quot;#00FF00&amp;quot;), 4)
circos.trackPoints(a$factors, a$x, a$y, col = col, pch = 16, cex = 0.5)
circos.text(-1, 0.5, &amp;quot;left&amp;quot;, sector.index = &amp;quot;a&amp;quot;, track.index = 1)
circos.text(1, 0.5, &amp;quot;right&amp;quot;, sector.index = &amp;quot;a&amp;quot;)
bg.col &amp;lt;- rep(c(&amp;quot;#EFEFEF&amp;quot;, &amp;quot;#CCCCCC&amp;quot;), 4)
circos.trackHist(a$factors, a$x, bg.col = bg.col, col = NA)
circos.clear()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819145031.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;创建第三个track&#34;&gt;创建第三个&lt;code&gt;track&lt;/code&gt;&lt;/h2&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;这里又得提一下，当我们绘制多个&lt;code&gt;track&lt;/code&gt;时，我们添加基本元素时要指定添加到哪个&lt;code&gt;track&lt;/code&gt;(&lt;code&gt;track.index&lt;/code&gt;指定)、哪个&lt;code&gt;cell&lt;/code&gt;(&lt;code&gt;sector.index&lt;/code&gt;指定)里，如果不指定，那么将默认&lt;code&gt;track&lt;/code&gt;是我们刚刚创建的那个。&lt;code&gt;track.index&lt;/code&gt;、&lt;code&gt;sector.index&lt;/code&gt;等参数可以通过&lt;code&gt;get.cell.meta.data&lt;/code&gt;函数获取。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;par(mar = c(1, 1, 1, 1), lwd = 0.1, cex = 0.6)
circos.par(track.height = 0.1)
circos.initialize(factors = a$factors, x = a$x)
circos.trackPlotRegion(factors = a$factors, y = a$y,
 panel.fun = function(x, y) { 
circos.axis()})
col &amp;lt;- rep(c(&amp;quot;#FF0000&amp;quot;, &amp;quot;#00FF00&amp;quot;), 4)
circos.trackPoints(a$factors, a$x, a$y, col = col, pch = 16, cex = 0.5)
circos.text(-1, 0.5, &amp;quot;left&amp;quot;, sector.index = &amp;quot;a&amp;quot;, track.index = 1)
circos.text(1, 0.5, &amp;quot;right&amp;quot;, sector.index = &amp;quot;a&amp;quot;)
bg.col &amp;lt;- rep(c(&amp;quot;#EFEFEF&amp;quot;, &amp;quot;#CCCCCC&amp;quot;), 4)
circos.trackHist(a$factors, a$x, bg.col = bg.col, col = NA)
circos.trackPlotRegion(factors = a$factors, x = a$x, y = a$y, 
panel.fun = function(x, y) {
 grey = c(&amp;quot;#FFFFFF&amp;quot;, &amp;quot;#CCCCCC&amp;quot;, &amp;quot;#999999&amp;quot;) 
sector.index = get.cell.meta.data(&amp;quot;sector.index&amp;quot;) #这个是第三个track，因为我们刚刚创建，这里这一步不用也可。
 xlim = get.cell.meta.data(&amp;quot;xlim&amp;quot;)
 ylim = get.cell.meta.data(&amp;quot;ylim&amp;quot;) 
circos.text(mean(xlim), mean(ylim), sector.index) 
circos.points(x[1:10], y[1:10], col = &amp;quot;red&amp;quot;, pch = 16, cex = 0.6) 
circos.points(x[11:20], y[11:20], col = &amp;quot;blue&amp;quot;, cex = 0.6)})
circos.clear()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819145044.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;实际操作中我们常常会更新数据或者想更新图形，这是可以通过&lt;code&gt;circos.updatePlotRegion&lt;/code&gt;函数在特定的&lt;code&gt;track&lt;/code&gt;、&lt;code&gt;cell&lt;/code&gt;里(先删除再添加)&lt;code&gt;update&lt;/code&gt;，下面我们将通过&lt;code&gt;circos.updatePlotRegion&lt;/code&gt;函数先删除&lt;code&gt;track 2&lt;/code&gt;、&lt;code&gt;sector d&lt;/code&gt;中的图形元素再添加点图。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;par(mar = c(1, 1, 1, 1), lwd = 0.1, cex = 0.6)
circos.par(track.height = 0.1)
circos.initialize(factors = a$factors, x = a$x)
circos.trackPlotRegion(factors = a$factors, y = a$y, 
panel.fun = function(x, y) { 
circos.axis()})col &amp;lt;- rep(c(&amp;quot;#FF0000&amp;quot;, &amp;quot;#00FF00&amp;quot;), 4)
circos.trackPoints(a$factors, a$x, a$y, col = col, pch = 16, cex = 0.5)
circos.text(-1, 0.5, &amp;quot;left&amp;quot;, sector.index = &amp;quot;a&amp;quot;, track.index = 1)
circos.text(1, 0.5, &amp;quot;right&amp;quot;, sector.index = &amp;quot;a&amp;quot;)
circos.trackPoints(a$factors, a$x, a$y, col = col, pch = 16, cex = 0.5)
circos.text(-1, 0.5, &amp;quot;left&amp;quot;, sector.index = &amp;quot;a&amp;quot;, track.index = 1)
circos.text(1, 0.5, &amp;quot;right&amp;quot;, sector.index = &amp;quot;a&amp;quot;)
bg.col &amp;lt;- rep(c(&amp;quot;#EFEFEF&amp;quot;, &amp;quot;#CCCCCC&amp;quot;), 4)
circos.trackHist(a$factors, a$x, bg.col = bg.col, col = NA)
circos.trackPlotRegion(factors = a$factors, x = a$x, y = a$y,
 panel.fun = function(x, y) { 
grey = c(&amp;quot;#FFFFFF&amp;quot;, &amp;quot;#CCCCCC&amp;quot;, &amp;quot;#999999&amp;quot;) 
sector.index = get.cell.meta.data(&amp;quot;sector.index&amp;quot;)
 xlim = get.cell.meta.data(&amp;quot;xlim&amp;quot;) 
ylim = get.cell.meta.data(&amp;quot;ylim&amp;quot;) 
circos.text(mean(xlim), mean(ylim), sector.index)
circos.points(x[1:10], y[1:10], col = &amp;quot;red&amp;quot;, pch = 16, cex = 0.6)
 circos.points(x[11:20], y[11:20], col = &amp;quot;blue&amp;quot;, cex = 0.6)})
# update第2个track中标记为d的sector
circos.updatePlotRegion(sector.index = &amp;quot;d&amp;quot;, track.index = 2)
circos.points(x = -2:2, y = rep(0, 5))
xlim &amp;lt;- get.cell.meta.data(&amp;quot;xlim&amp;quot;)
ylim &amp;lt;- get.cell.meta.data(&amp;quot;ylim&amp;quot;)
circos.text(mean(xlim), mean(ylim), &amp;quot;updated&amp;quot;)
circos.clear()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819145058.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;接下来绘制第四个track&#34;&gt;接下来绘制第四个&lt;code&gt;track&lt;/code&gt;&lt;/h2&gt;
&lt;hr&gt;
&lt;pre&gt;&lt;code&gt;par(mar = c(1, 1, 1, 1), lwd = 0.1, cex = 0.6)
circos.par(track.height = 0.1)
circos.initialize(factors = a$factors, x = a$x)
circos.trackPlotRegion(factors = a$factors, y = a$y,
 panel.fun = function(x, y) { circos.axis()})
col &amp;lt;- rep(c(&amp;quot;#FF0000&amp;quot;, &amp;quot;#00FF00&amp;quot;), 4)
circos.trackPoints(a$factors, a$x, a$y, col = col, pch = 16, cex = 0.5)
circos.text(-1, 0.5, &amp;quot;left&amp;quot;, sector.index = &amp;quot;a&amp;quot;, track.index = 1)
circos.text(1, 0.5, &amp;quot;right&amp;quot;, sector.index = &amp;quot;a&amp;quot;)
circos.trackPoints(a$factors, a$x, a$y, col = col, pch = 16, cex = 0.5)
circos.text(-1, 0.5, &amp;quot;left&amp;quot;, sector.index = &amp;quot;a&amp;quot;, track.index = 1)
circos.text(1, 0.5, &amp;quot;right&amp;quot;, sector.index = &amp;quot;a&amp;quot;)
bg.col &amp;lt;- rep(c(&amp;quot;#EFEFEF&amp;quot;, &amp;quot;#CCCCCC&amp;quot;), 4)
circos.trackHist(a$factors, a$x, bg.col = bg.col, col = NA)
circos.trackPlotRegion(factors = a$factors, x = a$x, y = a$y, 
panel.fun = function(x, y) { 
grey = c(&amp;quot;#FFFFFF&amp;quot;, &amp;quot;#CCCCCC&amp;quot;, &amp;quot;#999999&amp;quot;) 
sector.index = get.cell.meta.data(&amp;quot;sector.index&amp;quot;) 
xlim = get.cell.meta.data(&amp;quot;xlim&amp;quot;)
 ylim = get.cell.meta.data(&amp;quot;ylim&amp;quot;) 
circos.text(mean(xlim), mean(ylim), sector.index) 
circos.points(x[1:10], y[1:10], col = &amp;quot;red&amp;quot;, pch = 16, cex = 0.6) 
circos.points(x[11:20], y[11:20], col = &amp;quot;blue&amp;quot;, cex = 0.6)})
# update第2个track中标记为d的sector
circos.updatePlotRegion(sector.index = &amp;quot;d&amp;quot;, track.index = 2)
circos.points(x = -2:2, y = rep(0, 5))
xlim &amp;lt;- get.cell.meta.data(&amp;quot;xlim&amp;quot;)
ylim &amp;lt;- get.cell.meta.data(&amp;quot;ylim&amp;quot;)
circos.text(mean(xlim), mean(ylim), &amp;quot;updated&amp;quot;)
circos.clear()
circos.trackPlotRegion(factors = a$factors, y = a$y)
circos.trackLines(a$factors[1:100], a$x[1:100], a$y[1:100], type = &amp;quot;h&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819145113.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;接下来添加&lt;code&gt;links&lt;/code&gt;，&lt;code&gt;links&lt;/code&gt;可以是&lt;code&gt;point&lt;/code&gt;到&lt;code&gt;point&lt;/code&gt;、&lt;code&gt;point&lt;/code&gt;到&lt;code&gt;interval&lt;/code&gt;、&lt;code&gt;interval&lt;/code&gt;到&lt;code&gt;interval&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;par(mar = c(1, 1, 1, 1), lwd = 0.1, cex = 0.6)
circos.par(track.height = 0.1)
circos.initialize(factors = a$factors, x = a$x)
circos.trackPlotRegion(factors = a$factors, y = a$y,
 panel.fun = function(x, y) { circos.axis()})
col &amp;lt;- rep(c(&amp;quot;#FF0000&amp;quot;, &amp;quot;#00FF00&amp;quot;), 4)
circos.trackPoints(a$factors, a$x, a$y, col = col, pch = 16, cex = 0.5)
circos.text(-1, 0.5, &amp;quot;left&amp;quot;, sector.index = &amp;quot;a&amp;quot;, track.index = 1)
circos.text(1, 0.5, &amp;quot;right&amp;quot;, sector.index = &amp;quot;a&amp;quot;)
circos.trackPoints(a$factors, a$x, a$y, col = col, pch = 16, cex = 0.5)
circos.text(-1, 0.5, &amp;quot;left&amp;quot;, sector.index = &amp;quot;a&amp;quot;, track.index = 1)
circos.text(1, 0.5, &amp;quot;right&amp;quot;, sector.index = &amp;quot;a&amp;quot;)
bg.col &amp;lt;- rep(c(&amp;quot;#EFEFEF&amp;quot;, &amp;quot;#CCCCCC&amp;quot;), 4)
circos.trackHist(a$factors, a$x, bg.col = bg.col, col = NA)
circos.trackPlotRegion(factors = a$factors, x = a$x, y = a$y,
 panel.fun = function(x, y) {
 grey = c(&amp;quot;#FFFFFF&amp;quot;, &amp;quot;#CCCCCC&amp;quot;, &amp;quot;#999999&amp;quot;) 
sector.index = get.cell.meta.data(&amp;quot;sector.index&amp;quot;) 
xlim = get.cell.meta.data(&amp;quot;xlim&amp;quot;) 
ylim = get.cell.meta.data(&amp;quot;ylim&amp;quot;)
circos.text(mean(xlim), mean(ylim), sector.index) 
circos.points(x[1:10], y[1:10], col = &amp;quot;red&amp;quot;, pch = 16, cex = 0.6) 
circos.points(x[11:20], y[11:20], col = &amp;quot;blue&amp;quot;, cex = 0.6)})
# update第2个track中标记为d的sector
circos.updatePlotRegion(sector.index = &amp;quot;d&amp;quot;, track.index = 2)
circos.points(x = -2:2, y = rep(0, 5))
xlim &amp;lt;- get.cell.meta.data(&amp;quot;xlim&amp;quot;)
ylim &amp;lt;- get.cell.meta.data(&amp;quot;ylim&amp;quot;)
circos.text(mean(xlim), mean(ylim), &amp;quot;updated&amp;quot;)
circos.clear()
circos.trackPlotRegion(factors = a$factors, y = a$y)
circos.trackLines(a$factors[1:100], a$x[1:100], a$y[1:100], type = &amp;quot;h&amp;quot;)
circos.link(&amp;quot;a&amp;quot;, 0, &amp;quot;b&amp;quot;, 0, h = 0.3) #point to point
circos.link(&amp;quot;c&amp;quot;, c(-0.5, 0.5), &amp;quot;d&amp;quot;, c(-0.5, 0.5), col = &amp;quot;red&amp;quot;, border = NA, h = 0.2) #intreval to interval
circos.link(&amp;quot;e&amp;quot;, 0, &amp;quot;g&amp;quot;, c(-1, 1), col = &amp;quot;green&amp;quot;, border = &amp;quot;black&amp;quot;, lwd = 2, lty = 2) #point to interval
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819145127.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;circlize详述&#34;&gt;circlize详述&lt;/h2&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;circlize&lt;/code&gt;的绘图规则是初始化(&lt;code&gt;initialize&lt;/code&gt;)-创建&lt;code&gt;track&lt;/code&gt;-添加图形元素-创建&lt;code&gt;track&lt;/code&gt;-添加图形元素-…-&lt;code&gt;circos.clear&lt;/code&gt;。具体参数设置以及解释由于内容太多，有兴趣的可以自己
&lt;a href=&#34;https://cran.r-project.org/web/packages/circlize/vignettes/circlize.pdf&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;参考文档&lt;/a&gt;。 我认为比较重要的是要理解&lt;code&gt;track&lt;/code&gt;、&lt;code&gt;sector&lt;/code&gt;。由于基本所有的图形元素我们都是添加在&lt;code&gt;sector&lt;/code&gt;
里面，因此就需要指定&lt;code&gt;track.index&lt;/code&gt;以及&lt;code&gt;sector.index&lt;/code&gt;。接下来就用个例子来讲解一下如何操纵&lt;code&gt;track&lt;/code&gt;、&lt;code&gt;sector&lt;/code&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;par(mar = c(1, 1, 1, 1))
factors &amp;lt;- letters[1:8]
circos.initialize(factors = factors, xlim = c(0, 1)) #初始化# 绘制三个track，并显示具体信息
for (i in 1:3) { 
circos.trackPlotRegion(ylim = c(0, 1))}
circos.info(plot = TRUE)
# 通过draw.sector()来高亮某一sector，比如a：
draw.sector(get.cell.meta.data(&amp;quot;cell.start.degree&amp;quot;, sector.index = &amp;quot;a&amp;quot;), 
get.cell.meta.data(&amp;quot;cell.end.degree&amp;quot;, sector.index = &amp;quot;a&amp;quot;), rou1 = 1, col = &amp;quot;blue&amp;quot;)
circos.clear()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819145140.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;### 高亮某一track， 比如第一个track：
circos.initialize(factors = factors, xlim = c(0, 1))
for (i in 1:3) { 
circos.trackPlotRegion(ylim = c(0, 1))}
circos.info(plot = TRUE)
draw.sector(0, 360, rou1 = get.cell.meta.data(&amp;quot;cell.top.radius&amp;quot;, track.index = 1), 
rou2 = get.cell.meta.data(&amp;quot;cell.bottom.radius&amp;quot;, track.index = 1), col = &amp;quot;green&amp;quot;)
circos.clear()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819145152.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# 高亮某一track某一sector，比如地2、3track中的e、f(sector)：
circos.initialize(factors = factors, xlim = c(0, 1))
for (i in 1:3) { circos.trackPlotRegion(ylim = c(0, 1))}
circos.info(plot = TRUE)
draw.sector(get.cell.meta.data(&amp;quot;cell.start.degree&amp;quot;, sector.index = &amp;quot;e&amp;quot;), 
get.cell.meta.data(&amp;quot;cell.end.degree&amp;quot;, sector.index = &amp;quot;f&amp;quot;), 
get.cell.meta.data(&amp;quot;cell.top.radius&amp;quot;, track.index = 2), 
get.cell.meta.data(&amp;quot;cell.bottom.radius&amp;quot;, track.index = 3), col = &amp;quot;red&amp;quot;)
circos.clear() #千万别忘了circos.clear，不然下次无法绘图。
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819145239.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;放大某一特定区域&#34;&gt;放大某一特定区域&lt;/h3&gt;
&lt;hr&gt;
&lt;pre&gt;&lt;code&gt;df &amp;lt;- data.frame(factors = sample(letters[1:6], 100, replace = TRUE),
                          x = rnorm(100), 
                          y = rnorm(100), 
                          stringsAsFactors = FALSE)
# 放大a，b区域
zoom_df &amp;lt;- df %&amp;gt;% dplyr::filter(factors %in% c(&amp;quot;a&amp;quot;, &amp;quot;b&amp;quot;))
zoom_df$factors &amp;lt;- paste0(&amp;quot;zoom_&amp;quot;, zoom_df$factors)
df2 &amp;lt;- rbind(df, zoom_df)
xrange &amp;lt;- tapply(df2$x, df2$factors, function(x) max(x) - min(x))
normal_sector_index &amp;lt;- unique(df$factors)
zoomed_sector_index &amp;lt;- unique(zoom_df$factors)
sector.width &amp;lt;- c(xrange[normal_sector_index]/sum(xrange[normal_sector_index]), 
xrange[zoomed_sector_index]/sum(xrange[zoomed_sector_index]))
# 绘图
par(mar = c(1, 1, 1, 1))
circos.par(start.degree = 90)
circos.initialize(df2$factors, x = df2$x, sector.width = sector.width)
circos.trackPlotRegion(df2$factors, x = df2$x, y = df2$y, 
panel.fun = function(x, y) { 
circos.points(x, y, col = &amp;quot;red&amp;quot;, pch = 16, cex = 0.5) 
xlim = get.cell.meta.data(&amp;quot;xlim&amp;quot;) 
ylim = get.cell.meta.data(&amp;quot;ylim&amp;quot;) 
sector.index = get.cell.meta.data(&amp;quot;sector.index&amp;quot;) 
circos.text(mean(xlim), mean(ylim), sector.index, niceFacing = TRUE)})
# 添加links
circos.link(&amp;quot;a&amp;quot;, get.cell.meta.data(&amp;quot;cell.xlim&amp;quot;, sector.index = &amp;quot;a&amp;quot;), &amp;quot;zoom_a&amp;quot;, 
get.cell.meta.data(&amp;quot;cell.xlim&amp;quot;, sector.index = &amp;quot;zoom_a&amp;quot;), border = NA, col = &amp;quot;red&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819145251.png&#34; alt=&#34;&#34;&gt;
circos.clear()&lt;/p&gt;
&lt;h2 id=&#34;举个栗子&#34;&gt;举个栗子&lt;/h2&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;圈圈图+热图+进化树&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;set.seed(1234)
data &amp;lt;- matrix(rnorm(100 * 10), nrow = 10, ncol = 100)
col &amp;lt;- colorRamp2(c(-2, 0, 2), c(&amp;quot;green&amp;quot;, &amp;quot;black&amp;quot;, &amp;quot;red&amp;quot;))
factors &amp;lt;- rep(letters[1:2], times = c(30, 70))
data_list &amp;lt;- list(a = data[, factors == &amp;quot;a&amp;quot;], b = data[, factors == &amp;quot;b&amp;quot;])
dend_list &amp;lt;- list(a = as.dendrogram(hclust(dist(t(data_list[[&amp;quot;a&amp;quot;]])))), 
                  b = as.dendrogram(hclust(dist(t(data_list[[&amp;quot;b&amp;quot;]])))))
circos.par(cell.padding = c(0, 0, 0, 0), gap.degree = 5)
circos.initialize(factors = factors, xlim = cbind(c(0, 0), table(factors)))
circos.track(ylim = c(0, 10), bg.border = NA, 
panel.fun = function(x, y) {
 sector.index = get.cell.meta.data(&amp;quot;sector.index&amp;quot;) 
d = data_list[[sector.index]] 
dend = dend_list[[sector.index]] 
d2 = d[, order.dendrogram(dend)] 
col_data = col(d2)
nr = nrow(d2)
nc = ncol(d2) 
for (i in 1:nr) { 
circos.rect(1:nc - 1, rep(nr - i, nc), 1:nc, rep(nr - i + 1, nc),
border = col_data[i, ], col = col_data[i, ]) }})
max_height &amp;lt;- max(sapply(dend_list, function(x) attr(x, &amp;quot;height&amp;quot;)))
circos.track(ylim = c(0, max_height), 
bg.border = NA, track.height = 0.3,
panel.fun = function(x, y) { 
sector.index = get.cell.meta.data(&amp;quot;sector.index&amp;quot;)
dend = dend_list[[sector.index]]
circos.dendrogram(dend, max_height = max_height)})
circos.clear()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819145302.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;多图排列&#34;&gt;多图排列&lt;/h2&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;直接用layout设置&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;layout(matrix(1:9, 3, 3))
for (i in 1:9) {
 factors = letters[1:8] 
par(mar = c(0.5, 0.5, 0.5, 0.5)) 
circos.par(cell.padding = c(0, 0, 0, 0)) 
circos.initialize(factors = factors, xlim = c(0, 1)) 
circos.trackPlotRegion(ylim = c(0, 1), track.height = 0.05, 
bg.col = rand_color(8), bg.border = NA) 
# 绘制links 
for (i in 1:20) {
se = sample(letters[1:8], 2) 
circos.link(se[1], runif(2), se[2], runif(2),
col = rand_color(1, transparency = 0.4), border = NA) 
} 
circos.clear()
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;sessioninfo&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819145316.png&#34; alt=&#34;&#34;&gt;
sessionInfo&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;理解circlize包的原理，绘制基因组数据的图形也是一样的。有时间下次介绍(主要是我自己还没看完，看不太懂)&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819145332.png&#34; alt=&#34;&#34;&gt;。
老规矩，给出&lt;code&gt;sessionInfo&lt;/code&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;sessionInfo()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## R version 3.4.0 (2017-04-21)
## Platform: x86_64-w64-mingw32/x64 (64-bit)
## Running under: Windows 8.1 x64 (build 9600)
## ## Matrix products: default## 
## locale:
## [1] LC_COLLATE=Chinese (Simplified)_China.936 
## [2] LC_CTYPE=Chinese (Simplified)_China.936 
## [3] LC_MONETARY=Chinese (Simplified)_China.936
## [4] LC_NUMERIC=C 
## [5] LC_TIME=Chinese (Simplified)_China.936 
## ## attached base packages:
## [1] stats graphics grDevices utils datasets methods base 
## ## other attached packages:
## [1] circlize_0.4.0 BiocInstaller_1.26.0 forcats_0.2.0
## [4] stringr_1.2.0 dplyr_0.5.0 purrr_0.2.2.2 
## [7] readr_1.1.1 tidyr_0.6.3 tibble_1.3.1
## [10] ggplot2_2.2.1 tidyverse_1.1.1.9000
#### loaded via a namespace (and not attached):
## [1] shape_1.4.2 clisymbols_1.2.0 reshape2_1.4.2 
## [4] haven_1.0.0 lattice_0.20-35 colorspace_1.3-2
## [7] htmltools_0.3.6 yaml_2.1.14 rlang_0.1.1 
## [10] foreign_0.8-68 DBI_0.6-1 modelr_0.1.0
## [13] readxl_1.0.0 plyr_1.8.4 munsell_0.4.3 
## [16] gtable_0.2.0 cellranger_1.1.0 rvest_0.3.2 
## [19] GlobalOptions_0.0.12 psych_1.7.5 evaluate_0.10 
## [22] knitr_1.16 parallel_3.4.0 broom_0.4.2 
## [25] Rcpp_0.12.11 scales_0.4.1 backports_1.1.0 
## [28] formatR_1.5 jsonlite_1.4 boxes_0.0.0.9000
## [31] mnormt_1.5-5 hms_0.3 digest_0.6.12 
## [34] stringi_1.1.5 grid_3.4.0 rprojroot_1.2
## [37] tools_3.4.0 magrittr_1.5 lazyeval_0.2.0 
## [40] crayon_1.3.2.9000 xml2_1.1.1 lubridate_1.6.0 
## [43] assertthat_0.2.0 rmarkdown_1.5 httr_1.2.1 
## [46] rstudioapi_0.6 R6_2.2.1 nlme_3.1-131
## [49] compiler_3.4.0
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
  </channel>
</rss>
