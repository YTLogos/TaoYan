<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>sed | Tao Yan</title>
    <link>https://taoyan.netlify.app/tags/sed/</link>
      <atom:link href="https://taoyan.netlify.app/tags/sed/index.xml" rel="self" type="application/rss+xml" />
    <description>sed</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><copyright>© Tao Yan, 2018-2020</copyright><lastBuildDate>Sun, 26 Nov 2017 21:19:05 +0000</lastBuildDate>
    <image>
      <url>https://taoyan.netlify.app/img/pom-card.png</url>
      <title>sed</title>
      <link>https://taoyan.netlify.app/tags/sed/</link>
    </image>
    
    <item>
      <title>Linux学习笔记（九）</title>
      <link>https://taoyan.netlify.app/post/2017-11-26.linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%9D/</link>
      <pubDate>Sun, 26 Nov 2017 21:19:05 +0000</pubDate>
      <guid>https://taoyan.netlify.app/post/2017-11-26.linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%9D/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/B6jBAEJ3k8.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;sed实例讲解&#34;&gt;sed实例讲解&lt;/h2&gt;
&lt;p&gt;上篇
&lt;a href=&#34;https://ytlogos.github.io/2017/11/20/Linux%e5%ad%a6%e4%b9%a0%e7%ac%94%e8%ae%b0%ef%bc%88%e5%85%ab%ef%bc%89/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;博客&lt;/a&gt;已经讲解了sed的基本命令及其使用方法，sed有两种方式进行调用：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sed [-n] [-e] &#39;command(s)&#39; files
sed [-n] -f scriptfile files
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;sed各个选项&#34;&gt;sed各个选项&lt;/h2&gt;
&lt;h3 id=&#34;替换命令s命令&#34;&gt;替换命令：s命令&lt;/h3&gt;
&lt;p&gt;sed的替换命令语法如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;s/pattern/replacement/
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;现在有一个包含3列10行的数据集chroms.txt：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ head -n 3 chroms.txt
chrom1  3214482 3216968
chrom1  3216025 3216968
chrom1  3216022 3216024
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;我们要将chrom替换成chr：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sed &#39;s/chrom/chr/&#39; chroms.txt |head -n 3
chr1    3214482 3216968
chr1    3216025 3216968
chr1    3216022 3216024
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;不管是pattern还是replacement都是被两个斜杠/包围，叫做定界符，定界符不仅仅只有/，还有：|等
sed有部分命令会直接修改原文件，所以使用过程中最后将结果redirect到一个新的文件&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;-n选项和p命令一起使用表示只打印那些发生替换的行&#34;&gt;-n选项和p命令一起使用表示只打印那些发生替换的行&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;$ cat company.txt
baidu 100 5000
sohu 100 4500
google 110 5000
guge 50 3000
$ sed -n &#39;s/u/U/p&#39; company.txt
baidU 100 5000
sohU 100 4500
gUge 50 3000
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;选项-i会匹配文件中每一行的第一个匹配&#34;&gt;选项-i会匹配文件中每一行的第一个匹配&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;$ cat company.txt
baidu 100 5000
sohu 100 4500
google 110 5000
guge 50 3000
$ sed -i &#39;s/g/G/&#39; company.txt
$ cat company.txt
baidu 100 5000
sohu 100 4500
Google 110 5000
Guge 50 3000
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;全面替换标记g&#34;&gt;全面替换标记g&lt;/h4&gt;
&lt;p&gt;使用后缀/g标记会替换每一行中的所有匹配&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sed &#39;s/g/G/g&#39; company.txt
baidu 100 5000
sohu 100 4500
GooGle 110 5000
GuGe 50 3000
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;从第n个匹配处开始匹配标记ng&#34;&gt;从第n个匹配处开始匹配标记ng&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;$ sed &#39;s/g/G/2g&#39; company.txt
baidu 100 5000
sohu 100 4500
gooGle 110 5000
guGe 50 3000
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;上面是从第二个匹配处开始替换，所以第一个g没有发生替换&lt;/p&gt;
&lt;h4 id=&#34;-e选项调用扩展正则表达式&#34;&gt;-E选项调用扩展正则表达式&lt;/h4&gt;
&lt;p&gt;sed默认使用的时POSIX的基本正则表达式（BRE），通过选项-E我们可以使用扩展版的正则表达式（ERE），举个例子，假设我们有一个字符串：chr1:28427874-28425431,分别代表染色体（chr）、start position以及end position，我们要将这三者分离开来形成3列：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ echo &#39;chr1:28427874-28425431&#39;|sed -E &#39;s/^(chr[^:]+):([0-9]+)-([0-9]+)/\1\t\2\t\3/&#39;
chr1    28427874        28425431
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;看起来有点复杂，主要是涉及到正则表达式，拆开来看的话也不复杂，第一部分^(chr[^:]+):,首先匹配一行的开始，接着匹配（）里面的一切。总结起来就是该部分匹配以chr开头以及至少一个非:的字符，一次匹配到:就结束了。第二部分和第三部分都是匹配至少一个数字。最后将匹配到的三部分形成三列。
要实现这一功能还有sed很多方法，比如我们只需要将:和-替换成一个制表符就行了：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ echo &#39;chr1:28427874-28425431&#39;|sed &#39;s/[:-]/\t/g&#39;
chr1    28427874        28425431
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;还可以拆成多个命令完成：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ echo &#39;chr1:28427874-28425431&#39;|sed &#39;s/:/\t/g&#39; | sed &#39;s/-/\t/g&#39;
chr1    28427874        28425431
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;还可以通过-e选项来添加多个命令&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ echo &#39;chr1:28427874-28425431&#39;|sed -e &#39;s/:/\t/g&#39; -e &#39;s/-/\t/g&#39;
chr1    28427874        28425431
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;打印特定的几行&#34;&gt;打印特定的几行&lt;/h4&gt;
&lt;p&gt;这个类似于head，如果我们需要打印第m到n行，使用&amp;rsquo;m,np&amp;rsquo;进行匹配&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sed -n &#39;2,5p&#39; chroms.txt
chrom1  3216025 3216968
chrom1  3216022 3216024
chrom1  3671349 3671498
chrom1  3214482 3216021
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;删除命令d命令&#34;&gt;删除命令：d命令&lt;/h3&gt;
&lt;h4 id=&#34;删除空白行&#34;&gt;删除空白行&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;$ sed &#39;/^$/d&#39; file
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;指定删除第几行&#34;&gt;指定删除第几行&lt;/h4&gt;
&lt;p&gt;比如删除第二行&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ cat company.txt
baidu 100 5000
sohu 100 4500
google 110 5000
guge 50 3000
$ sed &#39;2d&#39; company.txt
baidu 100 5000
google 110 5000
guge 50 3000
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;删除指定的第几行以及后面所有行&#34;&gt;删除指定的第几行以及后面所有行&lt;/h4&gt;
&lt;p&gt;比如删除第二行及其后面所有行&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sed &#39;2,$d&#39; company.txt
baidu 100 5000
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;从上面很容易知道$d表示最后一行，同时删除第m行到第n行也很容易实现了&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#删除最后一行
$ sed &#39;$d&#39; company.txt
baidu 100 5000
sohu 100 4500
google 110 5000
#删除第2到3行
$ sed &#39;2,3d&#39; company.txt
baidu 100 5000
guge 50 3000
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;匹配删除&#34;&gt;匹配删除&lt;/h4&gt;
&lt;p&gt;比如我们需要删除所有开头是g的行&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sed &#39;/^g/&#39;d company.txt
baidu 100 5000
sohu 100 4500
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;注意这里之间匹配用&#39;&amp;lsquo;围住，d则不用&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;已匹配字符串标记&#34;&gt;已匹配字符串标记&amp;amp;&lt;/h3&gt;
&lt;p&gt;啥意思呢，就是&amp;amp;代表已匹配的项&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sed &#39;s/\w\+/[&amp;amp;]/g&#39; company.txt
[baidu] [100] [5000]
[sohu] [100] [4500]
[google] [110] [5000]
[guge] [50] [3000]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;正则表达式\w\+匹配每一个单词，使用[&amp;amp;]替换它，&amp;amp;对应于之前匹配到的每个单词&lt;/p&gt;
&lt;h3 id=&#34;子串匹配标记1&#34;&gt;子串匹配标记\1&lt;/h3&gt;
&lt;p&gt;即匹配给定样式的其中一部分,对于匹配到的第一个子串就标记为\1，以此类推匹配到的第二个子串就是\2&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ echo this is digit 7 in a number|sed &#39;s/digit \([0-9]\)/\1/&#39;
this is 7 in a number
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;\(..\)用于匹配子串数字，上述命令中digit 7被匹配到的是子串是7
再举个例子&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ echo aaa BBB |sed &#39;s/\([a-z]\+\) \([A-Z]\+\)/\2 \1/&#39;
BBB aaa
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;上述命令中匹配到的子串分别是aaa、BBB，\2表示BBB，\1表示aaa。&lt;/p&gt;
&lt;h3 id=&#34;引用&#34;&gt;引用&lt;/h3&gt;
&lt;p&gt;sed表达式可以使用单引号来引用，但是如果表达式内部包含变量字符串，就需要使用双引号。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;test=hello 
echo hello WORLD | sed &amp;quot;s/$test/HELLO&amp;quot; 
HELLO WORLD
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;下一个n命令&#34;&gt;下一个：n命令&lt;/h3&gt;
&lt;p&gt;如果test被匹配，则移动到匹配行的下一行，替换这一行的aa，变为bb，并打印该行然后继续&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sed &#39;/test/{ n; s/aa/bb/; }&#39; file
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;变形y命令&#34;&gt;变形：y命令&lt;/h3&gt;
&lt;p&gt;把1~10行内所有的abcde转为大写，注意正则表达式元字符不能使用该命令：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sed &#39;1,10y/abcde/ABCDE/&#39; file
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;退出q命令&#34;&gt;退出：q命令&lt;/h3&gt;
&lt;p&gt;打印完第10行后退出sed&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sed &#39;10q&#39; file
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;打印奇数行或者偶数行&#34;&gt;打印奇数行或者偶数行&lt;/h3&gt;
&lt;p&gt;有两种方法：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#奇数行
$ $ sed -n &#39;p;n&#39; company.txt
baidu 100 5000
google 110 5000
#偶数行
$ sed -n &#39;n;p&#39; company.txt
sohu 100 4500
guge 50 3000
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;另一种方法&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#奇数行
$ sed -n &#39;1~2p&#39; company.txt
baidu 100 5000
google 110 5000
#偶数行
$ sed -n &#39;2~2p&#39; company.txt
sohu 100 4500
guge 50 3000
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;sed内容十分丰富，这里只是稍微介绍一些主要功能，想要深入学习的话可参考
&lt;a href=&#34;http://www.gnu.org/software/sed/manual/sed.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;官方文档&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;注：
本文参考了sed的
&lt;a href=&#34;http://www.gnu.org/software/sed/manual/sed.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;官方文档&lt;/a&gt;以及Linux命令大全中的
&lt;a href=&#34;http://man.linuxde.net/sed&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;sed&lt;/a&gt;命令用法&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Linux学习笔记（八）</title>
      <link>https://taoyan.netlify.app/post/2017-11-20.linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E5%85%AB/</link>
      <pubDate>Mon, 20 Nov 2017 17:19:05 +0000</pubDate>
      <guid>https://taoyan.netlify.app/post/2017-11-20.linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E5%85%AB/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/B6jBAEJ3k8.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;sed&#34;&gt;sed&lt;/h2&gt;
&lt;p&gt;sed是一种功能强大的流式文本编辑器，能够完美结合正则表达式使用。处理时sed将当前处理的行储存在临时缓冲区中，称为模式空间（pattern space），接着sed命令处理缓冲区的内容，处理完成后打印到屏幕，接着继续处理下一行，不断重复直到文件结束。&lt;/p&gt;
&lt;h2 id=&#34;sed的用途&#34;&gt;sed的用途&lt;/h2&gt;
&lt;p&gt;sed用途十分广泛：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;文本替换&lt;/li&gt;
&lt;li&gt;选择性的文件输出&lt;/li&gt;
&lt;li&gt;从文本特定位置进行编辑&lt;/li&gt;
&lt;li&gt;无交互式的文本编辑&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;工作流&#34;&gt;工作流&lt;/h2&gt;
&lt;p&gt;sed遵循简单的工作流：读取、执行以及显示，下图显示sed的工作流程：
&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/4556AfHI7k.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;读取：sed从输入流（文件、管道、标准输入STDIN等）中读取一行并且存储到模式空间的内部缓冲区&lt;/li&gt;
&lt;li&gt;执行：默认情况下所有的sed命令都在模式空间中按顺序执行，除非指定了行的地址，否则sed命令将会在所有的行上依次执行&lt;/li&gt;
&lt;li&gt;显示：发送修改后的内容到输出流，之后模式空间将被清空，继续重复上述过程直到文件结束&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;注意事项&#34;&gt;注意事项&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;模式空间（pattern space）是一块活跃的缓冲区，在sed编辑器执行命令时它会保存待检查的文本&lt;/li&gt;
&lt;li&gt;默认情况下所有的sed命令都是在模式空间中执行，因此输入文件不会发生改变&lt;/li&gt;
&lt;li&gt;另外一个缓冲区是保持空间（hold buffer），在处理模式空间中的某些行时，可以利用保持空间来临时保存一些行，在每一个循环结束的时候，sed将会移除模式空间的内容，但是保持空间的内容在所有循环过程中是持久存储的，sed命令无法直接在保持空间中执行，因此sed允许数据在模式空间与保持空间之间切换&lt;/li&gt;
&lt;li&gt;初始情况下模式空间和保持空间都是空的&lt;/li&gt;
&lt;li&gt;如果没有提供输入文件的话sed将会从标准输入接收请求&lt;/li&gt;
&lt;li&gt;如果没有提供地址范围的话，默认情况下sed将对所有的行进行操作&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;sed的选型命令替换标记&#34;&gt;sed的选型、命令、替换标记&lt;/h2&gt;
&lt;p&gt;sed作为一个强大的流式编辑器，具有其特有的格式&lt;/p&gt;
&lt;h3 id=&#34;sed命令格式&#34;&gt;sed命令格式&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;sed [options] &#39;commands&#39; file(s)
sed [options] -f scriptfile file(s)
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;选项&#34;&gt;选项&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;-e：以选项中指定的script来处理输入的文本文件&lt;/li&gt;
&lt;li&gt;-f：以选项中指定的script文本来处理输入的文本文件&lt;/li&gt;
&lt;li&gt;-n或者&amp;ndash;quiet或者&amp;ndash;silent：仅显示script处理后的结果&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;sed命令&#34;&gt;sed命令&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;a\：在当前行下面插入文本&lt;/li&gt;
&lt;li&gt;i\：在当前行上面插入文本&lt;/li&gt;
&lt;li&gt;c\：将选定的行改为新的版本&lt;/li&gt;
&lt;li&gt;d：删除选择的行&lt;/li&gt;
&lt;li&gt;D：删除模板块的第一行&lt;/li&gt;
&lt;li&gt;s：替换指定字符&lt;/li&gt;
&lt;li&gt;h：拷贝模板块中的内容到内存中的缓冲区&lt;/li&gt;
&lt;li&gt;H：追加模板块中的内容到内存中的缓冲区&lt;/li&gt;
&lt;li&gt;g：获取缓冲区的内容并替代当前模板块的内容&lt;/li&gt;
&lt;li&gt;G：获取缓存区的内容，并追加到当前模板块文本后面&lt;/li&gt;
&lt;li&gt;l：列出不能打印字符的清单&lt;/li&gt;
&lt;li&gt;n：读取下一个输入行，并用下一个命令处理新的行而不是用第一个命令&lt;/li&gt;
&lt;li&gt;N：追加下一个输入行到模板块后面并在两者间嵌入一个新行，改变当前行号码&lt;/li&gt;
&lt;li&gt;p：打印模板块的行&lt;/li&gt;
&lt;li&gt;P：打印模板块的第一行&lt;/li&gt;
&lt;li&gt;q：退出sed&lt;/li&gt;
&lt;li&gt;b label：分支到脚本中带有标记的地方，如果分支不存在则分支到脚本的末尾&lt;/li&gt;
&lt;li&gt;r file：从file中读取行&lt;/li&gt;
&lt;li&gt;t table：if分支，从最后一行开始，条件一旦满足或者T、t命令，将导致分支到带有标号的命令处或者到脚本的末尾&lt;/li&gt;
&lt;li&gt;T table：错误分支，从最后一行开始，一旦发生错误或者T、t命令，将导致分支到带有标号的命令处或者到脚本的末尾&lt;/li&gt;
&lt;li&gt;w file：写并追加到file末尾&lt;/li&gt;
&lt;li&gt;W file：写并追加模板块的第一行到file末尾&lt;/li&gt;
&lt;li&gt;！：表示后面的命令对所有没有被选定的行发生作用&lt;/li&gt;
&lt;li&gt;=：打印当前行号码&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;sed替换标记&#34;&gt;sed替换标记&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;g：表示行内全面替换&lt;/li&gt;
&lt;li&gt;p：表示打印行&lt;/li&gt;
&lt;li&gt;w：表示将行写入一个文件&lt;/li&gt;
&lt;li&gt;x：表示互换模板块中的文本和缓冲区的文本&lt;/li&gt;
&lt;li&gt;y：表示将一个字符翻译为另外的字符（不用于正则表达式）&lt;/li&gt;
&lt;li&gt;\l：子串匹配标记&lt;/li&gt;
&lt;li&gt;&amp;amp;：已匹配字符串标记&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;sed元字符集就是一些正则表达式&#34;&gt;sed元字符集（就是一些正则表达式）&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;^：匹配行的开始，如/^sed/匹配所有以sed开头的行&lt;/li&gt;
&lt;li&gt;$：匹配行结束，如/sed$/匹配所有以sed结尾的行&lt;/li&gt;
&lt;li&gt;.：匹配一个非换行符的任意字符，如/s.d/匹配在sd之间接一个任意字符&lt;/li&gt;
&lt;li&gt;*：匹配0个或多个字符，如/*sed/匹配所有模板是一个或多个字符后接sed的行&lt;/li&gt;
&lt;li&gt;[]：匹配一个指定范围内的字符，如/[sH]ed/匹配sed和Hed&lt;/li&gt;
&lt;li&gt;[^]：匹配一个不在指定范围内的字符，如/[^A-RT-Z]ed/匹配不包含A-R和T-Z的一个字符开头紧跟sed的行&lt;/li&gt;
&lt;li&gt;\(..\)：匹配子串，保存匹配的字符，如s/(love)able/\1rs，loveabel被替换成了lovers&lt;/li&gt;
&lt;li&gt;&amp;amp;：保存搜索字符用来替换其它字符，如s/love/**&amp;amp;**/，love替换成了**love**&lt;/li&gt;
&lt;li&gt;\&amp;lt;：匹配单词的开始，如/\&amp;lt;love/匹配包含以love开头的单词的行&lt;/li&gt;
&lt;li&gt;\&amp;gt;：匹配单词的结束，如/love\&amp;gt;/匹配包含以love结尾的单词的行&lt;/li&gt;
&lt;li&gt;x\{m\}：重复字符x，m次，如/0\{5\}匹配包含5个0的行】&lt;/li&gt;
&lt;li&gt;x\{m,\}：重复字符x至少m次，如/0\{5,\}/匹配至少5个0的行&lt;/li&gt;
&lt;li&gt;x\{m,n\}：重复字符x至少m次，之多n次，如/0\{5,10\}/匹配5-10个0的行&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;后面将讲解sed实例进行解释各个选项及其使用。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
