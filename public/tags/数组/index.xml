<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>数组 | Tao Yan</title>
    <link>https://taoyan.netlify.app/tags/%E6%95%B0%E7%BB%84/</link>
      <atom:link href="https://taoyan.netlify.app/tags/%E6%95%B0%E7%BB%84/index.xml" rel="self" type="application/rss+xml" />
    <description>数组</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><copyright>© Tao Yan, 2018-2020</copyright><lastBuildDate>Sun, 04 Feb 2018 21:19:05 +0000</lastBuildDate>
    <image>
      <url>https://taoyan.netlify.app/img/pom-card.png</url>
      <title>数组</title>
      <link>https://taoyan.netlify.app/tags/%E6%95%B0%E7%BB%84/</link>
    </image>
    
    <item>
      <title>Shell编程：数组</title>
      <link>https://taoyan.netlify.app/post/2018-02-04.shell%E7%BC%96%E7%A8%8B%E6%95%B0%E7%BB%84/</link>
      <pubDate>Sun, 04 Feb 2018 21:19:05 +0000</pubDate>
      <guid>https://taoyan.netlify.app/post/2018-02-04.shell%E7%BC%96%E7%A8%8B%E6%95%B0%E7%BB%84/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/%E6%95%B0%E7%BB%84.png?raw=true&#34; alt=&#34;数组&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;数组&#34;&gt;数组&lt;/h2&gt;
&lt;p&gt;数组中可以存放多个值。Bash只支持一维数组，初始化时无需定义数组大小，数组元素下标从0开始。Shell数组用括号表示，元素之间由空号隔开：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;array_name=(value1 value2 ... valuen)
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;实例&#34;&gt;实例&lt;/h2&gt;
&lt;h3 id=&#34;创建数据&#34;&gt;创建数据&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;#!/bin/bash
my_array=(A B &amp;quot;C&amp;quot; D)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;也可以通过下标赋值来定义数组&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;array_name[0]=value0
array_name[1]=value1
array_name[2]=value2
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;读取数组&#34;&gt;读取数组&lt;/h3&gt;
&lt;p&gt;读取数组的一般格式为：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;${array_name[index]}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;现在创建一个脚本&lt;code&gt;test.sh&lt;/code&gt;来演示一下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#！/bin/bash
#创建脚本test.sh
my_array=(A B &amp;quot;C&amp;quot; D)
echo &amp;quot;第一个元素为：${my_array[0]}&amp;quot;
echo &amp;quot;第二个元素为：${my_array[1]}&amp;quot;
echo &amp;quot;第三个元素为：${my_array[2]}&amp;quot;
echo &amp;quot;第四个元素为：${my_array[3]}&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;执行脚本结果如下&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ chmod +x test.sh 
$ ./test.sh 
第一个元素为：A
第二个元素为：B
第三个元素为：C
第四个元素为：D
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;获取数组中所有元素&#34;&gt;获取数组中所有元素&lt;/h3&gt;
&lt;p&gt;使用@或者*可以获取数组中的所有元素&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#!/bin/bash
# 创建脚本test.sh

my_array[0]=A
my_array[1]=B
my_array[2]=C
my_array[3]=D

echo &amp;quot;数组的元素为: ${my_array[*]}&amp;quot;
echo &amp;quot;数组的元素为: ${my_array[@]}&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;执行脚本结果如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ ./test.sh 
数组的元素为: A B C D
数组的元素为: A B C D
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;获取数组长度&#34;&gt;获取数组长度&lt;/h3&gt;
&lt;p&gt;获取数组长度的方法与获取字符串长度的方法相同&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#!/bin/bash
# 创建脚本test.sh

my_array[0]=A
my_array[1]=B
my_array[2]=C
my_array[3]=D

echo &amp;quot;数组元素个数为: ${#my_array[*]}&amp;quot;
echo &amp;quot;数组元素个数为: ${#my_array[@]}&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;执行脚本结果如下&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ ./test.sh 
数组元素个数为: 4
数组元素个数为: 4
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;数组的值也可以写入变量&#34;&gt;数组的值也可以写入变量&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;#!/bin/bash
# 创建脚本test.sh

A=1
my_array=($A B C D)
echo &amp;quot;第一个元素为：${my_array[0]}&amp;quot;
echo &amp;quot;第二个元素为：${my_array[1]}&amp;quot;
echo &amp;quot;第三个元素为：${my_array[2]}&amp;quot;
echo &amp;quot;第四个元素为：${my_array[3]}&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;执行脚本结果如下&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ ./test.sh 
第一个元素为：1
第二个元素为：B
第三个元素为：C
第四个元素为：D
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;数组下标也可以为变量&#34;&gt;数组下标也可以为变量&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;#!/bin/bash
# 创建脚本test.sh

my_array=(A B C D)

i=2
echo ${my_array[i]}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;执行脚本结果如下&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ ./test.sh 
C
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;数组遍历&#34;&gt;数组遍历&lt;/h3&gt;
&lt;p&gt;这里讲解几种方法用于数据遍历&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#!/bin/bash
# 创建演示脚本test.sh
my_array=(A B C D E F G)
echo &amp;quot;---------for循环遍历数组-----------&amp;quot;
for i in ${my_array[@]}
do
        echo $i
done

echo &amp;quot;--------while循环遍历数组，使用let i++自增-------------&amp;quot;
i=0
#注意[与$之间要有空格，否则报错,下同
while [ $i -lt ${#my_array[@]} ]
do
        echo ${my_array[$i]}
        let i++
done

echo &amp;quot;-------while循环遍历数组，使用let &amp;quot;n++ &amp;quot;自增：双引号可有可无，推荐加上双引号-----------&amp;quot;
n=0
while [ $n -lt ${#my_array[@]} ]
do
        echo ${my_array[$n]}
        let &amp;quot;n++&amp;quot;
done

echo &amp;quot;-----------while循环遍历数组，使用let m+=1自增--------------&amp;quot;

m=0
while [ $m -lt ${#my_array[@]} ]
do
        echo ${my_array[$m]}
        let m+=1
done

echo &amp;quot;------------------while循环遍历数组，使用a=$[$a+1]自增------------------&amp;quot;
a=0
while [ $a -lt ${#my_array[@]} ]
do
        echo ${my_array[$a]}
        a=$[$a+1]
done
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;执行脚本结果如下&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ ./test.sh 
---------for循环遍历数组-----------
A
B
C
D
E
F
G
--------while循环遍历数组，使用let i++自增-------------
A
B
C
D
E
F
G
-------while循环遍历数组，使用let n++ 自增：双引号可有可无，推荐加上双引号-----------
A
B
C
D
E
F
G
-----------while循环遍历数组，使用let m+=1自增--------------
A
B
C
D
E
F
G
------------------while循环遍历数组，使用a=$[$a+1]自增------------------
A
B
C
D
E
F
G
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;可以看出各种遍历方法大同小异，区别就在于自增方式的不同&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
