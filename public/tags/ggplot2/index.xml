<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ggplot2 | Tao Yan</title>
    <link>https://taoyan.netlify.app/tags/ggplot2/</link>
      <atom:link href="https://taoyan.netlify.app/tags/ggplot2/index.xml" rel="self" type="application/rss+xml" />
    <description>ggplot2</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><copyright>© Tao Yan, 2018-2020</copyright><lastBuildDate>Tue, 02 Jun 2020 16:19:05 +0000</lastBuildDate>
    <image>
      <url>https://taoyan.netlify.app/img/pom-card.png</url>
      <title>ggplot2</title>
      <link>https://taoyan.netlify.app/tags/ggplot2/</link>
    </image>
    
    <item>
      <title>使用override.aes控制ggplot2中的图例外观</title>
      <link>https://taoyan.netlify.app/post/2020-06-02.%E4%BD%BF%E7%94%A8override.aes%E6%8E%A7%E5%88%B6ggplot2%E4%B8%AD%E7%9A%84%E5%9B%BE%E4%BE%8B%E5%A4%96%E8%A7%82/</link>
      <pubDate>Tue, 02 Jun 2020 16:19:05 +0000</pubDate>
      <guid>https://taoyan.netlify.app/post/2020-06-02.%E4%BD%BF%E7%94%A8override.aes%E6%8E%A7%E5%88%B6ggplot2%E4%B8%AD%E7%9A%84%E5%9B%BE%E4%BE%8B%E5%A4%96%E8%A7%82/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20200720160555.png&#34; alt=&#34;20200720160555.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;本文来自于https://aosmith.rbind.io/2020/07/09/ggplot2-override-aes/，记录翻译学习&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;ggplot2&lt;/strong&gt;中的&lt;code&gt;aesthetics&lt;/code&gt;以及&lt;code&gt;scale_*()&lt;/code&gt;函数会同时修改包括图例在内的整个图形。&lt;code&gt;guide_legend()&lt;/code&gt;中的&lt;code&gt;override.aes&lt;/code&gt;参数允许用户只修改图例外观，不会对图形的其他部分进行修改。这对于使图例更具可读性或者创建一些类型的组合图例十分有用。&lt;/p&gt;
&lt;p&gt;本文先介绍&lt;code&gt;override.aes&lt;/code&gt;的一个基本示例，然后再介绍另外三种绘图方案以说明&lt;code&gt;override.aes&lt;/code&gt;如何使用。&lt;/p&gt;
&lt;h2 id=&#34;r包&#34;&gt;R包&lt;/h2&gt;
&lt;p&gt;本文唯一使用的R包只有&lt;strong&gt;ggplot2&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;if (!requireNamespace(&amp;quot;BiocManager&amp;quot;, quietly = TRUE))
    install.packages(&amp;quot;BiocManager&amp;quot;)
library(ggplot2)
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;overrideaes&#34;&gt;override.aes&lt;/h2&gt;
&lt;p&gt;更改图例的同时不修改图的原因是使图例更具有可读性，先使用数据集&lt;code&gt;diamonds&lt;/code&gt;开始，我们将&lt;code&gt;cut&lt;/code&gt;变量映射为&lt;code&gt;color&lt;/code&gt;属性，然后设置&lt;code&gt;alpha&lt;/code&gt;增加透明度，&lt;code&gt;size&lt;/code&gt;控制点大小&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ggplot(data = diamonds, aes(x = carat, y = price, color = cut) ) +
     geom_point(alpha = .25, size = 1)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20200719192139.png&#34; alt=&#34;20200719192139.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;可以看到&lt;code&gt;alpha&lt;/code&gt;以及&lt;code&gt;size&lt;/code&gt;不仅修改了图中点的属性，同时图例中的点的属性也被修改了。&lt;/p&gt;
&lt;h2 id=&#34;添加guides图层&#34;&gt;添加guides()图层&lt;/h2&gt;
&lt;p&gt;当散点图绘制大量的点时，将点变小变透明是可取的，但是对于图例就不是那么具有可读性了，这种情况下，我们修改额外通过修改图例点的大小以及透明度来使图例更具有可读性。一种方法是添加&lt;code&gt;guides()&lt;/code&gt;层，这里是&lt;code&gt;color&lt;/code&gt;属性，所以我们可以通过&lt;code&gt;color = guides_legend()&lt;/code&gt;来进行修改，&lt;code&gt;override.aes&lt;/code&gt;是&lt;code&gt;guide_legend()&lt;/code&gt;的其中一个参数，可以一次性提供一系列的美学参数列表，这些参数将覆盖默认（全局）的图例外观。&lt;/p&gt;
&lt;p&gt;这里我们先修改图例点大小&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ggplot(data = diamonds, aes(x = carat, y = price, color = cut) ) +
     geom_point(alpha = .25, size = 1) +
     guides(color = guide_legend(override.aes = list(size = 3) ) )
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20200719192910.png&#34; alt=&#34;20200719192910.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;可以看到图中的点属性是没有发生变化的，但是图例中的点大小变化了&lt;/p&gt;
&lt;h2 id=&#34;在scale_中使用guide参数&#34;&gt;在scale_*()中使用guide参数&lt;/h2&gt;
&lt;p&gt;如果想通过&lt;code&gt;scale_color_*()&lt;/code&gt;函数来修改颜色，我们可以直接在函数里面使用&lt;code&gt;guide&lt;/code&gt;参数来代替单独添加的&lt;code&gt;guides()&lt;/code&gt;图层。这里假设使用&lt;code&gt;scale_colr_viridis_d()&lt;/code&gt;来更改整个图的默认颜色，我们可以直接直接通过&lt;code&gt;guide&lt;/code&gt;参数来修改图例属性：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ggplot(data = diamonds, aes(x = carat, y = price, color = cut) ) +
     geom_point(alpha = .25, size = 1) +
     scale_color_viridis_d(option = &amp;quot;magma&amp;quot;,
                           guide = guide_legend(override.aes = list(size = 3) ) )
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20200719194510.png&#34; alt=&#34;20200719194510.png&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;修改多个美学参数&#34;&gt;修改多个美学参数&lt;/h2&gt;
&lt;p&gt;直接将多个参数添加到&lt;code&gt;list&lt;/code&gt;中就行了：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ggplot(data = diamonds, aes(x = carat, y = price, color = cut) ) +
     geom_point(alpha = .25, size = 1) +
     scale_color_viridis_d(option = &amp;quot;magma&amp;quot;,
                           guide = guide_legend(override.aes = list(size = 3,
                                                                    alpha = 1) ) )
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20200719194707.png&#34; alt=&#34;20200719194707.png&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;修改图例中的部分美学属性&#34;&gt;修改图例中的部分美学属性&lt;/h2&gt;
&lt;p&gt;仅删除图例中的部分美学属性是&lt;code&gt;override.aes&lt;/code&gt;的另一种用法，比如当基于不同数据集但是基于相同&lt;code&gt;id&lt;/code&gt;的变量映射进行图层添加的时候，这种用法就非常有用了。&lt;/p&gt;
&lt;p&gt;下面这个例子基于
&lt;a href=&#34;https://stackoverflow.com/questions/59548358/r-ggplot2-in-the-legend-how-do-i-hide-unused-colors-from-one-geom-while-show&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;this Stack Overflow question&lt;/a&gt;。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;points = structure(list(x = c(5L, 10L, 7L, 9L, 86L, 46L, 22L, 94L, 21L, 
6L, 24L, 3L), y = c(51L, 54L, 50L, 60L, 97L, 74L, 59L, 68L, 45L, 
56L, 25L, 70L), id = c(&amp;quot;a&amp;quot;, &amp;quot;a&amp;quot;, &amp;quot;a&amp;quot;, &amp;quot;a&amp;quot;, &amp;quot;b&amp;quot;, &amp;quot;b&amp;quot;, &amp;quot;b&amp;quot;, &amp;quot;b&amp;quot;, 
&amp;quot;c&amp;quot;, &amp;quot;c&amp;quot;, &amp;quot;c&amp;quot;, &amp;quot;c&amp;quot;)), row.names = c(NA, -12L), class = &amp;quot;data.frame&amp;quot;)

head(points)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;#    x  y id
# 1  5 51  a
# 2 10 54  a
# 3  7 50  a
# 4  9 60  a
# 5 86 97  b
# 6 46 74  b
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;box = data.frame(left = 1, right = 10, bottom = 50, top = 60, id = &amp;quot;a&amp;quot;)
box
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;#   left right bottom top id
# 1    1    10     50  60  a
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;基于这两个数据集进行图层叠加：将&lt;code&gt;id&lt;/code&gt;变量映射给&lt;code&gt;color&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ggplot(data = points, aes(color = id) ) +
     geom_point(aes(x = x, y = y), size = 4) +
     geom_rect(data = box, aes(xmin = left,
                               xmax = right,
                               ymin = 50,
                               ymax = top),
               fill = NA, size = 1)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20200720153021.png&#34; alt=&#34;20200720153021.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;可以看到，矩阵框颜色映射到了所以点上，导致图例中所有点都有一个外轮廓，这里我们想的是去除&lt;code&gt;b&lt;/code&gt;,&lt;code&gt;c&lt;/code&gt;两个点的轮廓映射，只保留点&lt;code&gt;a&lt;/code&gt;的。图例中点的轮廓是基于&lt;code&gt;linetype&lt;/code&gt;美学的，所以我们可以利用&lt;code&gt;override.aes&lt;/code&gt; 来去除这些线条框，将之设置为0即可：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ggplot(data = points, aes(color = id) ) +
     geom_point(aes(x = x, y = y), size = 4) +
     geom_rect(data = box, aes(xmin = left,
                               xmax = right,
                               ymin = 50,
                               ymax = top),
               fill = NA, size = 1) +
     guides(color = guide_legend(override.aes = list(linetype = c(1, 0, 0) ) ) )
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20200720153001.png&#34; alt=&#34;20200720153001.png&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;组合多图层图例&#34;&gt;组合多图层图例&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;ggplot(data = mtcars, aes(x = mpg, y = wt, color = factor(am) ) ) +
     geom_point(size = 3) +
     geom_smooth(method = &amp;quot;lm&amp;quot;, se = FALSE)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20200720154509.png&#34; alt=&#34;20200720154509.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;上面实际上是两个图层，一个是散点图层，另一个是直线图层，但是图例是结合在一起的展示的，现在我们想只留下&lt;code&gt;color&lt;/code&gt;图例，然后添加一个额外的线图层：一个图例表示点是观察值，线是拟合线，使用&lt;code&gt;alpha&lt;/code&gt;美学来实现，这里实际上我们是没有用到&lt;code&gt;alpha&lt;/code&gt;美学，但是却可以影响所有图层，这是一个添加额外图例的小技巧，这里我不想更改图形外观，所以添加&lt;code&gt;scale_alpha_manual()&lt;/code&gt;设置&lt;code&gt;values=c(1,1)&lt;/code&gt;来保证所有图层都是不透明的，同时还移除了图例名称(name=NULL):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ggplot(data = mtcars, aes(x = mpg, y = wt, color = factor(am) ) ) +
     geom_point(aes(alpha = &amp;quot;Observed&amp;quot;), size = 3) +
     geom_smooth(method = &amp;quot;lm&amp;quot;, se = FALSE, aes(alpha = &amp;quot;Fitted&amp;quot;) ) +
     scale_alpha_manual(name = NULL,
                        values = c(1, 1),
                        breaks = c(&amp;quot;Observed&amp;quot;, &amp;quot;Fitted&amp;quot;) )
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20200720154750.png&#34; alt=&#34;20200720154750.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;又有新的问题，两个图例都同时含有点以及线，我们需要移除第二个图例的点，这就需要用到我们上面讲的技巧了：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ggplot(data = mtcars, aes(x = mpg, y = wt, color = factor(am) ) ) +
     geom_point(aes(alpha = &amp;quot;Observed&amp;quot;), size = 3) +
     geom_smooth(method = &amp;quot;lm&amp;quot;, se = FALSE, aes(alpha = &amp;quot;Fitted&amp;quot;) ) +
     scale_alpha_manual(name = NULL,
                        values = c(1, 1),
                        breaks = c(&amp;quot;Observed&amp;quot;, &amp;quot;Fitted&amp;quot;),
                        guide = guide_legend(override.aes = list(linetype = c(0, 1),
                                                                  shape = c(16, NA),
                                                                  color = &amp;quot;black&amp;quot;) ) )
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20200720155919.png&#34; alt=&#34;20200720155919.png&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;控制多图例外观&#34;&gt;控制多图例外观&lt;/h2&gt;
&lt;p&gt;先构造两个数据集：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;dat = structure(list(g1 = structure(c(1L, 2L, 1L, 2L, 1L, 2L, 1L, 2L, 
1L, 2L, 1L, 2L, 1L, 2L, 1L, 2L), class = &amp;quot;factor&amp;quot;, .Label = c(&amp;quot;High&amp;quot;, 
&amp;quot;Low&amp;quot;)), g2 = structure(c(1L, 1L, 2L, 2L, 1L, 1L, 2L, 2L, 1L, 
1L, 2L, 2L, 1L, 1L, 2L, 2L), class = &amp;quot;factor&amp;quot;, .Label = c(&amp;quot;Control&amp;quot;, 
&amp;quot;Treatment&amp;quot;)), x = c(0.42, 0.39, 0.56, 0.59, 0.17, 0.95, 0.85, 
0.25, 0.31, 0.75, 0.58, 0.9, 0.6, 0.86, 0.61, 0.61), y = c(-1.4, 
3.6, 1.1, -0.1, 0.5, 0, -1.8, 0.8, -1.1, -0.6, 0.2, 0.3, 1.1, 
1.6, 0.9, -0.6)), class = &amp;quot;data.frame&amp;quot;, row.names = c(NA, -16L
))

head(dat)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;#     g1        g2    x    y
# 1 High   Control 0.42 -1.4
# 2  Low   Control 0.39  3.6
# 3 High Treatment 0.56  1.1
# 4  Low Treatment 0.59 -0.1
# 5 High   Control 0.17  0.5
# 6  Low   Control 0.95  0.0
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;ggplot(data = dat, aes(x = x, y = y, fill = g1, shape = g2) ) +
     geom_point(size = 5) +
     scale_fill_manual(values = c(&amp;quot;#002F70&amp;quot;, &amp;quot;#EDB4B5&amp;quot;) ) +
     scale_shape_manual(values = c(21, 24) )
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20200720160349.png&#34; alt=&#34;20200720160349.png&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ggplot(data = dat, aes(x = x, y = y, fill = g1, shape = g2) ) +
     geom_point(size = 5) +
     scale_fill_manual(values = c(&amp;quot;#002F70&amp;quot;, &amp;quot;#EDB4B5&amp;quot;) ) +
     scale_shape_manual(values = c(21, 24) ) +
     guides(fill = guide_legend(override.aes = list(shape = 21) ),
            shape = guide_legend(override.aes = list(fill = &amp;quot;black&amp;quot;) ) )
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20200720160555.png&#34; alt=&#34;20200720160555.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;这个看起来有点难以理解，实际上就是我们设置的这类形状具有两个属性：&lt;code&gt;fill&lt;/code&gt;以及&lt;code&gt;shape&lt;/code&gt;，所以&lt;code&gt;g1&lt;/code&gt;映射给&lt;code&gt;fill&lt;/code&gt;，&lt;code&gt;g2&lt;/code&gt;映射给&lt;code&gt;shape&lt;/code&gt;，通过&lt;code&gt;overrid.aes&lt;/code&gt;我们赋予了&lt;code&gt;g2&lt;/code&gt;图例填充颜色黑色，然后赋予&lt;code&gt;g1&lt;/code&gt;形状为&lt;code&gt;21&lt;/code&gt;。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>ggplot2常用theme参数</title>
      <link>https://taoyan.netlify.app/post/2020-05-02.ggplot2%E5%B8%B8%E7%94%A8theme%E5%8F%82%E6%95%B0/</link>
      <pubDate>Sat, 02 May 2020 16:19:05 +0000</pubDate>
      <guid>https://taoyan.netlify.app/post/2020-05-02.ggplot2%E5%B8%B8%E7%94%A8theme%E5%8F%82%E6%95%B0/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20200627183728.png&#34; alt=&#34;20200627183728.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;ggplot2&lt;/strong&gt;不可否认是一个很强大的可视化包，随着不断的开发，其参数越来越多，也意味着定制化可视化越来越方便，同时也意味着需要使用很多的参数进行图形控制，反正我每次使用&lt;strong&gt;ggplot2&lt;/strong&gt;我都要Google，最近我在某推闲逛的时候发现一位用户总结了自己常用的参数，方便实用，我这里Mark下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20200627183728.png&#34; alt=&#34;20200627183728.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;基本上大部分常用参数都涉及到了，分面参数这里没有，我在其他地方搜索到另外一份类似包含分面的tips:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20200627183936.png&#34; alt=&#34;20200627183936.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;我这里提供原版PDF下载：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href=&#34;https://taoyan.netlify.app/pdf/ggplot2-themes.pdf&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ggplot2-themes.pdf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://taoyan.netlify.app/pdf/ggplot2-theme-elements-reference-v2.pdf&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ggplot2-theme-elements-reference-v2.pdf&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>关于如何修改坐标轴表达式以及分面图例的一个例子</title>
      <link>https://taoyan.netlify.app/post/2018-01-31.%E5%85%B3%E4%BA%8E%E5%A6%82%E4%BD%95%E4%BF%AE%E6%94%B9%E5%9D%90%E6%A0%87%E8%BD%B4%E8%A1%A8%E8%BE%BE%E5%BC%8F%E4%BB%A5%E5%8F%8A%E5%88%86%E9%9D%A2%E5%9B%BE%E4%BE%8B%E7%9A%84%E4%B8%80%E4%B8%AA%E4%BE%8B%E5%AD%90/</link>
      <pubDate>Wed, 31 Jan 2018 19:43:11 +0000</pubDate>
      <guid>https://taoyan.netlify.app/post/2018-01-31.%E5%85%B3%E4%BA%8E%E5%A6%82%E4%BD%95%E4%BF%AE%E6%94%B9%E5%9D%90%E6%A0%87%E8%BD%B4%E8%A1%A8%E8%BE%BE%E5%BC%8F%E4%BB%A5%E5%8F%8A%E5%88%86%E9%9D%A2%E5%9B%BE%E4%BE%8B%E7%9A%84%E4%B8%80%E4%B8%AA%E4%BE%8B%E5%AD%90/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/ElKca96m2c.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;ggplot2&lt;/strong&gt;绘制的图形如果需要修改细节的话，没有对&lt;strong&gt;ggplot2&lt;/strong&gt;有一定的了解的话是十分困难的，毕竟连创建这个包的作者&lt;strong&gt;Hadley Wickham&lt;/strong&gt;都自称自己使用&lt;strong&gt;ggplot2&lt;/strong&gt;的时候都需要查文档。在对&lt;strong&gt;ggplot2&lt;/strong&gt;有一定了解的基础上如果需要修改ggplot图的话稍微查查文档基本能解决。&lt;/p&gt;
&lt;h2 id=&#34;来源&#34;&gt;来源&lt;/h2&gt;
&lt;p&gt;这两天有人问我如何修改她的图形，她绘制的图如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/5fA4FDKGJB.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;p&gt;她希望修改三点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;各个分面的图例比如DK、NL等是否可以修改，使得大一点&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Y轴标题中的-1如何变成上标&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;平均值虚线如何针对不同物种画相对应的虚线平均值&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;她是使用&lt;strong&gt;ggpubr&lt;/strong&gt;包绘制的，这个包就是对一些&lt;strong&gt;ggplot2&lt;/strong&gt;函数的一些封装及继承，本质上来说是可以通过&lt;strong&gt;ggplot2&lt;/strong&gt;来修改参数的。我参考了一部分的官方文档之后解决了这三个问题，所以写了这篇博客。&lt;/p&gt;
&lt;h2 id=&#34;数据&#34;&gt;数据&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;library(tidyverse)
library(ggpubr)
ICP&amp;lt;-read.csv(&amp;quot;C:/Users/taoyan/Desktop/element.csv&amp;quot;)
ICP$Order &amp;lt;- factor(ICP$Species, levels = c(&amp;quot;DK&amp;quot;, &amp;quot;NL&amp;quot;, &amp;quot;RO&amp;quot;, &amp;quot;IT&amp;quot;, &amp;quot;TL&amp;quot;, &amp;quot;AP&amp;quot;, &amp;quot;AD&amp;quot;))
head(ICP)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   Species Treatment       Na       Ca        P
## 1      DK         A 268.4234 3021.933 1791.317
## 2      DK         A 301.9390 3314.308 1595.479
## 3      DK         A 261.1024 3417.643 1547.596
## 4      DK         A 229.1169 3069.978 1735.703
## 5      DK         A 265.1454 3205.965 1667.524
## 6      DK         B 330.7135 4028.279 1638.113
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;构造数据&#34;&gt;构造数据&lt;/h2&gt;
&lt;p&gt;由于后面需要用到平均值，所以需要构造含有平均值的数据集&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;meanvalue &amp;lt;- ICP%&amp;gt;%group_by(Species)%&amp;gt;%summarise(mean=mean(Na))
data &amp;lt;- left_join(ICP,meanvalue,by=c(&#39;Species&#39;=&#39;Species&#39;))
head(data[,c(1:4,13)])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   Species Treatment       Na       Ca     mean
## 1      DK         A 268.4234 3021.933 426.6542
## 2      DK         A 301.9390 3314.308 426.6542
## 3      DK         A 261.1024 3417.643 426.6542
## 4      DK         A 229.1169 3069.978 426.6542
## 5      DK         A 265.1454 3205.965 426.6542
## 6      DK         B 330.7135 4028.279 426.6542
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;绘图&#34;&gt;绘图&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;p &amp;lt;- ggboxplot(ICP, x=&amp;quot;Treatment&amp;quot;, y=&amp;quot;Na&amp;quot;,group=&amp;quot;Species&amp;quot;, color=&amp;quot;Treatment&amp;quot;,
add=&amp;quot;mean_se&amp;quot;,facet.by = &amp;quot;Order&amp;quot;,ncol=4, legend=&amp;quot;none&amp;quot;)+
geom_hline(aes(yintercept=mean),data,linetype=2)+ #由于要在不同的分面里绘制水平线，这里要mapping
stat_compare_means(method=&amp;quot;anova&amp;quot;,label=&amp;quot;p.format&amp;quot;,label.y=3500,size=8)+
stat_compare_means(label=&amp;quot;p.signif&amp;quot;,size=8,method=&amp;quot;wilcox.test&amp;quot;,ref.group=&amp;quot;.all.&amp;quot;,hide.ns=TRUE)
ggpar(p,palette = &amp;quot;npg&amp;quot;,font.tickslab = c(18,&amp;quot;bold&amp;quot;))+
  theme(strip.text = element_text(size=15,face = &amp;quot;bold&amp;quot;))+ #调整分面legend
  labs(x=&amp;quot;Treatment&amp;quot;, y=expression(bold(paste(&amp;quot;Na (  &amp;quot;, &#39;mg Kg&#39;^{-1},&amp;quot;)&amp;quot;,&#39; DM&#39;))))+
  theme(axis.title = element_text(face = &amp;quot;bold&amp;quot;, size=18))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/ElKca96m2c.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;sessioninfo&#34;&gt;SessionInfo()&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;sessionInfo()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## R version 3.4.3 (2017-11-30)
## Platform: x86_64-w64-mingw32/x64 (64-bit)
## Running under: Windows 10 x64 (build 16299)
## 
## Matrix products: default
## 
## locale:
## [1] LC_COLLATE=Chinese (Simplified)_China.936 
## [2] LC_CTYPE=Chinese (Simplified)_China.936   
## [3] LC_MONETARY=Chinese (Simplified)_China.936
## [4] LC_NUMERIC=C                              
## [5] LC_TIME=Chinese (Simplified)_China.936    
## 
## attached base packages:
## [1] stats     graphics  grDevices utils     datasets  methods   base     
## 
## other attached packages:
##  [1] bindrcpp_0.2       ggpubr_0.1.6       magrittr_1.5      
##  [4] forcats_0.2.0      stringr_1.2.0      dplyr_0.7.4       
##  [7] purrr_0.2.4        readr_1.1.1        tidyr_0.7.2       
## [10] tibble_1.4.2       ggplot2_2.2.1.9000 tidyverse_1.2.1   
## 
## loaded via a namespace (and not attached):
##  [1] tidyselect_0.2.3  reshape2_1.4.3    haven_1.1.1      
##  [4] lattice_0.20-35   colorspace_1.3-2  htmltools_0.3.6  
##  [7] yaml_2.1.16       rlang_0.1.6       pillar_1.1.0     
## [10] foreign_0.8-69    glue_1.2.0        modelr_0.1.1     
## [13] readxl_1.0.0      bindr_0.1         plyr_1.8.4       
## [16] munsell_0.4.3     gtable_0.2.0      cellranger_1.1.0 
## [19] rvest_0.3.2       ggsci_2.8         psych_1.7.8      
## [22] evaluate_0.10.1   labeling_0.3      knitr_1.18       
## [25] parallel_3.4.3    broom_0.4.3       Rcpp_0.12.15     
## [28] scales_0.5.0.9000 backports_1.1.2   jsonlite_1.5     
## [31] mnormt_1.5-5      hms_0.4.1         digest_0.6.14    
## [34] stringi_1.1.6     grid_3.4.3        rprojroot_1.3-2  
## [37] cli_1.0.0         tools_3.4.3       lazyeval_0.2.1   
## [40] crayon_1.3.4      pkgconfig_2.0.1   xml2_1.2.0       
## [43] lubridate_1.7.1   assertthat_0.2.0  rmarkdown_1.8    
## [46] httr_1.3.1        rstudioapi_0.7    R6_2.2.2         
## [49] nlme_3.1-131      compiler_3.4.3
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>ggplot2高效实用指南</title>
      <link>https://taoyan.netlify.app/post/2017-09-19.ggplot2%E9%AB%98%E6%95%88%E5%AE%9E%E7%94%A8%E6%8C%87%E5%8D%97/</link>
      <pubDate>Tue, 19 Sep 2017 08:29:46 +0000</pubDate>
      <guid>https://taoyan.netlify.app/post/2017-09-19.ggplot2%E9%AB%98%E6%95%88%E5%AE%9E%E7%94%A8%E6%8C%87%E5%8D%97/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/emJBf4A306.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;简介&#34;&gt;简介&lt;/h2&gt;
&lt;p&gt;本文内容基本是来源于
&lt;a href=&#34;http://www.sthda.com/english/wiki/be-awesome-in-ggplot2-a-practical-guide-to-be-highly-effective-r-software-and-data-visualization&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;STHDA&lt;/a&gt;，这是一份十分详细的&lt;strong&gt;ggplot2&lt;/strong&gt;使用指南，因此我将其翻译成中文，一是有助于我自己学习理解，另外其他R语言爱好者或者可视化爱好者可以用来学习。翻译过程肯定不能十全十美，各位读者有建议或改进的话，十分欢迎发&lt;strong&gt;Email&lt;/strong&gt;(&lt;a href=&#34;mailto:tyan@zju.edu.cn&#34;&gt;tyan@zju.edu.cn&lt;/a&gt;)给我。&lt;/p&gt;
&lt;p&gt;
&lt;a href=&#34;https://ggplot2.tidyverse.org/reference/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;ggplot2&lt;/strong&gt;&lt;/a&gt;是由&lt;strong&gt;Hadley Wickham&lt;/strong&gt;创建的一个十分强大的可视化R包。按照&lt;strong&gt;ggplot2&lt;/strong&gt;的绘图理念，Plot(图)= data(数据集)+ Aesthetics(美学映射)+ Geometry(几何对象)：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;data: 数据集，主要是data frame；&lt;/li&gt;
&lt;li&gt;Aesthetics: 美学映射，比如将变量映射给x,y坐标轴，或者映射给颜色、大小、形状等图形属性；&lt;/li&gt;
&lt;li&gt;Geometry: 几何对象，比如柱形图、直方图、散点图、线图、密度图等。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在&lt;strong&gt;ggplot2&lt;/strong&gt;中有两个主要绘图函数：qplot()以及ggplot()。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;qplot(): 顾名思义，快速绘图；&lt;/li&gt;
&lt;li&gt;ggplot()：此函数才是&lt;strong&gt;ggplot2&lt;/strong&gt;的精髓，远比qplot()强大，可以一步步绘制十分复杂的图形。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;由&lt;strong&gt;ggplot2&lt;/strong&gt;绘制出来的ggplot图可以作为一个变量，然后由print()显示出来。&lt;/p&gt;
&lt;h2 id=&#34;图形类型&#34;&gt;图形类型&lt;/h2&gt;
&lt;p&gt;根据数据集，&lt;strong&gt;ggplot2&lt;/strong&gt;提供不同的方法绘制图形，主要是为下面几类数据类型提供绘图方法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一个变量x: 连续或离散&lt;/li&gt;
&lt;li&gt;两个变量x&amp;amp;y：连续和(或)离散&lt;/li&gt;
&lt;li&gt;连续双变量分布x&amp;amp;y: 都是连续&lt;/li&gt;
&lt;li&gt;误差棒&lt;/li&gt;
&lt;li&gt;地图&lt;/li&gt;
&lt;li&gt;三变量&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;安装及加载&#34;&gt;安装及加载&lt;/h2&gt;
&lt;p&gt;安装&lt;strong&gt;ggplot2&lt;/strong&gt;提供三种方式：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#直接安装tidyverse，一劳永逸（推荐,数据分析大礼包）
install.packages(&amp;quot;tidyverse&amp;quot;)
#直接安装ggplot2
install.packages(&amp;quot;ggplot2&amp;quot;)
#从Github上安装最新的版本，先安装devtools(如果没安装的话)
devtools::install_github(&amp;quot;tidyverse/ggplot2&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;加载&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;library(ggplot2)
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;数据准备&#34;&gt;数据准备&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;数据集应该数据框data.frame&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;本文将使用数据集&lt;strong&gt;mtcars&lt;/strong&gt;。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;#load the data set
data(mtcars)
df &amp;lt;- mtcars[, c(&amp;quot;mpg&amp;quot;,&amp;quot;cyl&amp;quot;,&amp;quot;wt&amp;quot;)]
#将cyl转为因子型factor
df$cyl &amp;lt;- as.factor(df$cyl)
head(df)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##                    mpg cyl    wt
## Mazda RX4         21.0   6 2.620
## Mazda RX4 Wag     21.0   6 2.875
## Datsun 710        22.8   4 2.320
## Hornet 4 Drive    21.4   6 3.215
## Hornet Sportabout 18.7   8 3.440
## Valiant           18.1   6 3.460
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;qplot&#34;&gt;qplot()&lt;/h2&gt;
&lt;p&gt;qplot()类似于R基本绘图函数plot(),可以快速绘制常见的几种图形：散点图、箱线图、小提琴图、直方图以及密度曲线图。其绘图格式为：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;qplot(x, y=NULL, data, geom=&amp;quot;auto&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;其中：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;x,y: 根据需要绘制的图形使用;&lt;/li&gt;
&lt;li&gt;data：数据集;&lt;/li&gt;
&lt;li&gt;geom：几何图形，变量x,y同时指定的话默认为散点图，只指定x的话默认为直方图。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;散点图&#34;&gt;散点图&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;qplot(x=mpg, y=wt, data=df, geom = &amp;quot;point&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/DlJaE4eke3.png?raw=true&#34; alt=&#34;&#34;&gt;
也可以添加平滑曲线&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;qplot(x=mpg, y=wt, data = df, geom = c(&amp;quot;point&amp;quot;, &amp;quot;smooth&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/i3lHIh2jdD.png?raw=true&#34; alt=&#34;&#34;&gt;
还有其他参数可以修改，比如点的形状、大小、颜色等&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;#将变量cyl映射给颜色和形状
qplot(x=mpg, y=wt, data = df, colour=cyl, shape=cyl)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/D6Aflkkhab.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;箱线图小提琴图点图&#34;&gt;箱线图、小提琴图、点图&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;#构造数据集
set.seed(1234)
wdata &amp;lt;- data.frame(
  sex=factor(rep(c(&amp;quot;F&amp;quot;, &amp;quot;M&amp;quot;), each=200)),
  weight=c(rnorm(200, 55), rnorm(200, 58))
)
head(wdata)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   sex   weight
## 1   F 53.79293
## 2   F 55.27743
## 3   F 56.08444
## 4   F 52.65430
## 5   F 55.42912
## 6   F 55.50606
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;箱线图&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;qplot(sex, weight, data = wdata, geom = &amp;quot;boxplot&amp;quot;, fill=sex)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/92K2e20idg.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;小提琴图&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;qplot(sex, weight, data = wdata, geom = &amp;quot;violin&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/3m8H660Cl9.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;点图&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;qplot(sex, weight, data = wdata, geom = &amp;quot;dotplot&amp;quot;, stackdir=&amp;quot;center&amp;quot;, binaxis=&amp;quot;y&amp;quot;, dotsize=0.5, color=sex)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/Hb7G4J8875.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;直方图密度图&#34;&gt;直方图、密度图&lt;/h3&gt;
&lt;p&gt;直方图&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;qplot(weight, data = wdata, geom = &amp;quot;histogram&amp;quot;, fill=sex)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/gd448CcLDb.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;密度图&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;qplot(weight, data = wdata, geom = &amp;quot;density&amp;quot;, color=sex, linetype=sex)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/dl77b5BDdm.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;ggplot&#34;&gt;ggplot()&lt;/h2&gt;
&lt;p&gt;上文中的qplot()绘制散点图：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;qplot(x=mpg, y=wt, data=df, geom = &amp;quot;point&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;在ggplot()中完全可以如下实现：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;ggplot(data=df, aes(x=mpg, y=wt))+
  geom_point()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/80fkCC4Kgh.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;改变点形状、大小、颜色等属性&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;ggplot(data=df, aes(x=mpg, y=wt))+geom_point(color=&amp;quot;blue&amp;quot;, size=2, shape=23)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/6LbL12Jmhm.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;绘图过程中常常要用到转换(transformation),这时添加图层的另一个方法是用stat_*()函数。
下例中的geom_density()与stat_density()是等价的&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ggplot(wdata, aes(x=weight))+geom_density()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;等价于&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;ggplot(wdata, aes(x=weight))+stat_density()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/D3ca6EAf3F.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;对于每一种几何图形。&lt;strong&gt;ggplot2&lt;/strong&gt; 基本都提供了 geom_*()*和 stat_*()*&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;一个变量连续型&#34;&gt;一个变量：连续型&lt;/h3&gt;
&lt;p&gt;使用数据集wdata，先计算出不同性别的体重平均值&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;library(plyr)
mu &amp;lt;- ddply(wdata, &amp;quot;sex&amp;quot;, summarise, grp.mean=mean(weight))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;先绘制一个图层a,后面逐步添加图层&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;a &amp;lt;- ggplot(wdata, aes(x=weight))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;可能添加的图层有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对于一个连续变量：
&lt;ul&gt;
&lt;li&gt;面积图geom_area()&lt;/li&gt;
&lt;li&gt;密度图geom_density()&lt;/li&gt;
&lt;li&gt;点图geom_dotplot()&lt;/li&gt;
&lt;li&gt;频率多边图geom_freqpoly()&lt;/li&gt;
&lt;li&gt;直方图geom_histogram()&lt;/li&gt;
&lt;li&gt;经验累积密度图stat_ecdf()&lt;/li&gt;
&lt;li&gt;QQ图stat_qq()&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;对于一个离散变量：
&lt;ul&gt;
&lt;li&gt;条形图geom_bar()&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/gcLBC7cG47.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;面积图&#34;&gt;面积图&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;a+geom_area(stat = &amp;quot;bin&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/J288ccH2m5.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;改变颜色&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;a+geom_area(aes(fill=sex), stat = &amp;quot;bin&amp;quot;, alpha=0.6)+
  theme_classic()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/LIj4mJbKb2.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注意：y轴默认为变量weight的数量即count，如果y轴要显示密度，可用以下代码：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;a+geom_area(aes(y=..density..), stat = &amp;quot;bin&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/kkCc85KCeJ.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;可以通过修改不同属性如透明度、填充颜色、大小、线型等自定义图形：&lt;/p&gt;
&lt;h4 id=&#34;密度图&#34;&gt;密度图&lt;/h4&gt;
&lt;p&gt;使用以下函数：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;geom_density():绘制密度图&lt;/li&gt;
&lt;li&gt;geom_vline():添加竖直线&lt;/li&gt;
&lt;li&gt;scale_color_manual():手动修改颜色&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;a+geom_density()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/c1EL7I2a49.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;根据sex修改颜色，将sex映射给line颜色&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;a+geom_density(aes(color=sex))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/72Ahbf7K6h.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;修改填充颜色以及透明度&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;a+geom_density(aes(fill=sex), alpha=0.4)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/ejijLE9IfG.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;添加均值线以及手动修改颜色&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;a+geom_density(aes(color=sex))+
  geom_vline(data=mu, aes(xintercept=grp.mean, color=sex), linetype=&amp;quot;dashed&amp;quot;)+
  scale_color_manual(values = c(&amp;quot;red&amp;quot;, &amp;quot;blue&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/mAFhH7lleK.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;点图&#34;&gt;点图&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;a+geom_dotplot()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/H1mDL0HCJI.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;将sex映射给颜色&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;a+geom_dotplot(aes(fill=sex))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/6bfHaEcBAl.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;手动修改颜色&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;a+geom_dotplot(aes(fill=sex))+
  scale_fill_manual(values=c(&amp;quot;#999999&amp;quot;, &amp;quot;#E69F00&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/kiE9Lci30h.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;频率多边图&#34;&gt;频率多边图&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;a+geom_freqpoly()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/K40Fch448J.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;y轴显示为密度&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;a+geom_freqpoly(aes(y=..density..))+
  theme_minimal()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/CgCf1eAgf8.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;修改颜色以及线型&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;a+geom_freqpoly(aes(color=sex, linetype=sex))+
  theme_minimal()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/jaaBibcFjH.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;直方图&#34;&gt;直方图&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;a+geom_histogram()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/bHilai3a9l.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;将sex映射给线颜色&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;a+geom_histogram(aes(color=sex), fill=&amp;quot;white&amp;quot;, position = &amp;quot;dodge&amp;quot;)+theme_classic()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/eD7iLDJId1.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;经验累积密度图&#34;&gt;经验累积密度图&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;a+stat_ecdf()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/f83Imkm4jm.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;qq图&#34;&gt;QQ图&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;ggplot(data = mtcars, aes(sample=mpg))+stat_qq()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/e7G7hbeLID.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;一个离散变量&#34;&gt;一个离散变量&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;#加载数据集
data(mpg)
b &amp;lt;- ggplot(mpg, aes(x=fl))
b+geom_bar()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/b4FJFb7H99.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;修改填充颜色&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;b+geom_bar(fill=&amp;quot;steelblue&amp;quot;, color=&amp;quot;black&amp;quot;)+theme_classic()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/ih6I2ammG4.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;两个变量xy皆连续&#34;&gt;两个变量：x,y皆连续&lt;/h3&gt;
&lt;p&gt;使用数据集mtcars， 先创建一个ggplot图层&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;b &amp;lt;- ggplot(data = mtcars, aes(x=wt, y=mpg))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;可能添加的图层有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;geom_point():散点图&lt;/li&gt;
&lt;li&gt;geom_smooth():平滑线&lt;/li&gt;
&lt;li&gt;geom_quantile():分位线&lt;/li&gt;
&lt;li&gt;geom_rug():边际地毯线&lt;/li&gt;
&lt;li&gt;geom_jitter():避免重叠&lt;/li&gt;
&lt;li&gt;geom_text():添加文本注释&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/ld1EAJgd88.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;散点图-1&#34;&gt;散点图&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;b+geom_point()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/796GlJi3Al.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;将变量cyl映射给点的颜色和形状&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;b + geom_point(aes(color = factor(cyl), shape = factor(cyl)))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/J6dfJ1EL33.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;自定义颜色&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;b+geom_point(aes(color=factor(cyl), shape=factor(cyl)))+
  scale_color_manual(values=c(&amp;quot;#999999&amp;quot;, &amp;quot;#E69F00&amp;quot;, &amp;quot;#56B4E9&amp;quot;))+theme_classic()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/3695bEj0Ha.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;平滑线&#34;&gt;平滑线&lt;/h4&gt;
&lt;p&gt;可以添加回归曲线&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;b+geom_smooth()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/1hJGKGeLc2.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;散点图+回归线&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;b+geom_point()+
  geom_smooth(method = &amp;quot;lm&amp;quot;, se=FALSE)#去掉置信区间
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/Gl47fkb2c2.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;使用loess方法&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;b+geom_point()+
  geom_smooth(method = &amp;quot;loess&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/6jaCLAL3Fc.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;将变量映射给颜色和形状&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;b+geom_point(aes(color=factor(cyl), shape=factor(cyl)))+
  geom_smooth(aes(color=factor(cyl), shape=factor(cyl)), method = &amp;quot;lm&amp;quot;, se=FALSE, fullrange=TRUE)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/7hjfJ89K4c.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;分位线&#34;&gt;分位线&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;ggplot(data = mpg, aes(cty, hwy))+
  geom_point()+geom_quantile()+
  theme_minimal()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/l0F005kgih.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;边际地毯线&#34;&gt;边际地毯线&lt;/h4&gt;
&lt;p&gt;使用数据集&lt;strong&gt;faithful&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;ggplot(data = faithful, aes(x=eruptions, y=waiting))+
  geom_point()+geom_rug()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/7H7BlJE35k.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;避免重叠&#34;&gt;避免重叠&lt;/h4&gt;
&lt;p&gt;实际上&lt;code&gt;geom_jitter()&lt;/code&gt;是&lt;code&gt;geom_point(position=&amp;quot;jitter&amp;quot;)&lt;/code&gt;的简称,下面使用数据集&lt;strong&gt;mpg&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;p &amp;lt;- ggplot(data = mpg, aes(displ, hwy))
p+geom_point()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/Ad2aBaaEED.png?raw=true&#34; alt=&#34;&#34;&gt;
增加抖动防止重叠&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;p+geom_jitter(width = 0.5, height = 0.5)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/DmKBbIGK2c.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;其中两个参数：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;width：x轴方向的抖动幅度&lt;/li&gt;
&lt;li&gt;height：y轴方向的抖动幅度&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;文本注释&#34;&gt;文本注释&lt;/h4&gt;
&lt;p&gt;参数label用来指定注释标签&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;b+geom_text(aes(label=rownames(mtcars)))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/L6CaLD26ga.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;两个变量连续二元分布&#34;&gt;两个变量：连续二元分布&lt;/h3&gt;
&lt;p&gt;使用数据集&lt;strong&gt;diamonds&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;head(diamonds[, c(&amp;quot;carat&amp;quot;, &amp;quot;price&amp;quot;)])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 6 x 2
##   carat price
##   &amp;lt;dbl&amp;gt; &amp;lt;int&amp;gt;
## 1  0.23   326
## 2  0.21   326
## 3  0.23   327
## 4  0.29   334
## 5  0.31   335
## 6  0.24   336
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;创建ggplot图层,后面再逐步添加图层&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;c &amp;lt;- ggplot(data=diamonds, aes(carat, price))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;可添加的图层有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;geom_bin2d(): 二维封箱热图&lt;/li&gt;
&lt;li&gt;geom_hex(): 六边形封箱图&lt;/li&gt;
&lt;li&gt;geom_density_2d(): 二维等高线密度图&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/mIdJKh6F1G.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;二维封箱热图&#34;&gt;二维封箱热图&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;geom_bin2d()&lt;/code&gt;将点的数量用矩形封装起来，通过颜色深浅来反映点密度&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;c+geom_bin2d()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/BgC3g377mE.png?raw=true&#34; alt=&#34;&#34;&gt;
设置bin的数量&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;c+geom_bin2d(bins=150)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/4ejegHkcbF.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;六边形封箱图&#34;&gt;六边形封箱图&lt;/h4&gt;
&lt;p&gt;geom_hex()依赖于另一个R包&lt;strong&gt;hexbin&lt;/strong&gt;，所以没安装的先安装：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;install.packages(&amp;quot;hexbin&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;library(hexbin)
c+geom_hex()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/f9Fbl2IAKj.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;修改bin的数目&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;c+geom_hex(bins=10)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/bIc44CGdC8.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;二维等高线密度图&#34;&gt;二维等高线密度图&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;sp &amp;lt;- ggplot(faithful, aes(x=eruptions, y=waiting))
sp+geom_point()+ geom_density_2d()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/imG9fLLlb6.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;两个变量连续函数&#34;&gt;两个变量：连续函数&lt;/h3&gt;
&lt;p&gt;主要是如何通过线来连接两个变量，使用数据集&lt;strong&gt;economics&lt;/strong&gt;。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;head(economics)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 6 x 6
##         date   pce    pop psavert uempmed unemploy
##       &amp;lt;date&amp;gt; &amp;lt;dbl&amp;gt;  &amp;lt;int&amp;gt;   &amp;lt;dbl&amp;gt;   &amp;lt;dbl&amp;gt;    &amp;lt;int&amp;gt;
## 1 1967-07-01 507.4 198712    12.5     4.5     2944
## 2 1967-08-01 510.5 198911    12.5     4.7     2945
## 3 1967-09-01 516.3 199113    11.7     4.6     2958
## 4 1967-10-01 512.9 199311    12.5     4.9     3143
## 5 1967-11-01 518.1 199498    12.5     4.7     3066
## 6 1967-12-01 525.8 199657    12.1     4.8     3018
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;先创建一个ggplot图层，后面逐步添加图层&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;d &amp;lt;- ggplot(data = economics, aes(x=date, y=unemploy))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;可添加的图层有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;geom_area():面积图&lt;/li&gt;
&lt;li&gt;geom_line()：折线图&lt;/li&gt;
&lt;li&gt;geom_step(): 阶梯图&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;面积图-1&#34;&gt;面积图&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;d+geom_area()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/dj4fHa6Kh2.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;线图&#34;&gt;线图&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;d+geom_line()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/DhLc531J92.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;阶梯图&#34;&gt;阶梯图&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;set.seed(1111)
ss &amp;lt;- economics[sample(1:nrow(economics), 20),]
ggplot(ss, aes(x=date, y=unemploy))+
  geom_step()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/l5lHl5944G.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;两个变量x离散y连续&#34;&gt;两个变量：x离散，y连续&lt;/h3&gt;
&lt;p&gt;使用数据集&lt;strong&gt;ToothGrowth&lt;/strong&gt;,其中的变量len(Tooth length)是连续变量，dose是离散变量。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;ToothGrowth$dose &amp;lt;- as.factor(ToothGrowth$dose)
head(ToothGrowth)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    len supp dose
## 1  4.2   VC  0.5
## 2 11.5   VC  0.5
## 3  7.3   VC  0.5
## 4  5.8   VC  0.5
## 5  6.4   VC  0.5
## 6 10.0   VC  0.5
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;创建图层&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;e &amp;lt;- ggplot(data = ToothGrowth, aes(x=dose, y=len))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;可添加的图层有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;geom_boxplot(): 箱线图&lt;/li&gt;
&lt;li&gt;geom_violin()：小提琴图&lt;/li&gt;
&lt;li&gt;geom_dotplot()：点图&lt;/li&gt;
&lt;li&gt;geom_jitter(): 带状图&lt;/li&gt;
&lt;li&gt;geom_line(): 线图&lt;/li&gt;
&lt;li&gt;geom_bar(): 条形图&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/3F447J6d7L.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;箱线图&#34;&gt;箱线图&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;e+geom_boxplot()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/37J7f7hfCJ.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;添加有缺口的箱线图&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;e+geom_boxplot(notch = TRUE)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/952cibHB9E.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;按dose分组映射给颜色&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;e+geom_boxplot(aes(color=dose))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/15dJjbIGkB.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;将dose映射给填充颜色&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;e+geom_boxplot(aes(fill=dose))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/Am1A6Efaa6.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;按supp进行分类并映射给填充颜色&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;ggplot(ToothGrowth, aes(x=dose, y=len))+ geom_boxplot(aes(fill=supp))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/jfFFF1Hh99.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;小提琴图&#34;&gt;小提琴图&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;e+geom_violin(trim = FALSE)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/fG1DmbmaIB.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;添加中值点&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;e+geom_violin(trim = FALSE)+
  stat_summary(fun.data = mean_sdl, fun.args = list(mult=1), 
               geom=&amp;quot;pointrange&amp;quot;, color=&amp;quot;red&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/GAkDaEHJe2.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;与箱线图结合&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;e+geom_violin(trim = FALSE)+
  geom_boxplot(width=0.2)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/igef2H376K.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;将dose映射给颜色进行分组&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;e+geom_violin(aes(color=dose), trim = FALSE)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/g6G0aI5DaE.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;点图-1&#34;&gt;点图&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;e+geom_dotplot(binaxis = &amp;quot;y&amp;quot;, stackdir = &amp;quot;center&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/60aB2FKkBj.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;添加中值点&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;e + geom_dotplot(binaxis = &amp;quot;y&amp;quot;, stackdir = &amp;quot;center&amp;quot;) + 
  stat_summary(fun.data=mean_sdl, color = &amp;quot;red&amp;quot;,geom = &amp;quot;pointrange&amp;quot;,fun.args=list(mult=1))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/B1A5h69HDF.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;与箱线图结合&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;e + geom_boxplot() + 
  geom_dotplot(binaxis = &amp;quot;y&amp;quot;, stackdir = &amp;quot;center&amp;quot;) 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/JkebcfeiHH.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;添加小提琴图&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;e + geom_violin(trim = FALSE) +
  geom_dotplot(binaxis=&#39;y&#39;, stackdir=&#39;center&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/DGm19F7hde.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;将dose映射给颜色以及填充色&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;e + geom_dotplot(aes(color = dose, fill = dose), 
                 binaxis = &amp;quot;y&amp;quot;, stackdir = &amp;quot;center&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/AGABHiI43E.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;带状图&#34;&gt;带状图&lt;/h4&gt;
&lt;p&gt;带状图是一种一维散点图，当样本量很小时，与箱线图相当&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;e + geom_jitter(position=position_jitter(0.2))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/KE0EHFl7h0.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;添加中值点&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;e + geom_jitter(position=position_jitter(0.2)) + 
  stat_summary(fun.data=&amp;quot;mean_sdl&amp;quot;,  fun.args = list(mult=1), 
               geom=&amp;quot;pointrange&amp;quot;, color = &amp;quot;red&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/GF9c4kHDKI.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;p&gt;与点图结合&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;e + geom_jitter(position=position_jitter(0.2)) + 
  geom_dotplot(binaxis = &amp;quot;y&amp;quot;, stackdir = &amp;quot;center&amp;quot;) 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/238j5KGmEB.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;p&gt;与小提琴图结合&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;e + geom_violin(trim = FALSE) +
  geom_jitter(position=position_jitter(0.2))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/lEADE3fA1h.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;p&gt;将dose映射给颜色和形状&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;e +  geom_jitter(aes(color = dose, shape = dose),
                 position=position_jitter(0.2))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/7lKfKkE5d6.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;线图-1&#34;&gt;线图&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;#构造数据集
df &amp;lt;- data.frame(supp=rep(c(&amp;quot;VC&amp;quot;, &amp;quot;OJ&amp;quot;), each=3),
                dose=rep(c(&amp;quot;D0.5&amp;quot;, &amp;quot;D1&amp;quot;, &amp;quot;D2&amp;quot;),2),
                len=c(6.8, 15, 33, 4.2, 10, 29.5))
head(df)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   supp dose  len
## 1   VC D0.5  6.8
## 2   VC   D1 15.0
## 3   VC   D2 33.0
## 4   OJ D0.5  4.2
## 5   OJ   D1 10.0
## 6   OJ   D2 29.5
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;将supp映射线型&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;ggplot(df, aes(x=dose, y=len, group=supp)) +
  geom_line(aes(linetype=supp))+
  geom_point()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/Bjl125A2Im.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;p&gt;修改线型、点的形状以及颜色&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;ggplot(df, aes(x=dose, y=len, group=supp)) +
  geom_line(aes(linetype=supp, color = supp))+
  geom_point(aes(shape=supp, color = supp))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/j9e39B9cKB.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;条形图&#34;&gt;条形图&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;#构造数据集
df &amp;lt;- data.frame(dose=c(&amp;quot;D0.5&amp;quot;, &amp;quot;D1&amp;quot;, &amp;quot;D2&amp;quot;),
                len=c(4.2, 10, 29.5))
head(df)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   dose  len
## 1 D0.5  4.2
## 2   D1 10.0
## 3   D2 29.5
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;df2 &amp;lt;- data.frame(supp=rep(c(&amp;quot;VC&amp;quot;, &amp;quot;OJ&amp;quot;), each=3),
                dose=rep(c(&amp;quot;D0.5&amp;quot;, &amp;quot;D1&amp;quot;, &amp;quot;D2&amp;quot;),2),
                len=c(6.8, 15, 33, 4.2, 10, 29.5))
head(df2)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   supp dose  len
## 1   VC D0.5  6.8
## 2   VC   D1 15.0
## 3   VC   D2 33.0
## 4   OJ D0.5  4.2
## 5   OJ   D1 10.0
## 6   OJ   D2 29.5
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;创建图层&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;f &amp;lt;- ggplot(df, aes(x = dose, y = len))
f + geom_bar(stat = &amp;quot;identity&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/FF7A37l9j4.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;p&gt;修改填充色以及添加标签&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;f + geom_bar(stat=&amp;quot;identity&amp;quot;, fill=&amp;quot;steelblue&amp;quot;)+
  geom_text(aes(label=len), vjust=-0.3, size=3.5)+
  theme_minimal()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/hBa9871IE9.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;p&gt;将dose映射给条形图颜色&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;f + geom_bar(aes(color = dose),
             stat=&amp;quot;identity&amp;quot;, fill=&amp;quot;white&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/HIGAAJLiFl.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;p&gt;修改填充色&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;f + geom_bar(aes(fill = dose), stat=&amp;quot;identity&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/LGFlfJGmHi.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;p&gt;将变量supp映射给填充色，从而达到分组效果&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;g &amp;lt;- ggplot(data=df2, aes(x=dose, y=len, fill=supp)) 
g + geom_bar(stat = &amp;quot;identity&amp;quot;)#position默认为stack
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/dLGm6lij04.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;p&gt;修改position为dodge&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;g + geom_bar(stat=&amp;quot;identity&amp;quot;, position=position_dodge())
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/Di23jj9kC9.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;两个变量xy皆离散&#34;&gt;两个变量：x、y皆离散&lt;/h3&gt;
&lt;p&gt;使用数据集diamonds中的两个离散变量color以及cut&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;ggplot(diamonds, aes(cut, color)) +
  geom_jitter(aes(color = cut), size = 0.5)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/c8Fh5DI7cE.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;两个变量绘制误差图&#34;&gt;两个变量：绘制误差图&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;df &amp;lt;- ToothGrowth
df$dose &amp;lt;- as.factor(df$dose)
head(df)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    len supp dose
## 1  4.2   VC  0.5
## 2 11.5   VC  0.5
## 3  7.3   VC  0.5
## 4  5.8   VC  0.5
## 5  6.4   VC  0.5
## 6 10.0   VC  0.5
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;绘制误差图需要知道均值以及标准误，下面这个函数用来计算每组的均值以及标准误。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;data_summary &amp;lt;- function(data, varname, grps){
  require(plyr)
  summary_func &amp;lt;- function(x, col){
    c(mean = mean(x[[col]], na.rm=TRUE),
      sd = sd(x[[col]], na.rm=TRUE))
  }
  data_sum&amp;lt;-ddply(data, grps, .fun=summary_func, varname)
  data_sum &amp;lt;- rename(data_sum, c(&amp;quot;mean&amp;quot; = varname))
 return(data_sum)
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;计算均值以及标准误&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;df2 &amp;lt;- data_summary(df, varname=&amp;quot;len&amp;quot;, grps= &amp;quot;dose&amp;quot;)
# Convert dose to a factor variable
df2$dose=as.factor(df2$dose)
head(df2)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   dose    len       sd
## 1  0.5 10.605 4.499763
## 2    1 19.735 4.415436
## 3    2 26.100 3.774150
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;创建图层&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;f &amp;lt;- ggplot(df2, aes(x = dose, y = len, 
                     ymin = len-sd, ymax = len+sd))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;可添加的图层有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;geom_crossbar(): 空心柱，上中下三线分别代表ymax、mean、ymin&lt;/li&gt;
&lt;li&gt;geom_errorbar(): 误差棒&lt;/li&gt;
&lt;li&gt;geom_errorbarh(): 水平误差棒&lt;/li&gt;
&lt;li&gt;geom_linerange()：竖直误差线&lt;/li&gt;
&lt;li&gt;geom_pointrange()：中间为一点的误差线&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;具体如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/521m2AHCDg.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;geom_crossbar&#34;&gt;geom_crossbar()&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;f+geom_crossbar()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/18EIA26lgI.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;p&gt;将dose映射给颜色&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;f+geom_crossbar(aes(color=dose))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/jH5eDIHjHL.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;p&gt;自定义颜色&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;f+geom_crossbar(aes(color=dose))+
  scale_color_manual(values = c(&amp;quot;#999999&amp;quot;, &amp;quot;#E69F00&amp;quot;, &amp;quot;#56B4E9&amp;quot;))+theme_classic()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/jcBCFdKlmH.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;p&gt;修改填充色&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;f+geom_crossbar(aes(fill=dose))+
  scale_fill_manual(values = c(&amp;quot;#999999&amp;quot;, &amp;quot;#E69F00&amp;quot;, &amp;quot;#56B4E9&amp;quot;))+
  theme_classic()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/6c5A4l9d2D.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;p&gt;通过将supp映射给颜色实现分组，可以利用函数stat_summary()来计算mean和sd&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;f &amp;lt;- ggplot(df, aes(x=dose, y=len, color=supp))
f+stat_summary(fun.data = mean_sdl, fun.args = list(mult=1), geom=&amp;quot;crossbar&amp;quot;, width=0.6, position = position_dodge(0.8))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/3e3Ic9486G.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;误差棒&#34;&gt;误差棒&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;f &amp;lt;- ggplot(df2, aes(x=dose, y=len, ymin=len-sd, ymax=len+sd))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;将dose映射给颜色&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;f+geom_errorbar(aes(color=dose), width=0.2)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/HLJe8aLajg.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;p&gt;与线图结合&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;f+geom_line(aes(group=1))+
  geom_errorbar(width=0.15)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/2E0aKa6GgJ.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;p&gt;与条形图结合，并将变量dose映射给颜色&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;f+geom_bar(aes(color=dose), stat = &amp;quot;identity&amp;quot;, fill=&amp;quot;white&amp;quot;)+
  geom_errorbar(aes(color=dose), width=0.1)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/1GllA47ajF.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;水平误差棒&#34;&gt;水平误差棒&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;#构造数据集
df2 &amp;lt;- data_summary(ToothGrowth, varname=&amp;quot;len&amp;quot;, grps = &amp;quot;dose&amp;quot;)
df2$dose &amp;lt;- as.factor(df2$dose)
head(df2)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   dose    len       sd
## 1  0.5 10.605 4.499763
## 2    1 19.735 4.415436
## 3    2 26.100 3.774150
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;创建图层&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;f &amp;lt;- ggplot(data = df2, aes(x=len, y=dose,xmin=len-sd, xmax=len+sd))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;参数xmin与xmax用来设置水平误差棒&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;f+geom_errorbarh()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/2KAK9FgCDF.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;p&gt;通过映射实现分组&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;f+geom_errorbarh(aes(color=dose))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/G3cJmg13EI.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;geom_linerange与geom_pointrange&#34;&gt;geom_linerange()与geom_pointrange()&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;f &amp;lt;- ggplot(df2, aes(x=dose, y=len, ymin=len-sd, ymax=len+sd))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;line range&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;f+geom_linerange()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/95BJEFgb1c.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;p&gt;point range&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;f+geom_pointrange()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/5kAAd2dhJl.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;点图误差棒&#34;&gt;点图+误差棒&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;g &amp;lt;- ggplot(df, aes(x=dose, y=len))+
  geom_dotplot(binaxis = &amp;quot;y&amp;quot;, stackdir = &amp;quot;center&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;添加geom_crossbar()&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;g+stat_summary(fun.data = mean_sdl, fun.args = list(mult=1), geom=&amp;quot;crossbar&amp;quot;, color=&amp;quot;red&amp;quot;, width=0.1)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/gb1G7K8D25.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;p&gt;添加geom_errorbar()&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;g + stat_summary(fun.data=mean_sdl, fun.args = list(mult=1), 
        geom=&amp;quot;errorbar&amp;quot;, color=&amp;quot;red&amp;quot;, width=0.2) +
  stat_summary(fun.y=mean, geom=&amp;quot;point&amp;quot;, color=&amp;quot;red&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/HBjmlf502b.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;p&gt;添加geom_pointrange()&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;g + stat_summary(fun.data=mean_sdl, fun.args = list(mult=1), 
                 geom=&amp;quot;pointrange&amp;quot;, color=&amp;quot;red&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/E3K5E0cg9B.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;两个变量地图绘制&#34;&gt;两个变量：地图绘制&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;ggplot2&lt;/strong&gt;提供了绘制地图的函数&lt;code&gt;geom_map()&lt;/code&gt;，依赖于包&lt;strong&gt;maps&lt;/strong&gt;提供地理信息。
安装&lt;strong&gt;map&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;install.paclages(&amp;quot;maps&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;下面将绘制美国地图，数据集采用&lt;strong&gt;USArrests&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;library(maps)
head(USArrests)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##            Murder Assault UrbanPop Rape
## Alabama      13.2     236       58 21.2
## Alaska       10.0     263       48 44.5
## Arizona       8.1     294       80 31.0
## Arkansas      8.8     190       50 19.5
## California    9.0     276       91 40.6
## Colorado      7.9     204       78 38.7
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;对数据进行整理一下,添加一列state&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;crimes &amp;lt;- data.frame(state=tolower(rownames(USArrests)), USArrests)
head(crimes)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##            Murder Assault UrbanPop Rape
## Alabama      13.2     236       58 21.2
## Alaska       10.0     263       48 44.5
## Arizona       8.1     294       80 31.0
## Arkansas      8.8     190       50 19.5
## California    9.0     276       91 40.6
## Colorado      7.9     204       78 38.7
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;#数据重铸
library(reshape2)
crimesm &amp;lt;- melt(crimes, id=1)
head(crimesm)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##        state variable value
## 1    alabama   Murder  13.2
## 2     alaska   Murder  10.0
## 3    arizona   Murder   8.1
## 4   arkansas   Murder   8.8
## 5 california   Murder   9.0
## 6   colorado   Murder   7.9
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;map_data &amp;lt;- map_data(&amp;quot;state&amp;quot;)
#绘制地图，使用Murder进行着色
ggplot(crimes, aes(map_id=state))+
  geom_map(aes(fill=Murder), map=map_data)+
  expand_limits(x=map_data$long, y=map_data$lat)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/I05fI783fH.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;三个变量&#34;&gt;三个变量&lt;/h3&gt;
&lt;p&gt;使用数据集&lt;strong&gt;mtcars&lt;/strong&gt;，首先绘制一个相关性图&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;#构造数据
df &amp;lt;- mtcars[, c(1,3,4,5,6,7)]
head(df)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##                    mpg disp  hp drat    wt  qsec
## Mazda RX4         21.0  160 110 3.90 2.620 16.46
## Mazda RX4 Wag     21.0  160 110 3.90 2.875 17.02
## Datsun 710        22.8  108  93 3.85 2.320 18.61
## Hornet 4 Drive    21.4  258 110 3.08 3.215 19.44
## Hornet Sportabout 18.7  360 175 3.15 3.440 17.02
## Valiant           18.1  225 105 2.76 3.460 20.22
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;cormat &amp;lt;- round(cor(df), 2)
cormat_melt &amp;lt;- melt(cormat)
head(cormat)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##        mpg  disp    hp  drat    wt  qsec
## mpg   1.00 -0.85 -0.78  0.68 -0.87  0.42
## disp -0.85  1.00  0.79 -0.71  0.89 -0.43
## hp   -0.78  0.79  1.00 -0.45  0.66 -0.71
## drat  0.68 -0.71 -0.45  1.00 -0.71  0.09
## wt   -0.87  0.89  0.66 -0.71  1.00 -0.17
## qsec  0.42 -0.43 -0.71  0.09 -0.17  1.00
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;创建图层：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;g &amp;lt;- ggplot(cormat_melt, aes(x=Var1, y=Var2))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;在此基础上可添加的图层有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;geom_tile(): 瓦片图&lt;/li&gt;
&lt;li&gt;geom_raster(): 光栅图，瓦片图的一种，只不过所有的tiles都是一样的大小&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;现在使用使用geom_tile()绘制相关性矩阵图，我们这里这绘制下三角矩阵图，首先要整理数据：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;#获得相关矩阵的下三角
get_lower_tri &amp;lt;- function(cormat){
  cormat[upper.tri(cormat)] &amp;lt;- NA
  return(cormat)
}
#获得相关矩阵的上三角
get_upper_tri &amp;lt;- function(cormat){
  cormat[lower.tri(cormat)] &amp;lt;- NA
  return(cormat)
}
upper_tri &amp;lt;- get_upper_tri(cormat = cormat)
head(upper_tri)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##      mpg  disp    hp  drat    wt  qsec
## mpg    1 -0.85 -0.78  0.68 -0.87  0.42
## disp  NA  1.00  0.79 -0.71  0.89 -0.43
## hp    NA    NA  1.00 -0.45  0.66 -0.71
## drat  NA    NA    NA  1.00 -0.71  0.09
## wt    NA    NA    NA    NA  1.00 -0.17
## qsec  NA    NA    NA    NA    NA  1.00
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;绘制相关矩阵图&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;#数据重铸
upper_tri_melt &amp;lt;- melt(upper_tri, na.rm = TRUE)
ggplot(data=upper_tri_melt, aes(Var1, y=Var2, fill=value))+
  geom_tile(color=&amp;quot;white&amp;quot;)+
  scale_fill_gradient2(low = &amp;quot;blue&amp;quot;, high = &amp;quot;red&amp;quot;, mid = &amp;quot;white&amp;quot;, midpoint = 0, limit=c(-1, 1), space = &amp;quot;Lab&amp;quot;, name=&amp;quot;Person\nCorrelation&amp;quot;)+
  theme_minimal()+
  theme(axis.text.x = element_text(angle = 45, vjust = 1, size = 12, hjust = 1))+
  coord_fixed()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/LL96JDbLi4.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;上图中蓝色代表互相关，红色代表正相关，至于coord_fixed()保证x，y轴比例为1&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;可以看出上图顺序有点乱，我们可以对相关矩阵进行排序&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;#构造函数
reorder_cormat &amp;lt;- function(cormat){
  dd &amp;lt;- as.dist((1-cormat)/2)
  hc &amp;lt;- hclust(dd)
  cormat &amp;lt;- cormat[hc$order, hc$order]
}
cormat &amp;lt;- reorder_cormat(cormat)
lower_tri &amp;lt;- get_lower_tri(cormat)
lower_tri_melt &amp;lt;- melt(lower_tri, na.rm = TRUE)
head(lower_tri_melt)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   Var1 Var2 value
## 1   hp   hp  1.00
## 2 disp   hp  0.79
## 3   wt   hp  0.66
## 4 qsec   hp -0.71
## 5  mpg   hp -0.78
## 6 drat   hp -0.45
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;绘制图形&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;ggheatmap &amp;lt;- ggplot(lower_tri_melt, aes(Var1, Var2, fill=value))+
  geom_tile(color=&amp;quot;white&amp;quot;)+
  scale_fill_gradient2(low = &amp;quot;blue&amp;quot;, high = &amp;quot;red&amp;quot;, mid = &amp;quot;white&amp;quot;, midpoint = 0, limit=c(-1, 1), space = &amp;quot;Lab&amp;quot;, name=&amp;quot;Person\nCorrelation&amp;quot;)+
  theme_minimal()+
 theme(axis.text.x = element_text(angle = 45, vjust = 1, 
    size = 12, hjust = 1))+
 coord_fixed()
print(ggheatmap)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/FDdmmgjJL5.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;图元多边形路径带状射线线段矩形等&#34;&gt;图元：多边形、路径、带状、射线（线段）、矩形等&lt;/h3&gt;
&lt;p&gt;本节主要讲述的是添加图形元件，将用到一下函数：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;geom_polygon()：添加多边形&lt;/li&gt;
&lt;li&gt;geom_path(): 路径&lt;/li&gt;
&lt;li&gt;geom_ribbon(): 带状&lt;/li&gt;
&lt;li&gt;geom_segment(): 射线、线段&lt;/li&gt;
&lt;li&gt;geom_curve(): 曲线&lt;/li&gt;
&lt;li&gt;geom_rect(): 二维矩形&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;添加多边形&#34;&gt;添加多边形&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;library(dplyr)
map_data(&amp;quot;world&amp;quot;)%&amp;gt;%
  filter(region==c(&amp;quot;China&amp;quot;, &amp;quot;Taiwan&amp;quot;))%&amp;gt;%
  ggplot(aes(x=long, y=lat, group=group))+
  geom_polygon(fill=&amp;quot;red&amp;quot;, color=&amp;quot;black&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/Gj3I6E4Kh6.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;添加路径带状矩形&#34;&gt;添加路径、带状、矩形&lt;/h4&gt;
&lt;p&gt;创建图层&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;h &amp;lt;- ggplot(economics, aes(date, unemploy))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;添加路径&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;h+geom_path()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/hKCeGeja0m.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;p&gt;添加带状&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;h+geom_ribbon(aes(ymin=unemploy-800, ymax=unemploy+800), fill = &amp;quot;grey70&amp;quot;)+geom_line(aes(y=unemploy))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/FKG84CB8f1.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;p&gt;添加矩形&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;h+
  geom_path()+
  geom_rect(aes(xmin=as.Date(&amp;quot;1980-01-01&amp;quot;), ymin=-Inf, xmax=as.Date(&amp;quot;1985-01-01&amp;quot;), ymax=Inf), fill=&amp;quot;steelblue&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/c5iBDliiKB.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;添加线段&#34;&gt;添加线段&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;i &amp;lt;- ggplot(mtcars, aes(wt, mpg))+geom_point()
#添加线段
i+geom_segment(aes(x=2, y=15, xend=3, yend=15))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/lF9GiCg023.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;p&gt;添加箭头&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;i+geom_segment(aes(x=5, y=30, xend=3.5, yend=25), arrow = arrow(length = unit(0.5, &amp;quot;cm&amp;quot;)))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/ebGE0KdHlc.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;添加曲线&#34;&gt;添加曲线&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;i+geom_curve(aes(x=2, y=15, xend=3, yend=15), color=&amp;quot;red&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/BHJd8191Am.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;图形参数主标题坐标轴标签图例标题&#34;&gt;图形参数：主标题、坐标轴标签、图例标题&lt;/h3&gt;
&lt;p&gt;创建图层&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;ToothGrowth$dose &amp;lt;- as.factor(ToothGrowth$dose)
p &amp;lt;- ggplot(ToothGrowth, aes(x=dose, y=len))+geom_boxplot()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;修改标题以及标签的函数有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ggtitle(&amp;ldquo;New main title&amp;rdquo;): 添加主标题&lt;/li&gt;
&lt;li&gt;xlab(“New X axis label”): 修改x轴标签&lt;/li&gt;
&lt;li&gt;ylab(“New Y axis label”): 修改y轴标签&lt;/li&gt;
&lt;li&gt;labs(title = “New main title”, x = “New X axis label”, y = “New Y axis label”): 可同时添加主标题以及坐标轴标签，另外，图例标题也可以用此函数修改&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;修改主标题以及标签&#34;&gt;修改主标题以及标签&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;(p &amp;lt;- p+labs(title=&amp;quot;Plot of length\nby dose&amp;quot;, x=&amp;quot;Dose (mg)&amp;quot;, y=&amp;quot;teeth length&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/h0dhdgD0H5.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;修改标签属性颜色字体大小等&#34;&gt;修改标签属性：颜色、字体、大小等&lt;/h4&gt;
&lt;p&gt;使用theme()修改,element_text()可以具体修改图形参数，element_blank()隐藏标签&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;#修改标签
p+theme(
plot.title = element_text(color = &amp;quot;red&amp;quot;, size = 14, face = &amp;quot;bold.italic&amp;quot;),
axis.title.x = element_text(color=&amp;quot;blue&amp;quot;, size = 14, face = &amp;quot;bold&amp;quot;),
axis.title.y = element_text(color=&amp;quot;#993333&amp;quot;, size = 14, face = &amp;quot;bold&amp;quot;)
)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/28K0J6j688.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#隐藏标签
p+theme(
  plot.title = element_blank(),
  axis.title.x = element_blank(),
  axis.title.y = element_blank()
)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/0Fe5dGADJi.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;修改图例标题&#34;&gt;修改图例标题&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;p &amp;lt;- ggplot(ToothGrowth, aes(x=dose, y=len, fill=dose))+
  geom_boxplot()
p
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/Afhm8Dbaa3.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#修改图例标题
p+labs(fill=&amp;quot;Dose (mg)&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/dLAe8a3a7K.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;图例位置以及外观&#34;&gt;图例位置以及外观&lt;/h3&gt;
&lt;h4 id=&#34;修改图例位置以及外观&#34;&gt;修改图例位置以及外观&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;#图例位置在最上面，有五个选项：&amp;quot;left&amp;quot;,&amp;quot;top&amp;quot;, &amp;quot;right&amp;quot;, &amp;quot;bottom&amp;quot;, &amp;quot;none&amp;quot;
p+theme(legend.position = &amp;quot;top&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/52gIJkL4Fj.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;p&gt;移除图例&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;p+theme(legend.position = &amp;quot;none&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/akg12aak7l.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;p&gt;修改图例标题以及标签外观&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;p+theme(
  legend.title = element_text(color=&amp;quot;blue&amp;quot;),
  legend.text = element_text(color=&amp;quot;red&amp;quot;)
)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/7AgB3J5C56.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;p&gt;修改图例背景&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;p+theme(legend.background = element_rect(fill=&amp;quot;lightblue&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/jB9CJj91hj.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;利用scale函数自定义图例&#34;&gt;利用scale()函数自定义图例&lt;/h4&gt;
&lt;p&gt;主要两个函数：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;scale_x_discrete()：修改图例标签顺序&lt;/li&gt;
&lt;li&gt;scale_fill_discrete(): 修改图例标题以及标签&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;#修改顺序
p+scale_x_discrete(limits=c(&amp;quot;2&amp;quot;, &amp;quot;0.5&amp;quot;, &amp;quot;1&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/AbFBaAl2a3.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#修改标题以及标签
p+scale_fill_discrete(name=&amp;quot;Dose&amp;quot;, label=c(&amp;quot;A&amp;quot;,&amp;quot;B&amp;quot;,&amp;quot;C&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/AcKFcEl5j4.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;自动手动修改颜色&#34;&gt;自动/手动修改颜色&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;mtcars$cyl &amp;lt;- as.factor(mtcars$cyl)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;创建图层&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;# boxplot
bp &amp;lt;- ggplot(ToothGrowth, aes(x=dose, y=len))
# scatter plot
sp &amp;lt;- ggplot(mtcars, aes(x=wt, y=mpg))
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;修改填充色轮廓线颜色&#34;&gt;修改填充色、轮廓线颜色&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;bp+geom_boxplot(fill=&amp;quot;steelblue&amp;quot;, color=&amp;quot;red&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/L09ec6fJdi.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;sp+geom_point(color=&amp;quot;darkblue&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/dm838FcDID.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;通过映射分组修改颜色&#34;&gt;通过映射分组修改颜色&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;(bp &amp;lt;- bp+geom_boxplot(aes(fill=dose)))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/39aG8c99CA.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(sp &amp;lt;- sp+geom_point(aes(color=cyl)))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/6lAKJH6FcI.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;手动修改颜色&#34;&gt;手动修改颜色&lt;/h4&gt;
&lt;p&gt;主要两个函数：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;scale_fill_manual(): 填充色&lt;/li&gt;
&lt;li&gt;scale_color_manual()：轮廓色，如点线&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;# Box plot
bp + scale_fill_manual(values=c(&amp;quot;#999999&amp;quot;, &amp;quot;#E69F00&amp;quot;, &amp;quot;#56B4E9&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/5l8CkJeG3b.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# Scatter plot
sp + scale_color_manual(values=c(&amp;quot;#999999&amp;quot;, &amp;quot;#E69F00&amp;quot;, &amp;quot;#56B4E9&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/mlmKH9mDm0.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;使用rcolorbrewer调色板&#34;&gt;使用&lt;strong&gt;RColorBrewer&lt;/strong&gt;调色板&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;scale_fill_brewer(): 填充色&lt;/li&gt;
&lt;li&gt;scale_color_brewer()：轮廓色，如点线&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;# Box plot
bp + scale_fill_brewer(palette=&amp;quot;Dark2&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/fdgD6lfCLK.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# Scatter plot
sp + scale_color_brewer(palette=&amp;quot;Dark2&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/I4K7c25E00.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;RColorBrewer&lt;/strong&gt;包提供以下调色板&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/2mh2le2j13.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;还专门有一个灰度调色板：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;# Box plot
bp + scale_fill_grey() + theme_classic()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/el4C3gckcd.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# Scatter plot
sp + scale_color_grey() + theme_classic()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/5B3cgiFbH6.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;梯度或连续颜色&#34;&gt;梯度或连续颜色&lt;/h4&gt;
&lt;p&gt;有时我们会将某个连续变量映射给颜色，这时修改这种梯度或连续型颜色就可以使用以下函数：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;scale_color_gradient(), scale_fill_gradient()：两种颜色的连续梯度&lt;/li&gt;
&lt;li&gt;scale_color_gradient2(), scale_fill_gradient2()：不同梯度&lt;/li&gt;
&lt;li&gt;scale_color_gradientn(), scale_fill_gradientn()：多种颜色梯度&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;# Color by qsec values
sp2&amp;lt;-ggplot(mtcars, aes(x=wt, y=mpg)) +
  geom_point(aes(color = qsec))
sp2
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/DfKHLjH6mm.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# Change the low and high colors
# Sequential color scheme
sp2+scale_color_gradient(low=&amp;quot;blue&amp;quot;, high=&amp;quot;red&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/g4mj6HBA2d.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# Diverging color scheme
mid&amp;lt;-mean(mtcars$qsec)
sp2+scale_color_gradient2(midpoint=mid, low=&amp;quot;blue&amp;quot;, mid=&amp;quot;white&amp;quot;,
                          high=&amp;quot;red&amp;quot;, space = &amp;quot;Lab&amp;quot; )
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/jemKdg7ai2.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;点颜色大小形状&#34;&gt;点颜色、大小、形状&lt;/h3&gt;
&lt;p&gt;R提供的点形状是由数字表示的，具体如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/g7gjFCb420.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;# Basic scatter plot
ggplot(mtcars, aes(x=wt, y=mpg)) +
  geom_point(shape = 18, color = &amp;quot;steelblue&amp;quot;, size = 4)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/EG65iAcdaI.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# Change point shapes and colors by groups
ggplot(mtcars, aes(x=wt, y=mpg)) +
geom_point(aes(shape = cyl, color = cyl))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/mKAb95CAk6.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;p&gt;可通过以下方法对点的颜色、大小、形状进行修改：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;scale_shape_manual() : to change point shapes&lt;/li&gt;
&lt;li&gt;scale_color_manual() : to change point colors&lt;/li&gt;
&lt;li&gt;scale_size_manual() : to change the size of points&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;# Change colors and shapes manually
ggplot(mtcars, aes(x=wt, y=mpg, group=cyl)) +
  geom_point(aes(shape=cyl, color=cyl), size=2)+
  scale_shape_manual(values=c(3, 16, 17))+
  scale_color_manual(values=c(&#39;#999999&#39;,&#39;#E69F00&#39;, &#39;#56B4E9&#39;))+
  theme(legend.position=&amp;quot;top&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/Cj4aedai9j.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;文本注释-1&#34;&gt;文本注释&lt;/h3&gt;
&lt;p&gt;对图形进行文本注释有以下方法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;geom_text(): 文本注释&lt;/li&gt;
&lt;li&gt;geom_label(): 文本注释,类似于geom_text(),只是多了个背景框&lt;/li&gt;
&lt;li&gt;annotate(): 文本注释&lt;/li&gt;
&lt;li&gt;annotation_custom(): 分面时可以在所有的面板进行文本注释&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;set.seed(1234)
df &amp;lt;- mtcars[sample(1:nrow(mtcars), 10), ]
df$cyl &amp;lt;- as.factor(df$cyl)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;散点图注释&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;# Scatter plot
sp &amp;lt;- ggplot(df, aes(x=wt, y=mpg))+ geom_point() 
# Add text, change colors by groups
sp + geom_text(aes(label = rownames(df), color = cyl),
               size = 3, vjust = -1)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/0EAk2aFEJG.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# Add text at a particular coordinate
sp + geom_text(x = 3, y = 30, label = &amp;quot;Scatter plot&amp;quot;,
              color=&amp;quot;red&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/8A620eJKDl.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# geom_label()进行注释
sp + geom_label(aes(label=rownames(df)))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/D6ick1LI9i.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# annotation_custom(),需要用到textGrob()
library(grid)
# Create a text
grob &amp;lt;- grobTree(textGrob(&amp;quot;Scatter plot&amp;quot;, x=0.1,  y=0.95, hjust=0,
  gp=gpar(col=&amp;quot;red&amp;quot;, fontsize=13, fontface=&amp;quot;italic&amp;quot;)))
# Plot
sp + annotation_custom(grob)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/80EK39ebBA.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#分面注释
sp + annotation_custom(grob)+facet_wrap(~cyl, scales=&amp;quot;free&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/cdfK8keKee.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;线型&#34;&gt;线型&lt;/h3&gt;
&lt;p&gt;R里的线型有七种：“blank”, “solid”, “dashed”, “dotted”, “dotdash”, “longdash”, “twodash”，对应数字0，1，2，3，4，5，6.&lt;/p&gt;
&lt;p&gt;具体如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/2gAL9gilee.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;# Create some data
df2 &amp;lt;- data.frame(sex = rep(c(&amp;quot;Female&amp;quot;, &amp;quot;Male&amp;quot;), each=3),
                  time=c(&amp;quot;breakfeast&amp;quot;, &amp;quot;Lunch&amp;quot;, &amp;quot;Dinner&amp;quot;),
                  bill=c(10, 30, 15, 13, 40, 17) )
head(df2)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##      sex       time bill
## 1 Female breakfeast   10
## 2 Female      Lunch   30
## 3 Female     Dinner   15
## 4   Male breakfeast   13
## 5   Male      Lunch   40
## 6   Male     Dinner   17
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;# Line plot with multiple groups
# Change line types and colors by groups (sex)
ggplot(df2, aes(x=time, y=bill, group=sex)) +
  geom_line(aes(linetype = sex, color = sex))+
  geom_point(aes(color=sex))+
  theme(legend.position=&amp;quot;top&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/leH2fj5jf7.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;p&gt;同点一样，线也可以类似修改：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;scale_linetype_manual() : to change line types&lt;/li&gt;
&lt;li&gt;scale_color_manual() : to change line colors&lt;/li&gt;
&lt;li&gt;scale_size_manual() : to change the size of lines&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;# Change line types, colors and sizes
ggplot(df2, aes(x=time, y=bill, group=sex)) +
  geom_line(aes(linetype=sex, color=sex, size=sex))+
  geom_point()+
  scale_linetype_manual(values=c(&amp;quot;twodash&amp;quot;, &amp;quot;dotted&amp;quot;))+
  scale_color_manual(values=c(&#39;#999999&#39;,&#39;#E69F00&#39;))+
  scale_size_manual(values=c(1, 1.5))+
  theme(legend.position=&amp;quot;top&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/j9EajEBa9b.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;主题与背景颜色&#34;&gt;主题与背景颜色&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;# Convert the column dose from numeric to factor variable
ToothGrowth$dose &amp;lt;- as.factor(ToothGrowth$dose)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;创建箱线图&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;p &amp;lt;- ggplot(ToothGrowth, aes(x=dose, y=len))+
  geom_boxplot()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;修改主题
&lt;strong&gt;ggplot2&lt;/strong&gt;提供了好几种主题，另外有一个扩展包&lt;strong&gt;ggthemes&lt;/strong&gt;专门提供了一主题，可以安装利用。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;install.packages(&amp;quot;ggthemes&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;theme_gray(): gray background color and white grid lines&lt;/li&gt;
&lt;li&gt;theme_bw() : white background and gray grid lines&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;p+theme_gray(base_size = 14)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/hj1eIbED8J.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;p+theme_bw()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/DIL3A3j3H0.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;theme_linedraw : black lines around the plot&lt;/li&gt;
&lt;li&gt;theme_light : light gray lines and axis (more attention towards the data)&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;p + theme_linedraw()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/dllCEkgbJd.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;p + theme_light()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/HIE1djID57.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;theme_minimal: no background annotations&lt;/li&gt;
&lt;li&gt;theme_classic : theme with axis lines and no grid lines&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;p + theme_minimal()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/DldJFIi1jG.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;p + theme_classic()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/kdb786kHb6.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;ggthemes&lt;/strong&gt;提供的主题&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;p+ggthemes::theme_economist()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/mhE0cglig4.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;坐标轴最大最小值&#34;&gt;坐标轴：最大最小值&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;p &amp;lt;- ggplot(cars, aes(x=speed, y=dist))+geom_point()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;修改坐标轴范围有以下几种方式：
1、不删除数据&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;p+coord_cartesian(xlim=c(5, 20), ylim=c(0, 50)):笛卡尔坐标系，这是设定修改不会删除数据&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;2、会删除部分数据：不在此范围内的数据都会被删除,因此在此基础上添加图层时数据是不完整的&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;p+xlim(5, 20)+ylim(0, 50)&lt;/li&gt;
&lt;li&gt;p+scale_x_continuous(limits=c(5, 20))+scale_y_continuous(limits=c(0, 50))&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;3、扩展图形范围：expand()函数，扩大范围&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;p+expand_limits(x=0, y=0):设置截距为0，即过原点&lt;/li&gt;
&lt;li&gt;p+expand_limits(x=c(5, 50), y=c(0, 150))：扩大坐标轴范围，这样图形显示就小了&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;下面通过图形演示&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;p
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/45E5EkIbmH.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#通过coord_cartesian()函数修改坐标轴范围
p+coord_cartesian(xlim =c (5, 20), ylim = c(0, 50))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/cbia8kk48E.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#通过xlim()和ylim()函数修改
p+xlim(5, 20)+ylim(0, 50)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/cbia8kk48E.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#expand limits
p+expand_limits(x=c(5, 50), y=c(0, 150))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/m44Dlla2Cl.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;坐标变换&#34;&gt;坐标变换&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;p &amp;lt;- ggplot(cars, aes(x=speed, y=dist))+geom_point()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;坐标变换有以下几种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;p+scale_x_log10(),p+scale_y_log10(): 绘图时对x，y取10的对数&lt;/li&gt;
&lt;li&gt;p+scale_x_sqrt(),p+scale_x_sqrt(): 开根号&lt;/li&gt;
&lt;li&gt;p+scale_x_reverse(),p+scale_x_reverse()：坐标轴反向&lt;/li&gt;
&lt;li&gt;p+coord_trans(x =“log10”, y=“log10”): 同上，可以对坐标轴取对数、根号等&lt;/li&gt;
&lt;li&gt;p+scale_x_continuous(trans=&amp;ldquo;log2&amp;rdquo;),p+scale_x_continuous(trans=&amp;ldquo;log2&amp;rdquo;): 同上，取对数的另外一种方法&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;下面实例演示：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;p
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/90aD77ldKb.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;p+scale_x_continuous(trans = &amp;quot;log2&amp;quot;)+
  scale_y_continuous(trans = &amp;quot;log2&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/mI8LDhgJE9.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#修改坐标刻度标签
require(scales)
p+scale_y_continuous(trans=log2_trans(),
                    breaks = trans_breaks(&amp;quot;log2&amp;quot;, function(x) 2^x),
                    labels=trans_format(&amp;quot;log2&amp;quot;, math_format(2^.x)))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/F94egDhaID.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#坐标轴反向
p+scale_y_reverse()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/L68AbbdeH9.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;坐标刻度刻度线标签顺序等&#34;&gt;坐标刻度：刻度线、标签、顺序等&lt;/h4&gt;
&lt;p&gt;更改坐标轴刻度线标签等函数：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;element_text(face, color, size, angle): 修改文本风格&lt;/li&gt;
&lt;li&gt;element_blank(): 隐藏文本&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;(p &amp;lt;- ggplot(ToothGrowth, aes(x=dose, y=len))+geom_boxplot())
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/22F52FHA0H.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;p&gt;修改刻度标签等&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;p+theme(axis.text.x = element_text(face = &amp;quot;bold&amp;quot;, color=&amp;quot;#993333&amp;quot;, size=14, angle = 45),
        axis.text.y = element_text(face = &amp;quot;bold&amp;quot;, size = 14, color = &amp;quot;blue&amp;quot;, angle = 45))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/7k09a4DhDb.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;p&gt;移除刻度标签等&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;p + theme(
  axis.text.x = element_blank(), # Remove x axis tick labels
  axis.text.y = element_blank(), # Remove y axis tick labels
  axis.ticks = element_blank()) # Remove ticks
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/lmmg7BEa1m.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;p&gt;当然可以自定义坐标轴了&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;离散非连续坐标轴&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;scale_x_discrete(name, breaks, labels, limits)&lt;/li&gt;
&lt;li&gt;scale_y_discrete(name, breaks, labels, limits)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;连续型坐标轴&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;scale_x_conyinuous(name, breaks, labels, limits)&lt;/li&gt;
&lt;li&gt;scale_y_continuous(name, breaks, labels, limits)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;详细情况如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;name: x,y轴的标题&lt;/li&gt;
&lt;li&gt;breaks: 刻度，分成几段&lt;/li&gt;
&lt;li&gt;labels：坐标轴刻度线标签&lt;/li&gt;
&lt;li&gt;limits: 坐标轴范围&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其中scale_xx()函数可以修改坐标轴的如下参数：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;坐标轴标题&lt;/li&gt;
&lt;li&gt;坐标轴范围&lt;/li&gt;
&lt;li&gt;刻度标签位置&lt;/li&gt;
&lt;li&gt;手动设置刻度标签&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;具体演示：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;离散坐标轴&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;#修改标签以及顺序
p+scale_x_discrete(name=&amp;quot;Dose (mg)&amp;quot;, limits=c(&amp;quot;2&amp;quot;, &amp;quot;1&amp;quot;, &amp;quot;0.5&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/EFbiHLHg4H.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;#修改刻度标签
p+scale_x_discrete(breaks=c(&amp;quot;0.5&amp;quot;, &amp;quot;1&amp;quot;, &amp;quot;2&amp;quot;),labels=c(&amp;quot;Dose 0.5&amp;quot;, &amp;quot;Dose 1&amp;quot;, &amp;quot;Dose 2&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/7b8a55d8e6.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;#修改要显示的项
p+scale_x_discrete(limits=c(&amp;quot;0.5&amp;quot;, &amp;quot;2&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/KEBgH9eL6A.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;连续型坐标轴&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;#散点图
(sp &amp;lt;- ggplot(cars, aes(x=speed, y=dist))+geom_point())
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/6mAgGel8FI.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;p&gt;修改坐标轴标签以及范围&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;(sp &amp;lt;- sp+scale_x_continuous(name = &amp;quot;Speed of cars&amp;quot;, limits = c(0, 30))+
  scale_y_continuous(name = &amp;quot;Stopping distance&amp;quot;, limits = c(0, 150)))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/1Gfa1ki6jd.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;p&gt;更改y轴刻度，间隔50&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;sp+scale_y_continuous(breaks = seq(0, 150, 50))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/67LdJdeHJJ.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;p&gt;修改y轴标签为百分数&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;require(scales)
sp+scale_y_continuous(labels = percent)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/lKBLj42Fmb.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;添加直线水平线竖直线回归线&#34;&gt;添加直线：水平线、竖直线、回归线&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;ggplot2&lt;/strong&gt;提供以下方法为图形添加直线：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;geom_hline(yintercept, linetype, color, size): 添加水平线&lt;/li&gt;
&lt;li&gt;geom_vline(xintercept, linetype, color, size)：添加竖直线&lt;/li&gt;
&lt;li&gt;geom_abline(intercept, slope, linetype, color, size)：添加回归线&lt;/li&gt;
&lt;li&gt;geom_segment()：添加线段&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;实例演示：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;sp &amp;lt;- ggplot(data=mtcars, aes(x=wt, y=mpg))+ geom_point()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;添加直线：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;#在y=20处添加一水平线，并设置颜色等
sp+geom_hline(yintercept = 20, linetype=&amp;quot;dashed&amp;quot;, color=&#39;red&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/klELKdJ7h2.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#在x=3处添加一竖直线，并设置颜色等
sp+geom_vline(xintercept = 3, color=&amp;quot;blue&amp;quot;, size=1.5)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/5cIFlhkK0E.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#添加回归线
sp+geom_abline(intercept = 37, slope = -5, color=&amp;quot;blue&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/Jci00jI819.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#添加水平线段
sp+geom_segment(aes(x=2, y=15, xend=3, yend=15), color=&amp;quot;red&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/1gAEcm93JF.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;图形旋转旋转反向&#34;&gt;图形旋转：旋转、反向&lt;/h3&gt;
&lt;p&gt;主要是下面两个函数：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;coord_flip()：创建水平方向图&lt;/li&gt;
&lt;li&gt;scale_x_reverse(),scale_y_reverse()：坐标轴反向&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;set.seed(1234)
(hp &amp;lt;- qplot(x=rnorm(200), geom = &amp;quot;histogram&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/CgC7HHLid5.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#水平柱形图
hp+coord_flip()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/hD4HaiCDJI.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#y轴反向
hp+scale_y_reverse()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/HCFl1ha75C.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;分面&#34;&gt;分面&lt;/h3&gt;
&lt;p&gt;分面就是根据一个或多个变量将图形分为几个图形以便于可视化，主要有两个方法实现：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;facet_grid()&lt;/li&gt;
&lt;li&gt;facet_wrap()&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;ToothGrowth$dose &amp;lt;- as.factor(ToothGrowth$dose)
(p &amp;lt;- ggplot(ToothGrowth, aes(x=dose, y=len, group=dose))+
  geom_boxplot(aes(fill=dose)))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/3AfigK2AIl.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;p&gt;针对上面图形进行分面：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;p+facet_grid(supp~.): 按变量supp进行竖直方向分面&lt;/li&gt;
&lt;li&gt;p+facet_grid(.~supp): 按变量supp进行水平方向分面&lt;/li&gt;
&lt;li&gt;p+facet_wrap(dose~supp)：按双变量supp和dose进行水平竖直方向分面&lt;/li&gt;
&lt;li&gt;p+facet_wrap(~fl): 将分成的面板边靠边置于一个矩形框内&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;1、按一个离散变量进行分面：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r,fig.height=4,fig.width=3}&#34;&gt;#竖直方向进行分面
p+facet_grid(supp~.)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/e5hdDE7FE0.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#水平方向分面
p+facet_grid(.~supp)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/F3BgFeHc3C.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;p&gt;2、按两个离散变量进行分面&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r,fig.height=4,fig.width=3}&#34;&gt;#行按dose分面，列按supp分面
p+facet_grid(dose~supp)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/9112kbBA9g.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#行按supp，列按dose分面
p+facet_grid(supp~dose)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/bjm9fk0k79.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;p&gt;从上面图形可以看出，每个面板的坐标轴比例都是一样的，我们可以通过设置参数scales来控制坐标轴比例&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;p + facet_grid(dose ~ supp, scales=&#39;free&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/65F4K0ajaI.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;位置调整&#34;&gt;位置调整&lt;/h3&gt;
&lt;p&gt;很多图形需要我们调整位置，比如直方图时，由堆叠式、百分式、分离式等，具体的要通过实例说明&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;p &amp;lt;- ggplot(mpg, aes(fl, fill=drv))
#直方图边靠边排列，参数position=&amp;quot;dodge&amp;quot;
p+geom_bar(position = &amp;quot;dodge&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/13Cf1kA3Jc.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;p&gt;堆叠式position=&amp;ldquo;stack&amp;rdquo;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;p+geom_bar(position = &amp;quot;stack&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/J2bH42IjHA.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;p&gt;position=&amp;ldquo;fill&amp;quot;类似玉堆叠图，只不过按百分比排列，所有柱子都被标准化成同样高度&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;p+geom_bar(position = &amp;quot;fill&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/1iblgciCm8.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;p&gt;position=&amp;ldquo;jitter&amp;rdquo;,（主要适用于散点图）增加扰动，避免重叠，前面讲的geom_jitter()就是来源于此&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;ggplot(mpg, aes(cty, hwy))+
  geom_point(position = &amp;quot;jitter&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/01D9L4A8Ld.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;p&gt;上面几个函数有两个重要的参数：heigth、weight。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;position_dodge(width, height)&lt;/li&gt;
&lt;li&gt;position_fill(width, height)&lt;/li&gt;
&lt;li&gt;position_stack(width, height)&lt;/li&gt;
&lt;li&gt;position_jitter(width, height)&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;p+geom_bar(position = position_dodge(width = 1))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/DaHcfl9dId.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;坐标系&#34;&gt;坐标系&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;p &amp;lt;- ggplot(mpg, aes(fl))+geom_bar()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;ggplot2&lt;/strong&gt;中的坐标系主要有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;p+coord_cartesian(xlim=NULL, ylim=NULL)：笛卡尔坐标系(默认)&lt;/li&gt;
&lt;li&gt;p+coord_fixed(ratio=1, clim=NULL, ylim=NULL)：固定了坐标轴比例的笛卡尔坐标系。默认比例为1&lt;/li&gt;
&lt;li&gt;p+coord_flip(&amp;hellip;)：旋转笛卡尔坐标系&lt;/li&gt;
&lt;li&gt;p+coord_polar(theta=&amp;ldquo;x&amp;rdquo;, start=0, direction=1)：极坐标系&lt;/li&gt;
&lt;li&gt;p+coord_trans(x,y,limx,limy)：变换笛卡尔坐标系&lt;/li&gt;
&lt;li&gt;coord_map()：地图坐标系&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;各个坐标系参数如下：
1、笛卡尔坐标系：coord_cartesian(), coord_fixed() and coord_flip()&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;xlim：x轴范围&lt;/li&gt;
&lt;li&gt;ylim：y轴范围&lt;/li&gt;
&lt;li&gt;ratio：y/x&lt;/li&gt;
&lt;li&gt;&amp;hellip;：其他参数&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;2、极坐标系：coord_polar()&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;theta：外延坐标，x或y&lt;/li&gt;
&lt;li&gt;start：坐标开始的位置，默认为12点钟&lt;/li&gt;
&lt;li&gt;direction：方向：顺时针(1),逆时针(-1)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;3、变换坐标系：coord_trans()&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;x,y：变换的坐标轴&lt;/li&gt;
&lt;li&gt;limx,limy：坐标轴范围&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;实例演示：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;p+coord_cartesian(ylim = c(0,200))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/KE5JcFmdhl.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;p+coord_fixed(ratio = 1/50)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/LHeG17JljH.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;p+coord_flip()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/8AK62ii9Ib.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;p+coord_polar(theta = &amp;quot;x&amp;quot;, direction = 1)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/HBF135cLAA.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;p+coord_trans(y=&amp;quot;sqrt&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/DhI4Ha1m91.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;ggplot2包资料扩展包函数&#34;&gt;&lt;strong&gt;ggplot2&lt;/strong&gt;包资料扩展：包、函数&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;ggplot2&lt;/strong&gt;有一个官方网站，里面有十分详细的说明，
&lt;a href=&#34;http://ggplot2.tidyverse.org/reference/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;点击这里直达&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ggplot2&lt;/strong&gt;还有十分多的扩展包，
&lt;a href=&#34;https://www.ggplot2-exts.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;点击这里直达&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;sessioninfo&#34;&gt;SessionInfo&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;sessionInfo()

## R version 3.4.1 (2017-06-30)
## Platform: x86_64-pc-linux-gnu (64-bit)
## Running under: Ubuntu 16.04.3 LTS
## 
## Matrix products: default
## BLAS: /usr/lib/atlas-base/atlas/libblas.so.3.0
## LAPACK: /usr/lib/atlas-base/atlas/liblapack.so.3.0
## 
## locale:
##  [1] LC_CTYPE=zh_CN.UTF-8       LC_NUMERIC=C              
##  [3] LC_TIME=zh_CN.UTF-8        LC_COLLATE=zh_CN.UTF-8    
##  [5] LC_MONETARY=zh_CN.UTF-8    LC_MESSAGES=zh_CN.UTF-8   
##  [7] LC_PAPER=zh_CN.UTF-8       LC_NAME=C                 
##  [9] LC_ADDRESS=C               LC_TELEPHONE=C            
## [11] LC_MEASUREMENT=zh_CN.UTF-8 LC_IDENTIFICATION=C       
## 
## attached base packages:
## [1] grid      stats     graphics  grDevices utils     datasets  methods  
## [8] base     
## 
## other attached packages:
## [1] scales_0.5.0   bindrcpp_0.2   dplyr_0.7.3    reshape2_1.4.2
## [5] maps_3.2.0     hexbin_1.27.1  plyr_1.8.4     ggplot2_2.2.1 
## 
## loaded via a namespace (and not attached):
##  [1] Rcpp_0.12.12        bindr_0.1           compiler_3.4.1     
##  [4] RColorBrewer_1.1-2  base64enc_0.1-3     tools_3.4.1        
##  [7] rpart_4.1-11        digest_0.6.12       checkmate_1.8.3    
## [10] htmlTable_1.9       evaluate_0.10.1     tibble_1.3.4       
## [13] gtable_0.2.0        lattice_0.20-35     pkgconfig_2.0.1    
## [16] rlang_0.1.2         Matrix_1.2-11       yaml_2.1.14        
## [19] gridExtra_2.3       stringr_1.2.0       knitr_1.17         
## [22] cluster_2.0.6       htmlwidgets_0.9     rprojroot_1.2      
## [25] nnet_7.3-12         glue_1.1.1          data.table_1.10.4  
## [28] R6_2.2.2            survival_2.41-3     foreign_0.8-69     
## [31] rmarkdown_1.6       latticeExtra_0.6-28 Formula_1.2-2      
## [34] magrittr_1.5        ggthemes_3.4.0      backports_1.1.0    
## [37] Hmisc_4.0-3         htmltools_0.3.6     MASS_7.3-47        
## [40] splines_3.4.1       assertthat_0.2.0    colorspace_1.3-2   
## [43] labeling_0.3        stringi_1.1.5       acepack_1.4.1      
## [46] lazyeval_0.2.0      munsell_0.4.3
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>ggplot2学习笔记系列之主题（theme）设置</title>
      <link>https://taoyan.netlify.app/post/2017-06-25.ggplot2%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E7%B3%BB%E5%88%97%E4%B9%8B%E4%B8%BB%E9%A2%98theme%E8%AE%BE%E7%BD%AE/</link>
      <pubDate>Sun, 25 Jun 2017 12:34:08 -0500</pubDate>
      <guid>https://taoyan.netlify.app/post/2017-06-25.ggplot2%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E7%B3%BB%E5%88%97%E4%B9%8B%E4%B8%BB%E9%A2%98theme%E8%AE%BE%E7%BD%AE/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819153552.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;上次提了下&lt;code&gt;theme()&lt;/code&gt;,本文将专门讲解一下。凡是与数据无关的图形设置可以归为主题类，&lt;strong&gt;ggplot2&lt;/strong&gt;中主题设置十分多，根本不可能讲解完，只能稍微讲点皮毛，灵活运用才是关键，本文只是总体上略作介绍。正如R语言大神&lt;strong&gt;Hadley Wickham&lt;/strong&gt;所讲的，&lt;strong&gt;ggplot2&lt;/strong&gt;只是提供了一个平台，可以根据自己的需要无限创造。理论上来讲，只要能想到的图形，&lt;strong&gt;ggplot2&lt;/strong&gt;都能实现。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;library(ggplot2)
#我们先来看看ggplot2默认的主题设置函数theme_gray()的源代码
theme_gray#函数名不加括号可获得函数源代码

## function (base_size = 11, base_family = &amp;quot;&amp;quot;) 
## {
## half_line &amp;lt;- base_size/2
## theme(line = element_line(colour = &amp;quot;black&amp;quot;, size = 0.5, linetype = 1, 
## lineend = &amp;quot;butt&amp;quot;), rect = element_rect(fill = &amp;quot;white&amp;quot;, 
## colour = &amp;quot;black&amp;quot;, size = 0.5, linetype = 1), text = element_text(family = base_family, 
## face = &amp;quot;plain&amp;quot;, colour = &amp;quot;black&amp;quot;, size = base_size, lineheight = 0.9, 
## hjust = 0.5, vjust = 0.5, angle = 0, margin = margin(), 
## debug = FALSE), axis.line = element_blank(), axis.line.x = NULL, 
## axis.line.y = NULL, axis.text = element_text(size = rel(0.8),
## colour = &amp;quot;grey30&amp;quot;), axis.text.x = element_text(margin = margin(t = 0.8 * 
## half_line/2), vjust = 1), axis.text.x.top = element_text(margin = margin(b = 0.8 * ## half_line/2), vjust = 0), axis.text.y = element_text(margin = margin(r = 0.8 * 
## half_line/2), hjust = 1), axis.text.y.right = element_text(margin = margin(l = 0.8 * ## half_line/2), hjust = 0), axis.ticks = element_line(colour = &amp;quot;grey20&amp;quot;), 
## axis.ticks.length = unit(half_line/2, &amp;quot;pt&amp;quot;), axis.title.x = element_text(margin = margin(t = half_line), 
## vjust = 1), axis.title.x.top = element_text(margin = margin(b = half_line), 
## vjust = 0), axis.title.y = element_text(angle = 90, 
## margin = margin(r = half_line), vjust = 1), axis.title.y.right = element_text(angle = -90, 
## margin = margin(l = half_line), vjust = 0), legend.background = element_rect(colour = NA), 
## legend.spacing = unit(0.4, &amp;quot;cm&amp;quot;), legend.spacing.x = NULL, 
## legend.spacing.y = NULL, legend.margin = margin(0.2, 
## 0.2, 0.2, 0.2, &amp;quot;cm&amp;quot;), legend.key = element_rect(fill = &amp;quot;grey95&amp;quot;, 
## colour = &amp;quot;white&amp;quot;), legend.key.size = unit(1.2, &amp;quot;lines&amp;quot;), 
## legend.key.height = NULL, legend.key.width = NULL, legend.text = element_text(size = rel(0.8)), 
## legend.text.align = NULL, legend.title = element_text(hjust = 0), 
## legend.title.align = NULL, legend.position = &amp;quot;right&amp;quot;, 
## legend.direction = NULL, legend.justification = &amp;quot;center&amp;quot;, 
## legend.box = NULL, legend.box.margin = margin(0, 0, 0, 
## 0, &amp;quot;cm&amp;quot;), legend.box.background = element_blank(),
## legend.box.spacing = unit(0.4, &amp;quot;cm&amp;quot;), panel.background = element_rect(fill = &amp;quot;grey92&amp;quot;, 
## colour = NA), panel.border = element_blank(), panel.grid.major = element_line(colour = &amp;quot;white&amp;quot;), 
## panel.grid.minor = element_line(colour = &amp;quot;white&amp;quot;, size = 0.25), 
## panel.spacing = unit(half_line, &amp;quot;pt&amp;quot;), panel.spacing.x = NULL, 
## panel.spacing.y = NULL, panel.ontop = FALSE, strip.background = element_rect(fill = &amp;quot;grey85&amp;quot;, 
## colour = NA), strip.text = element_text(colour = &amp;quot;grey10&amp;quot;, 
## size = rel(0.8)), strip.text.x = element_text(margin = margin(t = half_line, 
## b = half_line)), strip.text.y = element_text(angle = -90, 
## margin = margin(l = half_line, r = half_line)), strip.placement = &amp;quot;inside&amp;quot;, 
## strip.placement.x = NULL, strip.placement.y = NULL, strip.switch.pad.grid = unit(0.1, 
## &amp;quot;cm&amp;quot;), strip.switch.pad.wrap = unit(0.1, &amp;quot;cm&amp;quot;), plot.background = element_rect(colour = &amp;quot;white&amp;quot;), 
## plot.title = element_text(size = rel(1.2), hjust = 0, 
## vjust = 1, margin = margin(b = half_line * 1.2)), 
## plot.subtitle = element_text(size = rel(0.9), hjust = 0, 
## vjust = 1, margin = margin(b = half_line * 0.9)),
## plot.caption = element_text(size = rel(0.9), hjust = 1, 
## vjust = 1, margin = margin(t = half_line * 0.9)),
## plot.margin = margin(half_line, half_line, half_line, 
## half_line), complete = TRUE)
## }
## &amp;lt;environment: namespace:ggplot2&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;可以看出，源代码主要是&lt;code&gt;theme()&lt;/code&gt;函数，设置也很简单：&lt;code&gt;theme(..., complete = FALSE)&lt;/code&gt;,但是其内含的参数则十分多。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819153612.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819153623.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;几乎所有元素在&lt;code&gt;theme()&lt;/code&gt;里都使用&lt;code&gt;element_line&lt;/code&gt;，&lt;code&gt;element_rect&lt;/code&gt;，&lt;code&gt;element_text&lt;/code&gt;和&lt;code&gt;element_blank&lt;/code&gt;函数设置. 下面就举例稍微讲解一下&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#利用数据集mtcars演示head(mtcars)
#先创建p图层
p&amp;lt;- ggplot(data=mtcars, aes(x=wt, y=mpg))+
geom_point(aes(color=factor(cyl)))#先试试图例修改
p+theme(legend.position = &amp;quot;none&amp;quot;)#无图例
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819153635.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;p+theme(legend.position = &amp;quot;bottom&amp;quot;)#图例在底部
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819153645.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#也可以自定义
p+theme(legend.position = c(0.5, 0.7))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819153658.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#为图例加边界
p+theme(legend.background = element_rect(color=&amp;quot;red&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819153709.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#或者为图例中的每个元素进行设置，如加边界
p+theme(legend.key =element_rect(color=&amp;quot;red&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819153718.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#进行填充
p+theme(legend.key = element_rect(fill=&amp;quot;yellow&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819153728.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#图例内容字体大小、颜色、角度等设置
p+theme(legend.text = element_text(size=25, color=&amp;quot;darkred&amp;quot;, angle=45))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819153739.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#为图例标题设置字体、颜色、大小等
p+theme(legend.title = element_text(face=&amp;quot;italic&amp;quot;, size=25, color=&amp;quot;red&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819153749.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;接下来是坐标以及网格等的自定义&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#修改背景颜色
p+theme(panel.background = element_rect(fill=&amp;quot;black&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819153800.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#修改边界线类型、颜色
p+theme(panel.border = element_rect(linetype = &amp;quot;dashed&amp;quot;, color=&amp;quot;red&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819153812.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#修改网格线p+theme(panel.grid.major = element_line(color=&amp;quot;blue&amp;quot;, size= 3))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819153821.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;p+theme(panel.grid.minor = element_line(linetype = &amp;quot;dotted&amp;quot;, color=&amp;quot;red&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819153832.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;还可以修改x、y轴等，这里懒得讲了，有兴趣的可以自己捣鼓捣鼓&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;了解&lt;code&gt;theme&lt;/code&gt;之后就可以自己定义自己的主题，以后作图就直接像格式刷一样就行&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#下面是我比较常用的主题，画图时刷一下就行了
windowsFonts(CA=windowsFont(&amp;quot;Calibri&amp;quot;))
mytheme &amp;lt;- theme_bw()+
theme(legend.position = &#39;top&#39;, panel.border = element_blank(), 
panel.grid.major = element_line(linetype = &#39;dashed&#39;), panel.grid.minor = 
element_blank(), legend.text = element_text(size=9,color=&#39;#003087&#39;,family = &amp;quot;CA&amp;quot;), 
plot.title = element_text(size=15,color=&amp;quot;#003087&amp;quot;,family = &amp;quot;CA&amp;quot;), legend.key = 
element_blank(), axis.text = element_text(size=10,color=&#39;#003087&#39;,family = &amp;quot;CA&amp;quot;), 
strip.text = element_text(size=12,color=&amp;quot;#EF0808&amp;quot;,family = &amp;quot;CA&amp;quot;), 
strip.background = element_blank())
pie_theme &amp;lt;- mytheme+
theme(axis.text = element_blank(), axis.ticks = element_blank(), axis.title = 
element_blank(), panel.grid.major = element_blank())
myline_blue &amp;lt;- geom_line(color=&amp;quot;#085A9C&amp;quot;, size=2)
myline_red &amp;lt;- geom_line(color=&amp;quot;#EF0808&amp;quot;,size=2)
myarea &amp;lt;- geom_area(color=NA,fill=&amp;quot;#003087&amp;quot;,alpha=0.2)
mypoint &amp;lt;- geom_point(size=3,shape=21,color=&amp;quot;#003087&amp;quot;,fill=&amp;quot;white&amp;quot;)
mybar &amp;lt;- geom_bar(fill=&amp;quot;#0C8DC4&amp;quot;,stat = &amp;quot;identity&amp;quot;)
mycolor_3 &amp;lt;- scale_fill_manual(values = c(&amp;quot;#085A9C&amp;quot;,&amp;quot;#EF0808&amp;quot;,&amp;quot;#526373&amp;quot;))
mycolor_7 &amp;lt;- scale_fill_manual(values=c (&amp;quot;#085A9C&amp;quot;,&amp;quot;#EF0808&amp;quot;,&amp;quot;#526373&amp;quot;,&amp;quot;#FFFFE7&amp;quot;,&amp;quot;#FF9418&amp;quot;,&amp;quot;#219431&amp;quot;,&amp;quot;#9C52AD&amp;quot;))
mycolor_line_7 &amp;lt;- scale_color_manual(values=c (&amp;quot;#085A9C&amp;quot;,&amp;quot;#EF0808&amp;quot;,&amp;quot;#526373&amp;quot;,&amp;quot;#FFFFE7&amp;quot;,&amp;quot;#FF9418&amp;quot;,&amp;quot;#219431&amp;quot;,&amp;quot;#9C52AD&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;#可以来刷一刷#随便建个数据集
x &amp;lt;-rep(1:5, each = 3)
y &amp;lt;-rep(c(&#39;A&#39;,&#39;B&#39;,&#39;C&#39;),times = 5)
set.seed(1111)
z &amp;lt;-round(runif(min = 10, max = 30, n = 15))
df &amp;lt;-data.frame(x = x, y = y, z = z)
head(df)
##   x   y   z
## 1 1   A   19
## 2 1   B   18
## 3 1   C   28
## 4 2   A   13
## 5 2   B   25
## 6 2   C   30

#柱形图
(p1 &amp;lt;- ggplot(data=df, aes(x=factor(x), y=z, fill=y))+
geom_bar(stat = &amp;quot;identity&amp;quot;, position = &amp;quot;dodge&amp;quot;)+
ggtitle(&amp;quot;自定义主题theme并应用实践&amp;quot;))+
xlab(&amp;quot;随便定义了个x&amp;quot;)+ylab(&amp;quot;随机数&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819153846.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;p1+mytheme
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819153857.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;p1+mytheme+mycolor_7
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819153908.png&#34; alt=&#34;&#34;&gt;
还有线图、饼图等有兴趣的也可以自己刷一刷，你会发现&lt;strong&gt;ggplot2&lt;/strong&gt;的魅力所在就是它拥有无穷的可能性。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>ggplot2学习笔记系列之利用ggplot2绘制误差棒及显著性标记</title>
      <link>https://taoyan.netlify.app/post/2017-06-25.ggplot2%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E7%B3%BB%E5%88%97%E4%B9%8B%E5%88%A9%E7%94%A8ggplot2%E7%BB%98%E5%88%B6%E8%AF%AF%E5%B7%AE%E6%A3%92%E5%8F%8A%E6%98%BE%E8%91%97%E6%80%A7%E6%A0%87%E8%AE%B0/</link>
      <pubDate>Sun, 25 Jun 2017 12:34:08 -0500</pubDate>
      <guid>https://taoyan.netlify.app/post/2017-06-25.ggplot2%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E7%B3%BB%E5%88%97%E4%B9%8B%E5%88%A9%E7%94%A8ggplot2%E7%BB%98%E5%88%B6%E8%AF%AF%E5%B7%AE%E6%A3%92%E5%8F%8A%E6%98%BE%E8%91%97%E6%80%A7%E6%A0%87%E8%AE%B0/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819145522.png&#34; alt=&#34;&#34;&gt;
绘制带有误差棒的条形图&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;library(ggplot2)
#创建数据集
df &amp;lt;- data.frame(treatment = factor(c(1, 1, 1, 2, 2, 2, 3, 3, 3)), 
                 response = c(2, 5, 4, 6, 9, 7, 3, 5, 8), 
                 group = factor(c(1, 2, 3, 1, 2, 3, 1, 2, 3)), 
                 se = c(0.4, 0.2, 0.4, 0.5, 0.3, 0.2, 0.4, 0.6, 0.7))
head(df) #查看数据集

##   treatment response group  se
## 1    1         2       1    0.4
## 2    1         5       2    0.2
## 3    1         4       3    0.4
## 4    2         6       1    0.5
## 5    2         9       2    0.3
## 6    2         7       3    0.2
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;# 使用geom_errorbar()绘制带有误差棒的条形图
# 这里一定要注意position要与`geom_bar()`保持一致，由于系统默认dodge是0.9，
# 因此geom_errorbar()里面position需要设置0.9，width设置误差棒的大小
ggplot(data = df, aes(x = treatment, y = response, fill = group)) + 
geom_bar(stat = &amp;quot;identity&amp;quot;, position = &amp;quot;dodge&amp;quot;) + 
geom_errorbar(aes(ymax = response + se, ymin = response -  se), 
position = position_dodge(0.9), width = 0.15) + 
scale_fill_brewer(palette = &amp;quot;Set1&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819145536.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;绘制带有显著性标记的条形图&#34;&gt;绘制带有显著性标记的条形图&lt;/h2&gt;
&lt;hr&gt;
&lt;pre&gt;&lt;code&gt;label &amp;lt;- c(&amp;quot;&amp;quot;, &amp;quot;*&amp;quot;, &amp;quot;**&amp;quot;, &amp;quot;&amp;quot;, &amp;quot;**&amp;quot;, &amp;quot;*&amp;quot;, &amp;quot;&amp;quot;, &amp;quot;&amp;quot;, &amp;quot;*&amp;quot;) #这里随便设置的显著性，还有abcdef等显著性标记符号，原理一样，这里不再重复。
# 添加显著性标记跟上次讲的添加数据标签是一样的，这里我们假设1是对照
ggplot(data = df, aes(x = treatment, y = response, fill = group)) + 
geom_bar(stat = &amp;quot;identity&amp;quot;, position = &amp;quot;dodge&amp;quot;) + 
geom_errorbar(aes(ymax = response + se, ymin = response -  se), 
position = position_dodge(0.9), width = 0.15) + 
geom_text(aes(y = response +  1.5 * se, label = label, group = group), 
position = position_dodge(0.9), size = 5, fontface = &amp;quot;bold&amp;quot;) + 
scale_fill_brewer(palette = &amp;quot;Set1&amp;quot;) #这里的label就是刚才设置的，group是数据集中的，fontface设置字体。
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819145549.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;绘制两条形图中间带有星号的统计图&#34;&gt;绘制两条形图中间带有星号的统计图&lt;/h2&gt;
&lt;hr&gt;
&lt;pre&gt;&lt;code&gt;#创建一个简单的数据集
Control &amp;lt;- c(2.0,2.5,2.2,2.4,2.1)
Treatment &amp;lt;- c(3.0,3.3,3.1,3.2,3.2)
mean &amp;lt;- c(mean(Control), mean(Treatment))
sd &amp;lt;- c(sd(Control), sd(Treatment))
df1 &amp;lt;- data.frame(V=c(&amp;quot;Control&amp;quot;, &amp;quot;Treatment&amp;quot;), mean=mean, sd=sd)
df1$V &amp;lt;- factor(df1$V, levels=c(&amp;quot;Control&amp;quot;, &amp;quot;Treatment&amp;quot;))
#利用geom_segment()绘制图形
ggplot(data=df1, aes(x=V, y=mean, fill=V))+ 
geom_bar(stat = &amp;quot;identity&amp;quot;,position = position_dodge(0.9),color=&amp;quot;black&amp;quot;)+ 
geom_errorbar(aes(ymax=mean+sd, ymin=mean-sd), width=0.05)+ 
geom_segment(aes(x=1, y=2.5, xend=1, yend=3.8))+#绘制control端的竖线 
geom_segment(aes(x=2, y=3.3, xend=2, yend=3.8))+#绘制treatment端竖线 
geom_segment(aes(x=1, y=3.8, xend=1.45, yend=3.8))+ 
geom_segment(aes(x=1.55, y=3.8, xend=2, yend=3.8))+#绘制两段横线 
annotate(&amp;quot;text&amp;quot;, x=1.5, y=3.8, label=&amp;quot;〇&amp;quot;, size=5)#annotate函数也可以添加标签
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819145604.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;为图形添加标题&#34;&gt;为图形添加标题&lt;/h2&gt;
&lt;hr&gt;
&lt;p&gt;图形标题有图标题、坐标轴标题、图例标题等&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;p &amp;lt;- ggplot(data = df, aes(x = treatment, y = response, fill = group)) + 
geom_bar(stat = &amp;quot;identity&amp;quot;, position = &amp;quot;dodge&amp;quot;) +
geom_errorbar(aes(ymax = response + se, ymin = response -  se),
position = position_dodge(0.9), width = 0.15) + 
scale_fill_brewer(palette = &amp;quot;Set1&amp;quot;)# 利用ggtitle()添加图标题,还有labs（）也可以添加标题，最后会提一下。（有一个问题就是ggtitle()添加的标题总是左对齐）
p + ggtitle(&amp;quot;利用ggtitle()添加图标题&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819145618.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# 利用xlab()\ylab()添加/修改坐标轴标题
p + ggtitle(&amp;quot;利用ggtitle()添加图标题&amp;quot;) + 
xlab(&amp;quot;不同处理&amp;quot;) + 
ylab(&amp;quot;response&amp;quot;) #标题的参数修改在theme里，theme是一个很大的函数，几乎可以定义一切，下次有时间会讲解
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819145632.png&#34; alt=&#34;&#34;&gt;
最后再讲解一下如何将多副图至于一个页面 利用包&lt;strong&gt;gridExtra&lt;/strong&gt;中&lt;code&gt;grid.arrange()&lt;/code&gt;函数实现&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# 将四幅图放置于一个页面中
p &amp;lt;- ggplot(data = df, aes(x = treatment, y = response, fill = group)) + 
geom_bar(stat = &amp;quot;identity&amp;quot;, position = &amp;quot;dodge&amp;quot;) + 
geom_errorbar(aes(ymax = response + se, ymin = response -  se), 
position = position_dodge(0.9), width = 0.15) + 
scale_fill_brewer(palette = &amp;quot;Set1&amp;quot;)
p1 &amp;lt;- p + ggtitle(&amp;quot;利用ggtitle()添加图标题&amp;quot;)
p2 &amp;lt;- p + ggtitle(&amp;quot;利用ggtitle()添加图标题&amp;quot;) + xlab(&amp;quot;不同处理&amp;quot;) + ylab(&amp;quot;response&amp;quot;)
p3 &amp;lt;- ggplot(data = df, aes(x = treatment, y = response, fill = group)) + 
geom_bar(stat = &amp;quot;identity&amp;quot;, position = &amp;quot;dodge&amp;quot;) + 
geom_errorbar(aes(ymax = response + se, ymin = response -  se), 
position = position_dodge(0.9), width = 0.15) + 
geom_text(aes(y = response +  1.5 * se, label = label, group = group), 
position = position_dodge(0.9), size = 5, fontface = &amp;quot;bold&amp;quot;) + 
scale_fill_brewer(palette = &amp;quot;Set1&amp;quot;)
library(gridExtra) #没有安装此包先用install.packages(&#39;gridExtra&#39;)安装
grid.arrange(p, p1, p2, p3)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819145650.png&#34; alt=&#34;&#34;&gt;
上次有人问坐标轴旋转的实现，坐标轴旋转有时是很有用的，下面是我看过的一个例子，用来介绍一下。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#先加载他的数据
url.world_ports &amp;lt;- url(&amp;quot;https://sharpsightlabs.com/wp-content/datasets/world_ports.RData&amp;quot;)
load(url.world_ports)
knitr::kable(df.world_ports[1:5,])#该数据是关于世界上各个港口的数据汇总
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819145702.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;library(dplyr) #用于数据操作，与ggplot2一样是R语言必学包#现在绘制条形图(%&amp;gt;%上次说过是管道操作，用于连接各个代码，十分有用)
df.world_ports%&amp;gt;%filter(year==2014)%&amp;gt;% #筛选2014年的数据 
ggplot(aes(x=reorder(port_label, desc(volume)), y=volume))+ 
geom_bar(stat = &amp;quot;identity&amp;quot;, fill=&amp;quot;darkred&amp;quot;)+ 
labs(title=&amp;quot;Busiest container ports in the world&amp;quot;)+ 
labs(subtitle = &#39;2014, in order of shipping volume&#39;)+ #添加副标题 
labs(x = &amp;quot;Port&amp;quot;, y = &amp;quot;Shipping\nVolume&amp;quot;)+ 
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = .4))#调整x轴标签，angle=90表示标签旋转90度，从图中可以看出
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819145713.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#现在旋转坐标轴，并筛选排名小于25的港口，并且添加数据标签
df.world_ports %&amp;gt;% filter(year==2014, rank&amp;lt;=25) %&amp;gt;% #筛选2014年并且rank小于等于25的数据 
ggplot(aes(x=reorder(port, volume), y=volume))+ 
geom_bar(stat = &amp;quot;identity&amp;quot;, fill=&amp;quot;darkred&amp;quot;)+ 
labs(title=&amp;quot;Busiest container ports in the world&amp;quot;)+ 
labs(subtitle = &#39;2014, in order of shipping volume&#39;)+  
labs(x = &amp;quot;Port&amp;quot;, y = &amp;quot;Shipping\nVolume&amp;quot;)+ 
geom_text(aes(label=volume), hjust=1.2, color=&amp;quot;white&amp;quot;)+ 
coord_flip()#旋转坐标轴
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819145724.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;两图相比，明显第二幅图好，一是可以添加数据标签，二是不用歪着脖子看。
本来打算讲讲图例的但是发现内容太多了，就不讲了，下次吧！&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>ggplot2学习笔记系列之利用ggplot2绘制条形图</title>
      <link>https://taoyan.netlify.app/post/2017-06-25.ggplot2%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E7%B3%BB%E5%88%97%E4%B9%8B%E5%88%A9%E7%94%A8ggplot2%E7%BB%98%E5%88%B6%E6%9D%A1%E5%BD%A2%E5%9B%BE/</link>
      <pubDate>Sun, 25 Jun 2017 09:23:05 -0500</pubDate>
      <guid>https://taoyan.netlify.app/post/2017-06-25.ggplot2%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E7%B3%BB%E5%88%97%E4%B9%8B%E5%88%A9%E7%94%A8ggplot2%E7%BB%98%E5%88%B6%E6%9D%A1%E5%BD%A2%E5%9B%BE/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819144529.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;简介&#34;&gt;简介&lt;/h2&gt;
&lt;hr&gt;
&lt;p&gt;条形图可以说是我们最常用的数据可视化方法了，通常用于展示不同分类条件下（在x轴上）某个数值型变量的取值（y轴上）。绘制条形图时需要特别注意的一个细节是条形图的条形高度有时表示的是数据集中变量的频数，有时表示的则是变量本身。本文将会介绍这两类条形图的绘图技巧。&lt;/p&gt;
&lt;h2 id=&#34;绘制条形图&#34;&gt;绘制条形图&lt;/h2&gt;
&lt;hr&gt;
&lt;p&gt;使用&lt;code&gt;ggplot()&lt;/code&gt;函数与&lt;code&gt;geom_bar(stat=&amp;quot;identity&amp;quot;)&lt;/code&gt;，绘制条形图，我们将利用&lt;strong&gt;gcookbook&lt;/strong&gt;包中的数据进行绘制。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#没安装包要先安装包gcookbook、ggplot2以及dplyr
library(gcookbook)#加载gcookbook以使用其包含的数据
library(ggplot2)#用于可视化
library(dplyr)#用于数据处理
这里我们调用**gcookbook**里的数据集绘制条形图
head(pg_mean)#查看数据集
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## group weigh
 1 ctrl 5.032
 2 trt1 4.661
 3 trt2 5.526
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;ggplot(data=pg_mean, aes(x=group, y=weight))+#将group、weight分别赋值给x、y轴 
geom_bar(stat = &amp;quot;identity&amp;quot;)#必须将geom_bar()中的stat(统计变换)参数设置
为”identity“，即对原始数据集不作任何统计变换，而该参数的默认值为&#39;count&#39;，即观测数量。
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819144542.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;当x是连续型（数值型）变量时，条形图略有不同，需要略作调整，具体如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;str(BOD)#查看BOD数据集可以发现Time变量是数值型

## &#39;data.frame&#39;:  6 obs. of 2 variables: 
## $ Time : num 1 2 3 4 5 7
## $ demand: num 8.3 10.3 19 16 15.6 19.8
## - attr(*, &amp;quot;reference&amp;quot;)= chr &amp;quot;A1.4, p. 270&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;ggplot(data=BOD, aes(x=Time, y=demand))+ geom_bar(stat = &amp;quot;identity&amp;quot;)#此时Time是数值型
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819144559.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ggplot(data=BOD, aes(x=factor(Time), y=demand))+ 
geom_bar(stat = &amp;quot;identity&amp;quot;)#将Time转换为因子型（分类/离散变量），仔细比较两图
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819144616.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;条形图颜色有两部分：填充颜色（&lt;strong&gt;fill&lt;/strong&gt;）以及边框颜色（&lt;strong&gt;color&lt;/strong&gt;），因此调整条形图颜色要调两部分，具体如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ggplot(data=BOD, aes(x=factor(Time), y=demand))+ 
geom_bar(stat = &amp;quot;identity&amp;quot;, fill=&amp;quot;blue&amp;quot;, color=&amp;quot;black&amp;quot;)#可以自己设定喜好的颜色
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819144629.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;绘制簇状条形图&#34;&gt;绘制簇状条形图&lt;/h2&gt;
&lt;hr&gt;
&lt;p&gt;方法：将分类变量映射到fill参数，运用&lt;code&gt;geom_bar(position=&amp;quot;dodge&amp;quot;)&lt;/code&gt;绘制，具体如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;head(cabbage_exp)#查看数据，发现含有两个分类变量：`Cultivar`和`Date`以及一个连续型变量Weight

##  Cultivar Date Weight   sd       n     se
## 1 c39     d16   3.18  0.9566144 10 0.30250803
## 2 c39     d20   2.80  0.2788867 10 0.08819171
## 3 c39     d21   2.74  0.9834181 10 0.31098410
## 4 c52     d16   2.26  0.4452215 10 0.14079141
## 5 c52     d20   3.11  0.7908505 10 0.25008887
## 6 c52     d21   1.47   0.2110819 10 0.06674995
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;ggplot(data=cabbage_exp, aes(x=Date, y=Weight, fill=Cultivar))+#分别将Date与Cultivar映射给x和fill 
geom_bar(stat = &amp;quot;identity&amp;quot;, position = &amp;quot;dodge&amp;quot;)#position = &amp;quot;dodge&amp;quot;表示条形图分开不重叠(簇形图)，默认的为stack（堆叠式）,还有百分比堆叠式(fill)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819144653.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ggplot(data=cabbage_exp, aes(x=Date, y=Weight, fill=Cultivar))+
geom_bar(stat = &amp;quot;identity&amp;quot;, position = &amp;quot;stack&amp;quot;)#堆叠式
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819144707.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ggplot(data=cabbage_exp, aes(x=Date, y=Weight, fill=Cultivar))+ 
geom_bar(stat = &amp;quot;identity&amp;quot;, position = &amp;quot;fill&amp;quot;)#百分比堆叠式
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819144718.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;设置颜色或者调用调色板&#34;&gt;设置颜色或者调用调色板&lt;/h2&gt;
&lt;hr&gt;
&lt;pre&gt;&lt;code&gt;ggplot(data=cabbage_exp, aes(x=Date, y=Weight, fill=Cultivar))+ 
geom_bar(stat = &amp;quot;identity&amp;quot;, position = &amp;quot;dodge&amp;quot;, color=&amp;quot;black&amp;quot;)+ 
scale_fill_brewer(palette = &amp;quot;Set1&amp;quot;)#Set1为调色板，后期将会专门讲解Color设置
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819144729.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ggplot(data=cabbage_exp, aes(x=Date, y=Weight, fill=Cultivar))+ 
geom_bar(stat = &amp;quot;identity&amp;quot;, position = &amp;quot;dodge&amp;quot;, color=&amp;quot;black&amp;quot;)+ 
scale_fill_manual(values = c(&amp;quot;darkred&amp;quot;, &amp;quot;purple&amp;quot;))#自设置颜色
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819144741.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;绘制频数条形图&#34;&gt;绘制频数条形图&lt;/h2&gt;
&lt;hr&gt;
&lt;pre&gt;&lt;code&gt;head(diamonds,n=10)#查看前10行数据

## # A tibble: 10 × 10
##   carat  cut     color clarity depth table  price   x    y     z
##   &amp;lt;dbl&amp;gt; &amp;lt;ord&amp;gt;    &amp;lt;ord&amp;gt;  &amp;lt;ord&amp;gt;  &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;  &amp;lt;int&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;
## 1  0.23 Ideal      E     SI2    61.5   55    326   3.95  3.98 2.43
## 2  0.21 Premium    E     SI1    59.8   61    326   3.89  3.84 2.31
## 3  0.23 Good       E     VS1    56.9   65    327   4.05  4.07 2.31
## 4  0.29 Premium    I     VS2    62.4   58    334   4.20  4.23 2.63
## 5  0.31 Good       J     SI2    63.3   58    335   4.34  4.35 2.75
## 6  0.24 Very Good  J     VVS2   62.8   57    336   3.94  3.96 2.48
## 7  0.24 Very Good  I     VVS1   62.3   57    336   3.95  3.98 2.47
## 8  0.26 Very Good  H     SI1    61.9   55    337   4.07  4.11 2.53
## 9  0.22 Fair       E     VS2    65.1   61    337   3.87  3.78 2.49
## 10 0.23 Very Good  H     VS1    59.4   61    338   4.00  4.05 2.39
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;ggplot(diamonds, aes(x=cut))+#此时不要映射任何变量到y 
geom_bar()#等价于geom_bar(stat=&amp;quot;bin&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819144752.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;绘制y轴正负轴都有数据的条形图&#34;&gt;绘制y轴正负轴都有数据的条形图&lt;/h2&gt;
&lt;hr&gt;
&lt;pre&gt;&lt;code&gt;#首先先创建一下数据集
set.seed(1111)#此命令保证数据结果可以重现在任何电脑上
x &amp;lt;- 1980+1:36#赋值x
y &amp;lt;- round(100*rnorm(36))#赋值y
mydata &amp;lt;- data.frame(x=x, y=y)#创建数据集mydata
head(mydata)#查看数据集
##    x    y
## 1 1981  -9
## 2 1982  132
## 3 1983  64
## 4 1984  117
## 5 1985  12
## 6 1986 -293
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;mydata &amp;lt;- mydata%&amp;gt;%#%&amp;gt;%管道操作，结合dplyr为数据处理神器 
mutate(judge=ifelse(y&amp;gt;=0,&amp;quot;Yes&amp;quot;, &amp;quot;No&amp;quot;))#创建judge变量，将y正负分类
head(mydata)#查看数据
##    x    y   judge
## 1 1981  -9    No
## 2 1982  132   Yes
## 3 1983  64    Yes
## 4 1984  117   Yes
## 5 1985  12    Yes
## 6 1986 -293   No
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;接下来绘制条形图
ggplot(data=mydata, aes(x=x, y=y, fill=judge))+
 geom_bar(stat = &amp;quot;identity&amp;quot;,position = &amp;quot;identity&amp;quot;)+#这里position=&amp;quot;identity&amp;quot;可以避免系统对负值绘制条形图发出警告信息 
scale_fill_manual(values = c(&amp;quot;purple&amp;quot;, &amp;quot;blue&amp;quot;), guide=FALSE)+xlab(&amp;quot;Year&amp;quot;)#guide=FALSE表示不要图例,x轴标题为Year
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819144802.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;通过width来调整条形宽度以及条形距离&#34;&gt;通过width来调整条形宽度以及条形距离&lt;/h2&gt;
&lt;hr&gt;
&lt;pre&gt;&lt;code&gt;head(diamonds)

## # A tibble: 6 × 10
##  carat  cut    color  clarity  depth    table   price   x     y     z
##  &amp;lt;dbl&amp;gt; &amp;lt;ord&amp;gt;    &amp;lt;ord&amp;gt;   &amp;lt;ord&amp;gt;   &amp;lt;dbl&amp;gt;   &amp;lt;dbl&amp;gt;   &amp;lt;int&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;
## 1 0.23  Ideal     E      SI2    61.5     55      326   3.95  3.98  2.43
## 2 0.21  Premium   E      SI1    59.8     61      326   3.89  3.84  2.31
## 3 0.23  Good      E      VS1    56.9     65      327   4.05  4.07  2.31
## 4 0.29  Premium   I      VS2    62.4     58      334   4.20  4.23  2.63
## 5 0.31  Good      J      SI2    63.3     58      335   4.34  4.35  2.75
## 6 0.24  Very Good J      VVS2    62.8    57      336   3.94  3.96  2.48
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;ggplot(data=diamonds, aes(x=color, y=price, fill=cut))+ 
geom_bar(stat = &amp;quot;identity&amp;quot;, width = 0.6, position = position_dodge(0.8))+#调整条形宽度以及条形距离 
scale_fill_brewer(palette = &amp;quot;Set1&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819144813.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;geom_text添加数据标签&#34;&gt;&lt;code&gt;geom_text()&lt;/code&gt;添加数据标签&lt;/h2&gt;
&lt;hr&gt;
&lt;p&gt;使用&lt;code&gt;geom_text()&lt;/code&gt;为条形图添加标签，需要分别指定一个变量映射给x、y以及标签（label），&lt;code&gt;vjust&lt;/code&gt;和&lt;code&gt;hjust&lt;/code&gt;分别调整标签的竖直和水平位置。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;### 标签在条形图顶端下方
ggplot(data=cabbage_exp, aes(x=interaction(Date, Cultivar), y=Weight))+ 
geom_bar(stat = &amp;quot;identity&amp;quot;)+ 
geom_text(aes(label=Weight), vjust=1.5, color=&amp;quot;white&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819144827.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;### 标签在条形图顶端上方
ggplot(data=cabbage_exp, aes(x=interaction(Date, Cultivar), y=Weight))+ 
geom_bar(stat = &amp;quot;identity&amp;quot;)+ 
geom_text(aes(label=Weight), vjust=-0.3, color=&amp;quot;red&amp;quot;)#可以通过color、size等自行调整标签属性
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819144844.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;堆叠图也一样
ggplot(data=cabbage_exp, aes(x=Date, y=Weight, fill=Cultivar))+ 
geom_bar(stat=&amp;quot;identity&amp;quot;, position = &amp;quot;stack&amp;quot;)+ 
geom_text(aes(label=Weight), size=5, color=&amp;quot;black&amp;quot;, vjust=3.5, hjust=0.5, 
position = position_stack())#这里的position要与geom_bar()里面的保持一致，各种参数多调整才能效果最佳
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190819144901.png&#34; alt=&#34;&#34;&gt;
下次将重点讲解如何添加误差棒、显著性标记、坐标轴标题、图标题以及部分小技巧等等&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
