<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>tips | Tao Yan</title>
    <link>https://taoyan.netlify.app/tags/tips/</link>
      <atom:link href="https://taoyan.netlify.app/tags/tips/index.xml" rel="self" type="application/rss+xml" />
    <description>tips</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><copyright>© Tao Yan, 2018-2020</copyright><lastBuildDate>Thu, 12 Jul 2018 12:19:05 +0000</lastBuildDate>
    <image>
      <url>https://taoyan.netlify.app/img/pom-card.png</url>
      <title>tips</title>
      <link>https://taoyan.netlify.app/tags/tips/</link>
    </image>
    
    <item>
      <title>改善R语言代码的5个小技巧</title>
      <link>https://taoyan.netlify.app/post/2018-07-12.%E6%94%B9%E5%96%84r%E8%AF%AD%E8%A8%80%E4%BB%A3%E7%A0%81%E7%9A%845%E4%B8%AA%E5%B0%8F%E6%8A%80%E5%B7%A7/</link>
      <pubDate>Thu, 12 Jul 2018 12:19:05 +0000</pubDate>
      <guid>https://taoyan.netlify.app/post/2018-07-12.%E6%94%B9%E5%96%84r%E8%AF%AD%E8%A8%80%E4%BB%A3%E7%A0%81%E7%9A%845%E4%B8%AA%E5%B0%8F%E6%8A%80%E5%B7%A7/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/0m7AJLj3he.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;简介&#34;&gt;简介&lt;/h2&gt;
&lt;p&gt;这篇文章来源于
&lt;a href=&#34;https://twitter.com/drsimonj&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@drsimonj&lt;/a&gt;的
&lt;a href=&#34;https://drsimonj.svbtle.com/five-simple-tricks-to-improve-your-r-cod&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;博客&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;从1开始排序&#34;&gt;从1开始排序&lt;/h2&gt;
&lt;p&gt;当使用冒号(:)创建序列时，尝试用&lt;code&gt;seq()&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# sequence a vector
x &amp;lt;- runif(10)
seq(x)
##  [1]  1  2  3  4  5  6  7  8  9 10

#sequence an integer

seq(nrow(mtcars))
##  [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23
## [24] 24 25 26 27 28 29 30 31 32
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;冒号有时会产生意想不到的结果，它会在我们不注意的情况下产生各种问题，比如当我们对空向量的长度进行排序的时候：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;# empty vector
x = c()
1:length(x)
## [1] 1 0

seq(x)
## integer(0)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;利用&lt;code&gt;seq()&lt;/code&gt;可以自动创建从1到对象长度的序列，这样就可以避免使用&lt;code&gt;length()&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;vcetor而非c&#34;&gt;&lt;code&gt;vcetor()&lt;/code&gt;而非&lt;code&gt;c()&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;创建空向量的时候，尝试使用&lt;code&gt;vector(&amp;quot;type&amp;quot;, length)&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# a numeric vector with 5 elements
vector(&amp;quot;numeric&amp;quot;, 10)
##  [1] 0 0 0 0 0 0 0 0 0 0

#a character vector with 5 elements
vector(&amp;quot;character&amp;quot;, 5)
## [1] &amp;quot;&amp;quot; &amp;quot;&amp;quot; &amp;quot;&amp;quot; &amp;quot;&amp;quot; &amp;quot;&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;使用&lt;code&gt;vector()&lt;/code&gt;可以提高内存使用率并提高运行速度&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;n &amp;lt;- 1e05
x_empty &amp;lt;- c()
system.time(
  for (i in seq(n)){
    x_empty &amp;lt;- c(x_empty,i)
  }
)
##    user  system elapsed 
##    9.69    0.03    9.97
n &amp;lt;- 1e05
x_zeros &amp;lt;- vector(&amp;quot;integer&amp;quot;, n)
system.time(
  for (i in seq(n)){
    x_zeros[i] &amp;lt;- i
  }
)
##    user  system elapsed 
##       0       0       0
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;放弃which&#34;&gt;放弃&lt;code&gt;which()&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;使用R语言的时候，我们常常使用&lt;code&gt;which()&lt;/code&gt;从某个布尔条件中获取索引，然后根据索引提取数据,其实没有必要使用&lt;code&gt;which()&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#obtain elements greater than 5
x &amp;lt;- 3:7
#use which (not necessary)
x[which(x&amp;gt;5)]
## [1] 6 7
#no which
x[x&amp;gt;5]
## [1] 6 7
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;或者计算大于5的元素个数&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#use which
length(which(x&amp;gt;5))
## [1] 2
# no which
sum(x&amp;gt;5)
## [1] 2
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;实际上我们需要的是布尔值&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;condition &amp;lt;- x&amp;gt;5
condition
## [1] FALSE FALSE FALSE  TRUE  TRUE
x[condition]
## [1] 6 7
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;当与&lt;code&gt;sum()&lt;/code&gt;或者&lt;code&gt;mean()&lt;/code&gt;结合使用时，可以用布尔值来获取满足条件的值的计数或比例&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sum(condition)
## [1] 2
mean(condition)
## [1] 0.4
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;但是&lt;code&gt;which()&lt;/code&gt;可以告诉我们TRUE值的索引号&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;which(condition)
## [1] 4 5
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;测试任何或者所有的值是否为真，可以利用&lt;code&gt;any()&lt;/code&gt;和&lt;code&gt;all()&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;set.seed(23)
x &amp;lt;- runif(10)
if (length(which(x&amp;gt;0.5))&amp;gt;0)
  print(&amp;quot;At least one value is greater than 0.5&amp;quot;)
## [1] &amp;quot;At least one value is greater than 0.5&amp;quot;

if (any(x&amp;gt;0.5))
  print(&amp;quot;At least one value is greater than 0.5&amp;quot;)
## [1] &amp;quot;At least one value is greater than 0.5&amp;quot;

#use which and length to test if all values are less than 1
if (length(which(x&amp;lt;1))==length(x))
  print(&amp;quot;All values are less than 1&amp;quot;)
## [1] &amp;quot;All values are less than 1&amp;quot;

if (all(x&amp;lt;1))
  print(&amp;quot;All values are less than 1&amp;quot;)
## [1] &amp;quot;All values are less than 1&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;另外一点是可以节省时间&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;x &amp;lt;- runif(1e8)

system.time(x[which(x &amp;gt; .5)])
##    user  system elapsed 
##    1.24    0.09    1.33
system.time(x[x &amp;gt; .5])
##    user  system elapsed 
##    0.97    0.14    1.13
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;factor你的变量&#34;&gt;&lt;code&gt;factor&lt;/code&gt;你的变量&lt;/h2&gt;
&lt;p&gt;当移除一个元素之后，被移除的元素仍然占据着一个位置&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;set.seed(23)
x &amp;lt;-factor(sample(letters,5,replace = FALSE))
x
## [1] o f h q s
## Levels: f h o q s
plot(x)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/dK2i1bjhG4.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;p&gt;移除&lt;strong&gt;s&lt;/strong&gt;之后&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;x &amp;lt;- x[x!=&amp;quot;s&amp;quot;]
x
## [1] o f h q
## Levels: f h o q s
plot(x)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/eAb8d887iA.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;p&gt;一种解决办法是再次&lt;code&gt;factor()&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;x &amp;lt;- factor(x)
x
## [1] o f h q
## Levels: f h o q
plot(x)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/HId1H0ICc0.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;p&gt;另外一种方法是利用&lt;code&gt;droplevels()&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;set.seed(23)
x &amp;lt;-factor(sample(letters,5,replace = FALSE))
x &amp;lt;- x[x!=&amp;quot;s&amp;quot;]
x &amp;lt;- droplevels(x)
x
## [1] o f h q
## Levels: f h o q
plot(x)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/HId1H0ICc0.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;优先使用&#34;&gt;优先使用$&lt;/h2&gt;
&lt;p&gt;从data.frame中提取数据时，在行$之前指定列[&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#row first,column second - not ideal
mtcars[mtcars$cyl==4, ]$hp
##  [1]  93  62  95  66  52  65  97  66  91 113 109
#column first, row second - much better
mtcars$hp[mtcars$cyl==4]
##  [1]  93  62  95  66  52  65  97  66  91 113 109
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;原因如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;尽量避免使用烦人的逗号&lt;/li&gt;
&lt;li&gt;提高运行速度&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;# Simulate a data frame...
n &amp;lt;- 1e7
d &amp;lt;- data.frame(
  a = seq(n),
  b = runif(n)
)

# rows first, column second - not ideal
system.time(d[d$b &amp;gt; .5, ]$a)
##    user  system elapsed 
##    0.47    0.00    0.47

# column first, rows second - much better
system.time(d$a[d$b &amp;gt; .5])
##    user  system elapsed 
##    0.11    0.00    0.11

&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;sessioninfo&#34;&gt;SessionInfo&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;sessionInfo()

## R version 3.5.1 (2018-07-02)
## Platform: x86_64-w64-mingw32/x64 (64-bit)
## Running under: Windows 10 x64 (build 16299)
## 
## Matrix products: default
## 
## locale:
## [1] LC_COLLATE=Chinese (Simplified)_China.936 
## [2] LC_CTYPE=Chinese (Simplified)_China.936   
## [3] LC_MONETARY=Chinese (Simplified)_China.936
## [4] LC_NUMERIC=C                              
## [5] LC_TIME=Chinese (Simplified)_China.936    
## 
## attached base packages:
## [1] stats     graphics  grDevices utils     datasets  methods   base     
## 
## loaded via a namespace (and not attached):
##  [1] compiler_3.5.1  backports_1.1.2 magrittr_1.5    rprojroot_1.3-2
##  [5] tools_3.5.1     htmltools_0.3.6 yaml_2.1.19     Rcpp_0.12.17   
##  [9] stringi_1.1.7   rmarkdown_1.10  knitr_1.20      stringr_1.3.1  
## [13] digest_0.6.15   evaluate_0.10.1
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
  </channel>
</rss>
