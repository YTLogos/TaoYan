<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>GWAS | Tao Yan</title>
    <link>https://taoyan.netlify.app/tags/gwas/</link>
      <atom:link href="https://taoyan.netlify.app/tags/gwas/index.xml" rel="self" type="application/rss+xml" />
    <description>GWAS</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><copyright>© Tao Yan, 2018-2020</copyright><lastBuildDate>Tue, 26 Feb 2019 18:19:05 +0000</lastBuildDate>
    <image>
      <url>https://taoyan.netlify.app/img/pom-card.png</url>
      <title>GWAS</title>
      <link>https://taoyan.netlify.app/tags/gwas/</link>
    </image>
    
    <item>
      <title>利用EMMAX进行GWAS分析</title>
      <link>https://taoyan.netlify.app/post/2019-02-27.%E5%88%A9%E7%94%A8emmax%E8%BF%9B%E8%A1%8Cgwas%E5%88%86%E6%9E%90/</link>
      <pubDate>Tue, 26 Feb 2019 18:19:05 +0000</pubDate>
      <guid>https://taoyan.netlify.app/post/2019-02-27.%E5%88%A9%E7%94%A8emmax%E8%BF%9B%E8%A1%8Cgwas%E5%88%86%E6%9E%90/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/Pic_blog/master/manhanttan.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;文件准备&#34;&gt;文件准备&lt;/h2&gt;
&lt;p&gt;利用&lt;strong&gt;EMMAX&lt;/strong&gt;进行&lt;strong&gt;GWAS&lt;/strong&gt;分析需要以下文件&lt;/p&gt;
&lt;h3 id=&#34;基因型文件&#34;&gt;基因型文件&lt;/h3&gt;
&lt;p&gt;基因型文件直接使用&lt;strong&gt;VCF&lt;/strong&gt;进行过滤后得到，具体如下(我这里原始的&lt;strong&gt;VCF&lt;/strong&gt;文件是&lt;strong&gt;test.vcf&lt;/strong&gt;)，过滤前先将染色体名称全部换为数值型(不然后续&lt;strong&gt;GWAS&lt;/strong&gt;分析会报错的)，同时添加&lt;code&gt;SNP ID&lt;/code&gt;，这个比较简单就不讲了！
另外如果测序深度较低，可以基因型填补一下，按研究需要吧，这里就不进行了。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;按基因型等位频率(0.05)以及缺失率(0.1)进行过滤&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;plink --vcf test.vcf --maf 0.05 --geno 0.1 --recode vcf-iid --out test.maf0.05.int0.9
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;生成&lt;strong&gt;test.maf0.05.int0.9.vcf&lt;/strong&gt;文件&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;依据LD对标记进行筛选(这一步SNP必须有ID才行，GATK等软件生成的VCF文件是没有ID的)&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;plink --vcf test.maf0.05.int0.9.vcf --indep-pairwise 50 10 0.2 --out test.maf0.05.int0.9
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;产生&lt;strong&gt;test.maf0.05.int0.9.prune.in&lt;/strong&gt;和&lt;strong&gt;test.maf0.05.int0.9.prune.out&lt;/strong&gt;两个文件，&lt;strong&gt;in&lt;/strong&gt;表示入选的标记，&lt;strong&gt;out&lt;/strong&gt;表示被去除的标记，这两个文件都是只含有SNP ID，根据ID进行筛选&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;提取筛选结果&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;plink --vcf test.maf0.05.int0.9.vcf --make-bed --extract test.maf0.05.int0.9.prune.in --out test.maf0.05.int0.9.prune.in
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;将筛选后的数据转换为&lt;strong&gt;vcf&lt;/strong&gt;格式&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;plink --bfile test.maf0.05.int0.9.prune.in --recode vcf-iid --out test.maf0.05.int0.9.prune.in
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;得到&lt;strong&gt;test.maf0.05.int0.9.prune.in.vcf&lt;/strong&gt;基因型文件&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;将筛选后的文件转换为&lt;strong&gt;admixture&lt;/strong&gt;数据格式用于群体结构分析&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;plink -bfile test.maf0.05.int0.9.prune.in --recode 12 --out test.maf0.05.int0.9.prune.in
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;得到&lt;strong&gt;test.maf0.05.int0.9.prune.in.ped&lt;/strong&gt;用于&lt;strong&gt;admixture&lt;/strong&gt;分析&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;将基因型文件转换为&lt;strong&gt;EMMAX&lt;/strong&gt;格式&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;plink --vcf test.maf0.05.int0.9.vcf --recode 12 transpose --output-missing-genotype 0 --out test.maf0.05.int0.9 --autosome-num 90
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;得到&lt;strong&gt;tfam&lt;/strong&gt;文件&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;群体亲缘关系分析&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;emmax-kin test.maf0.05.int0.9 -v -h -d 10 -o test.maf0.05.int0.9.BN.kinf

## 如果你下载的emmax软件是inter这个版本的，这里需要注意，命令有点不同
emmax-kin-inter64 test.maf0.05.int0.9 -v -d 10 -o test.maf0.05.int0.9.BN.kinf
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;群体结构文件&#34;&gt;群体结构文件&lt;/h3&gt;
&lt;p&gt;首先&lt;strong&gt;admixture&lt;/strong&gt;群体结构分析,可以添加参数j，多线程&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;for i in {1..15}
do
admixture --cv test.maf0.05.int0.9.prune.in.ped ${i} -j48 &amp;gt;&amp;gt; log.txt
done
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;查看最佳分群&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ grep CV log.txt
CV error (K=1): 0.43802
CV error (K=2): 0.41492
CV error (K=3): 0.40182
CV error (K=4): 0.39723
CV error (K=5): 0.39281
CV error (K=6): 0.38899
CV error (K=7): 0.38640
CV error (K=8): 0.38434
CV error (K=9): 0.38301
CV error (K=10): 0.38156
CV error (K=11): 0.38050
CV error (K=12): 0.38006
CV error (K=13): 0.37869
CV error (K=14): 0.37795
CV error (K=15): 0.37830
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;K=14时CV值最小，所以最佳分群为14
K=14时候的Q矩阵用于后续分析。&lt;strong&gt;admixture&lt;/strong&gt;产生的Q矩阵格式如下(前6行)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;0.000010 0.864016 0.039019 0.000010 0.000010 0.000010 0.000010 0.000010 0.000010 0.096855 0.000010 0.000010 0.000010 0.000010
0.000010 0.135428 0.000010 0.039195 0.000010 0.192606 0.195391 0.062418 0.000010 0.124034 0.214463 0.000010 0.028383 0.008032
0.000010 0.613532 0.000010 0.043222 0.000010 0.000010 0.272258 0.000010 0.000010 0.000010 0.058748 0.000010 0.012151 0.000010
0.000010 0.419498 0.417594 0.000010 0.000010 0.000010 0.000010 0.000010 0.000010 0.000010 0.000010 0.090515 0.062396 0.009908
0.012456 0.045110 0.000010 0.000010 0.000010 0.021304 0.202956 0.049112 0.001099 0.455700 0.011129 0.093843 0.107251 0.000010
0.000010 0.071372 0.004548 0.000010 0.004779 0.000010 0.326421 0.009612 0.003101 0.211292 0.350671 0.000010 0.018153 0.000010
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;因为文件相对较小，手动添加表头信息，&lt;strong&gt;以及删除最后一列&lt;/strong&gt;，保存&lt;strong&gt;14.Q&lt;/strong&gt;用于后续分析,之后如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;Covariate&amp;gt;
&amp;lt;Trait&amp;gt; Q1      Q2      Q3      Q4      Q5      Q6      Q7      Q8      Q9      Q10     Q11     Q12     Q13
R4155   0.00001 0.864016        0.039019        0.00001 0.00001 0.00001 0.00001 0.00001 0.00001 0.096855        0.00001 0.00001 0.00001
R4156   0.00001 0.135428        0.00001 0.039195        0.00001 0.192606        0.195391        0.062418        0.00001 0.124034        0.214463        0.00001 0.028383
R4157   0.00001 0.613532        0.00001 0.043222        0.00001 0.00001 0.272258        0.00001 0.00001 0.00001 0.058748        0.00001 0.012151
R4158   0.00001 0.419498        0.417594        0.00001 0.00001 0.00001 0.00001 0.00001 0.00001 0.00001 0.00001 0.090515        0.062396
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;表型数据&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;EMMAX&lt;/strong&gt;每次只能运行一个性状，格式与&lt;strong&gt;tfam&lt;/strong&gt;格式类似，所以需要进行拆分转换，拆分前，需要将缺失值-999替换为NA。
最开始我的表型数据如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;Trait&amp;gt; day
R4155   184
R4156   181
R4157   181
R4158   182
R4159   170
R4160   179
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;利用&lt;strong&gt;R&lt;/strong&gt;进行转换&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;tfam &amp;lt;- read.table(&amp;quot;test.maf0.05.int0.9.tfam&amp;quot;, header = F, stringsAsFactors = F)
tr &amp;lt;- read.table(&amp;quot;test.trait.txt&amp;quot;, header = T, check.names = F, stringsAsFactors = F)
tr &amp;lt;- tr[match(tfam$V1, tr$`&amp;lt;Trait&amp;gt;`),] ###把基因型文件样本顺序和表型文件样本顺序调整为一致
tr[tr == -999] &amp;lt;- NA
tre &amp;lt;- cbind(tr[,1], tr)
write.table(tre, file = &amp;quot;test_trait_emmax.txt&amp;quot;, col.names = F, row.names = F, sep = &amp;quot;\t&amp;quot;, quote = F)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;转换后结果如下:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;R4155   R4155   184
R4156   R4156   181
R4157   R4157   181
R4158   R4158   182
R4159   R4159   170
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;协变量文件&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这里以群体结构作为协变量&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;tfam &amp;lt;- read.table(&amp;quot;test.maf0.05.int0.9.tfam&amp;quot;, header = F, stringsAsFactors = F)
admix &amp;lt;- read.table(&amp;quot;14.Q&amp;quot;, header = T, check.names = F, stringsAsFactors = F, skip = 1)
admix &amp;lt;- admix[match(tfam$V1, admix$`&amp;lt;Trait&amp;gt;`), ]
admix &amp;lt;- cbind(admix[,1], admix[,1], rep(1, nrow(admix)), admix[,-1]) 
write.table(admix, file = &amp;quot;test.emmax.cov.txt&amp;quot;, col.names = F, row.names = F, sep = &amp;quot;\t&amp;quot;, quote = F)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;生成的协变量文件格式如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;R4155   R4155   1       1e-05   0.864016        0.039019        1e-05   1e-05   1e-05   1e-05   1e-05   1e-05   0.096855        1e-05   1e-05   1e-05
R4156   R4156   1       1e-05   0.135428        1e-05   0.039195        1e-05   0.192606        0.195391        0.062418        1e-05   0.124034        0.214463        1e-05   0.028383
R4157   R4157   1       1e-05   0.613532        1e-05   0.043222        1e-05   1e-05   0.272258        1e-05   1e-05   1e-05   0.058748        1e-05   0.012151
R4158   R4158   1       1e-05   0.419498        0.417594        1e-05   1e-05   1e-05   1e-05   1e-05   1e-05   1e-05   1e-05   0.090515        0.062396
R4159   R4159   1       0.012456        0.04511 1e-05   1e-05   1e-05   0.021304        0.202956        0.049112        0.001099        0.4557  0.011129        0.093843 0.10725
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;gwas运行&#34;&gt;&lt;strong&gt;GWAS&lt;/strong&gt;运行&lt;/h2&gt;
&lt;p&gt;所有准备文件都有之后，就可以进行&lt;strong&gt;GWAS&lt;/strong&gt;分析了&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;emmax -v -d 10 -t test.maf0.05.int0.9 -o test_emmax_cov -p test_trait_emmax.txt -k test.maf0.05.int0.9.BN.kinf -c test.cov.emmax.txt
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;最后生成的&lt;strong&gt;test_emmax_cov.ps&lt;/strong&gt;就是我们需要的&lt;/p&gt;
&lt;h2 id=&#34;可视化&#34;&gt;可视化&lt;/h2&gt;
&lt;p&gt;这里用&lt;strong&gt;qqman&lt;/strong&gt;进行manhattan以及&lt;strong&gt;QQ&lt;/strong&gt;图的绘制&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#gwas_visualization.R
setwd(&amp;quot;/database/pop-analysis-NY7/result/pop-structure/gwas&amp;quot;)
if(!require(qqman)){
    install.packages(&amp;quot;qqman&amp;quot;)
    library(qqman)
}
if(!require(tidyverse)){
    install.packages(&amp;quot;tidyverse&amp;quot;)
    library(tidyverse)
}
gwas &amp;lt;- read.table(&amp;quot;test_emmax_cov.ps&amp;quot;, header = FALSE, stringsAsFactors = FALSE)
colnames(gwas) &amp;lt;- c(&amp;quot;SNP&amp;quot;,&amp;quot;SE&amp;quot;,&amp;quot;P&amp;quot;)
splite_chr &amp;lt;- function(data,c){
  c(str_split(data[c], pattern = &amp;quot;_&amp;quot;)[[1]][1])
}
splite_pos &amp;lt;- function(data,c){
  c(str_split(data[c], pattern = &amp;quot;_&amp;quot;)[[1]][2])
}
gwas$CHR &amp;lt;- apply(gwas,1,splite_chr,c=&amp;quot;SNP&amp;quot;)
gwas$BP &amp;lt;- apply(gwas,1,splite_pos,c=&amp;quot;SNP&amp;quot;)
gwas &amp;lt;- gwas%&amp;gt;%select(SNP,CHR,BP,P)
write.table(gwas,&amp;quot;gwas_emmax_test_for_vis.ps&amp;quot;, col.names = TRUE, row.names = FALSE, quote = FALSE)
pdf(&amp;quot;test_emmax_manhattan.pdf&amp;quot;,width = 12,height = 6)
manhattan(gwas)
dev.off()
pdf(&amp;quot;test_emmax_qq.pdf&amp;quot;, width = 8, height = 6)
qq(gwas$P)
dev.off()
png(&amp;quot;test_emmax_manhattan.png&amp;quot;,width = 960,height = 600,type = &amp;quot;cairo&amp;quot;)
manhattan(gwas)
dev.off()
png(&amp;quot;test_emmax_qq.png&amp;quot;, width = 800, height = 800,type = &amp;quot;cairo&amp;quot;)
qq(gwas$P)
dev.off()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;将上述脚本保存为&lt;code&gt;gwas_visualization.R&lt;/code&gt;，之后在&lt;strong&gt;linux&lt;/strong&gt;中运行&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Rscript gwas_visualization.R
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;就可以得到我们需要的图&lt;/p&gt;
&lt;h2 id=&#34;后续分析&#34;&gt;后续分析&lt;/h2&gt;
&lt;p&gt;后续还有很多分析，比如，显著位点的提取，关联基因的提取，关联基因的注释等等。。。。。。。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>一步步教你如何绘制GWAS中的曼哈顿图以及QQ图</title>
      <link>https://taoyan.netlify.app/post/2018-01-11.%E4%B8%80%E6%AD%A5%E6%AD%A5%E6%95%99%E4%BD%A0%E5%A6%82%E4%BD%95%E7%BB%98%E5%88%B6gwas%E4%B8%AD%E7%9A%84%E6%9B%BC%E5%93%88%E9%A1%BF%E5%9B%BE%E4%BB%A5%E5%8F%8Aqq%E5%9B%BE/</link>
      <pubDate>Thu, 11 Jan 2018 12:19:05 +0000</pubDate>
      <guid>https://taoyan.netlify.app/post/2018-01-11.%E4%B8%80%E6%AD%A5%E6%AD%A5%E6%95%99%E4%BD%A0%E5%A6%82%E4%BD%95%E7%BB%98%E5%88%B6gwas%E4%B8%AD%E7%9A%84%E6%9B%BC%E5%93%88%E9%A1%BF%E5%9B%BE%E4%BB%A5%E5%8F%8Aqq%E5%9B%BE/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/EE3ce1m2L2.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;简介&#34;&gt;简介&lt;/h2&gt;
&lt;p&gt;GWAS研究中的曼哈顿图以及QQ图可以说是标配了，至于具体如何理解这两个图，可以参考我以前的博客。上周我利用自己的数据跑了个GWAS，我是利用&lt;strong&gt;GAPIT&lt;/strong&gt;跑的，出的图感觉真心丑，大家可以看看：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/iAm97eG6FD.png?raw=true&#34; alt=&#34;Manhattan plot&#34;&gt;
&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/im6b1iJ7FE.png?raw=true&#34; alt=&#34;QQ plot&#34;&gt;&lt;/p&gt;
&lt;p&gt;所以我利用&lt;strong&gt;GAPIT&lt;/strong&gt;出来的数据重新画了图，用的就是包&lt;strong&gt;qqman&lt;/strong&gt;。&lt;/p&gt;
&lt;h2 id=&#34;安装&#34;&gt;安装&lt;/h2&gt;
&lt;p&gt;Github主页上提供了三种安装方式：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# Install the stable release from CRAn
install.packages(&amp;quot;qqman&amp;quot;)
# 直接从Github上安装
devtools::install_github(&amp;quot;stephenturner/qqman&amp;quot;)
# 从Github上安装最新的开发版
devtools::install_github(&amp;quot;stephenturner/qqman&amp;quot;,ref=&amp;quot;dev&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;数据格式&#34;&gt;数据格式&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;qqman&lt;/strong&gt;里内置了一套数据集&lt;code&gt;gwasResults&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;library(qqman)
dim(gwasResults)
## [1] 16470     4
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;head(gwasResults)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   SNP CHR BP         P
## 1 rs1   1  1 0.9148060
## 2 rs2   1  2 0.9370754
## 3 rs3   1  3 0.2861395
## 4 rs4   1  4 0.8304476
## 5 rs5   1  5 0.6417455
## 6 rs6   1  6 0.5190959
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;str(gwasResults)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## &#39;data.frame&#39;:    16470 obs. of  4 variables:
##  $ SNP: chr  &amp;quot;rs1&amp;quot; &amp;quot;rs2&amp;quot; &amp;quot;rs3&amp;quot; &amp;quot;rs4&amp;quot; ...
##  $ CHR: int  1 1 1 1 1 1 1 1 1 1 ...
##  $ BP : int  1 2 3 4 5 6 7 8 9 10 ...
##  $ P  : num  0.915 0.937 0.286 0.83 0.642 ...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;可以看到该数据集共有16470行，4列，分别为SNP名、染色体、SNP位置以及P值。
该数据集不大，SNP标记十分少，通过每条染色体上的SNP标记可以看出&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;as.data.frame(table(gwasResults$CHR))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    Var1 Freq
## 1     1 1500
## 2     2 1191
## 3     3 1040
## 4     4  945
## 5     5  877
## 6     6  825
## 7     7  784
## 8     8  750
## 9     9  721
## 10   10  696
## 11   11  674
## 12   12  655
## 13   13  638
## 14   14  622
## 15   15  608
## 16   16  595
## 17   17  583
## 18   18  572
## 19   19  562
## 20   20  553
## 21   21  544
## 22   22  535
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;manhattan-plot&#34;&gt;Manhattan plot&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;qqman&lt;/strong&gt;提供了一个绘制Manhattan plot的函数&lt;code&gt;manhattan()&lt;/code&gt;。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;manhattan(gwasResults)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/h6dGbBmlkI.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;manhattan()&lt;/code&gt;提供了大量的参数设置：标题(main=)、y轴范围(ylim=)、控制点的大小(cex=)、x轴坐标轴标签的字体大小(cex.axis=)、颜色(col=)、阈值参考线控制(suggestiveline=, genomewideline=)、以及添加注释信息等。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;manhattan(gwasResults, main=&amp;quot;Manhattan plot&amp;quot;, ylim=c(0, 10), cex=0.6, cex.axis=0.9, col = c(&amp;quot;blue&amp;quot;,&amp;quot;orange&amp;quot;), suggestiveline = F, genomewideline = F, chrlabs = c(1:20, &amp;quot;P&amp;quot;,&amp;quot;Q&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/LHmie5lJJI.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;p&gt;还提供针对一条染色体数据进行绘图&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;manhattan(subset(gwasResults, CHR==3))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/a7062c4K9L.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;p&gt;对有显著性影响的SNP进行高亮(没有的话会忽略掉)&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;manhattan(gwasResults, highlight = snpsOfInterest)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/e3lD9c1706.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;p&gt;针对特定染色体以及特定区间进行高亮&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;manhattan(subset(gwasResults, CHR==3), highlight=snpsOfInterest, xlim=c(200, 500), main=&amp;quot;Chr 3&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/el9mh4j8mJ.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;manhattan&lt;/code&gt;注释的时候默认注释每条染色体中P值最小且超过我们设定的p值阈值的SNP点，默认的P值阈值为0.01&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;manhattan(gwasResults, annotatePval = 0.01)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/36G2LmhlCm.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;p&gt;我们可以通过自行设定参数注释所有超过P值阈值的SNP点&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;manhattan(gwasResults, annotatePval = 0.001, annotateTop = FALSE)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/0f84LHbID9.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;manhattan&lt;/code&gt;可以绘制任意的value值，不限于p-value，只需要在设置中指定value值就行了。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;gwasResults &amp;lt;- transform(gwasResults, zscore=qnorm(P/2, lower.tail = FALSE))
head(gwasResults)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   SNP CHR BP         P    zscore
## 1 rs1   1  1 0.9148060 0.1069785
## 2 rs2   1  2 0.9370754 0.0789462
## 3 rs3   1  3 0.2861395 1.0666287
## 4 rs4   1  4 0.8304476 0.2141275
## 5 rs5   1  5 0.6417455 0.4652597
## 6 rs6   1  6 0.5190959 0.6447396
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;接下来利用value值zscore来绘制图形&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;manhattan(gwasResults, p = &amp;quot;zscore&amp;quot;, logp = FALSE, ylab=&amp;quot;Z-score&amp;quot;, genomewideline = FALSE, suggestiveline = FALSE, main=&amp;quot;Manhattan plot of Z-scores&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/d5K199L3lh.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;p&gt;需要注意的几点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;数据集列名默认是SNP、CHR、BP和P，因此如何自己的数据集列名与此不一致的话，要么转为一致，要么绘图时指定chr=、bp=、p=和snp=。具体情况可见help(manhattan)。&lt;/li&gt;
&lt;li&gt;染色体编号那一列必须是数值型，如果数据集中有&amp;quot;X&amp;quot;、&amp;ldquo;Y&amp;quot;以及&amp;quot;MT&amp;quot;等染色体，想要转为数值型编号再在绘图时指定坐标名&lt;/li&gt;
&lt;li&gt;&lt;code&gt;manhattan&lt;/code&gt;只提供了修改snp点的颜色参数，如果要修改阈值线、高亮、注释等的颜色，需要修改源码。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;qq图&#34;&gt;QQ图&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;qqman&lt;/strong&gt;提供了绘制QQ图的函数&lt;code&gt;qq()&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;qq(gwasResults)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/25aI37Ld3g.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;p&gt;通过参数设置可以指定点的类型、大小、颜色等&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;qq(gwasResults$P, main=&amp;quot;Q-Q plot of GWAS p-value&amp;quot;, xlim=c(0,7), ylim=c(0,12), pch=18, col = &amp;quot;blue4&amp;quot;, cex=1.5, las=1)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/9hlig1ajam.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;sessioninfo&#34;&gt;SessionInfo&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;sessionInfo()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## R version 3.4.3 (2017-11-30)
## Platform: x86_64-w64-mingw32/x64 (64-bit)
## Running under: Windows 10 x64 (build 16299)
## 
## Matrix products: default
## 
## locale:
## [1] LC_COLLATE=Chinese (Simplified)_China.936 
## [2] LC_CTYPE=Chinese (Simplified)_China.936   
## [3] LC_MONETARY=Chinese (Simplified)_China.936
## [4] LC_NUMERIC=C                              
## [5] LC_TIME=Chinese (Simplified)_China.936    
## 
## attached base packages:
## [1] stats     graphics  grDevices utils     datasets  methods   base     
## 
## other attached packages:
## [1] qqman_0.1.3
## 
## loaded via a namespace (and not attached):
##  [1] compiler_3.4.3  backports_1.1.2 magrittr_1.5    rprojroot_1.3-2
##  [5] tools_3.4.3     htmltools_0.3.6 yaml_2.1.16     Rcpp_0.12.14   
##  [9] calibrate_1.7.2 stringi_1.1.6   rmarkdown_1.8   knitr_1.18     
## [13] stringr_1.2.0   digest_0.6.13   evaluate_0.10.1
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>生物信息学学习笔记（七）</title>
      <link>https://taoyan.netlify.app/post/2018-01-07.%E7%94%9F%E7%89%A9%E4%BF%A1%E6%81%AF%E5%AD%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%83/</link>
      <pubDate>Sun, 07 Jan 2018 21:19:05 +0000</pubDate>
      <guid>https://taoyan.netlify.app/post/2018-01-07.%E7%94%9F%E7%89%A9%E4%BF%A1%E6%81%AF%E5%AD%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%83/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/2574kmE80m.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Polycomb group(PcG)蛋白是一组通过染色质修饰调控靶基因的抑制子，从生化和功能上可以分为两个主要的核心蛋白复合体PRC1(Polycomb repressive complex 1)和PRC2(Polycomb repressive complex 2)。PcG蛋白家族是一类在进化上极为保守的转录抑制因子。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Pericentrometric区域是接近端粒的DNA序列，它们含有大量的重复片段即其进行拷贝的常染色质起源位置(euchromatic ancestral loci)非常相似的大量DNA序列，是基因组结构中迅速改变的区域。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;曼哈顿图p值不是很大的位点从图上看要尽量压缩到下面，而p值显著的位点突出在上面才是一个好的曼哈顿图，不然数据质控有问题。QQ图只在尾巴上翘起，显示显著性位点，如果从开始就偏离了，数据质控就有问题了。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;基因组重测序中除了ACGT之外的其他字母含义：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;R =&amp;gt; AG&lt;/li&gt;
&lt;li&gt;Y =&amp;gt; CT&lt;/li&gt;
&lt;li&gt;M =&amp;gt; AC&lt;/li&gt;
&lt;li&gt;K =&amp;gt; GT&lt;/li&gt;
&lt;li&gt;S =&amp;gt; CG&lt;/li&gt;
&lt;li&gt;W =&amp;gt; AT&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;关于GWAS数据过滤的问题（摘自微信公众号：解螺旋的矿工）&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;现在较难定义常规GWAS，现在的GWAS方向已经从基于芯片数据的关联分析往基因组重测序数据关联分析偏转。如果完全基于genotype进行关联分析，数据过滤通常包括：genotype missing rate &amp;lt; 90%，chi-square test of HWE &amp;gt; 1e-06，minor allele frequency &amp;gt; 0.01等，这个过程可以使用plink或者自己造轮子完成过滤。当然过滤的阈值与样本量及最终结果有关，一般需要个性化调试。功效更加大的做法是基于imputed genotype probability进行关联分析，此时需要在GWAS之前先做imputation，imputation过程会产生info score,过滤标准一般是info score &amp;gt; 0.4,chi-square test of HWE &amp;gt; 1e-06，minor allele frequency &amp;gt; 0.01等，当然有时也需要进行个性化调试。GWAS只要inflation控制的好（GC lambda接近1，控制的要素是covariates的设定来解决population stratification），不需要太关心过滤的问题，甚至可以不过滤直接画曼哈顿图看是否有关联信号。大多数情况过滤不是影响能否获得有生物学意义位点的关键因素。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;QQ图可以用来估计我们GWAS所用的模型能够多大程度地显示群体结构和群体相关性。由于大部分的SNP与性状是不相关联的，因此大部分的点应该是落在对角线上，偏离对角线表明伪关联性，主要是由于群体结构以及群体之间的相关性导致的。我们期望得到的是对角线上方的偏离，这往往意味着这些SNP与我们所研究的性状是可能关联的。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;高水平的杂合率意味着低质量，在近交系snp中超过50%的杂合率说哦名数据是有问题的，不是很适合用来接下来的GWAS分析。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
  </channel>
</rss>
