<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>RNA-seq | Tao Yan</title>
    <link>https://taoyan.netlify.app/tags/rna-seq/</link>
      <atom:link href="https://taoyan.netlify.app/tags/rna-seq/index.xml" rel="self" type="application/rss+xml" />
    <description>RNA-seq</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><copyright>© Tao Yan, 2018-2020</copyright><lastBuildDate>Tue, 03 Sep 2019 16:19:05 +0000</lastBuildDate>
    <image>
      <url>https://taoyan.netlify.app/img/pom-card.png</url>
      <title>RNA-seq</title>
      <link>https://taoyan.netlify.app/tags/rna-seq/</link>
    </image>
    
    <item>
      <title>转录组数据分析01-比对</title>
      <link>https://taoyan.netlify.app/post/2019-09-03.%E8%BD%AC%E5%BD%95%E7%BB%84%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%9001/</link>
      <pubDate>Tue, 03 Sep 2019 16:19:05 +0000</pubDate>
      <guid>https://taoyan.netlify.app/post/2019-09-03.%E8%BD%AC%E5%BD%95%E7%BB%84%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%9001/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20190904101824.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;最近有一批转录组数据需要分析，从公司拿到&lt;code&gt;raw data&lt;/code&gt;之后进行后续分析。目前转录组测序十分成熟，测序质量都很高，所以我这里就简单地质控一下，由
&lt;a href=&#34;https://github.com/OpenGene/fastp&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;fastp&lt;/strong&gt;&lt;/a&gt;完成。&lt;/p&gt;
&lt;h2 id=&#34;质控&#34;&gt;质控&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;#安装fastp
# get source (you can also use browser to download from master or releases)
git clone https://github.com/OpenGene/fastp.git

# build
cd fastp
make

# Install
sudo make install

#没有root权限的话可以使用conda安装或者下载二进制文件
# note: the fastp version in bioconda may be not the latest
conda install -c bioconda fastp

# this binary was compiled on CentOS, and tested on CentOS/Ubuntu
wget http://opengene.org/fastp/fastp
chmod a+x ./fastp
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;之后批量进行质控，一条龙服务，十分方便了。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#!/bin/bash
for i in {01..45}
do
~/biosoft/fastp/bin/fastp -i /database/Bna-rna-seq-analyis/data/Cole_M838-01-T${i}_good_1.fq.gz -o /database/Bna-rna-seq-analyis/data/T${i}_good_1.fq.gz -I /database/Bna-rna-seq-analyis/data/Cole_M838-01-T${i}_good_2.fq.gz -O /database/Bna-rna-seq-analyis/data/T${i}_good_2.fq.gz
done
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;比对&#34;&gt;比对&lt;/h2&gt;
&lt;p&gt;比对软件有很多，主流的主要有
&lt;a href=&#34;http://ccb.jhu.edu/software/hisat2/index.shtml&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;HISAT2&lt;/a&gt;以及
&lt;a href=&#34;https://github.com/alexdobin/STAR&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;STAR&lt;/a&gt;。&lt;/p&gt;
&lt;h3 id=&#34;star比对&#34;&gt;STAR比对&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;#Download the latest release from and uncompress it
# Get latest STAR source from releases
wget https://github.com/alexdobin/STAR/archive/2.7.2b.tar.gz
tar -xzf 2.7.2b.tar.gz
cd STAR-2.7.2b

# Alternatively, get STAR source using git
git clone https://github.com/alexdobin/STAR.git

#Compile under Linux
# Compile
cd STAR/source
make STAR
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;STAR&lt;/code&gt;使用格式如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;STAR --option1-name option1-value --option2-name option2-value ...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;STAR&lt;/code&gt;的文档写的非常详细，这也是一个好软件的标志之一，如果一个软件的文档都写的不详细的话，可以考虑换一个软件。&lt;code&gt;STAR&lt;/code&gt;参数非常多，尤其现在还支持三代测序数据。有兴趣的话可以自己去研究
&lt;a href=&#34;https://github.com/alexdobin/STAR/blob/master/doc/STARmanual.pdf&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;文档&lt;/a&gt;。&lt;/p&gt;
&lt;h4 id=&#34;star构建索引&#34;&gt;STAR构建索引&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;#!/bin/bash

set -e
set -u
set -o pipefail


fasta=/database/reference/Bna_NY7/NY7-chr/NY_V2_Chr.fasta
gtf=/database/reference/Bna_NY7/NY7-chr/NY7_V2_Chr.gtf
STAR=/home/taoyan/biosoft/STAR/bin/Linux_x86_64_static/STAR

# Generate index Of Brassica napus

$STAR --runMode genomeGenerate \
--runThreadN 32 \
--genomeFastaFiles $fasta \
--genomeDir /database/reference/Bna_NY7/NY7-chr/NY7.Star.Index \
--sjdbGTFfile $gtf \
--genomeSAindexNbases 13 \
--sjdbOverhang 149
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;构建索引常用命令参数如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&amp;ndash;runMode genomeGenerate：运行模式为构建索引&lt;/li&gt;
&lt;li&gt;&amp;ndash;runThreadN：设置线程数&lt;/li&gt;
&lt;li&gt;&amp;ndash;genomeDir：构建的索引文件存放路径，需要提前创建该文件夹&lt;/li&gt;
&lt;li&gt;&amp;ndash;genomeFastaFiles：参考基因组文件&lt;/li&gt;
&lt;li&gt;&amp;ndash;sjdbGTFfile：注释文件gtf，推荐在这一步添加，虽然可以在后续比对的时候添加&lt;/li&gt;
&lt;li&gt;&amp;ndash;genomeSAindexNbases 对于非常小的参考基因组，此参数需要按比例缩小，其计算方式为min(14, log2(GenomeLength)/2 - 1)，所以一般为14，但是小基因组比如1M的话，此值应为9，这里按照我的参考基因组大小，应该为14，但是我运行的时候提示我最优值为13，暂时不清楚为何提示我这个值。此值一般在10~15之间，越大需要越多的内存，相应的话速度也越快。&lt;/li&gt;
&lt;li&gt;&amp;ndash;sjdbOverhang：读段长度-1，默认为99，我的序列是PE150，所以此值应为149，文档显示99可以达到最理想的效果，所以不知道具体的建库方式的话，此参数设为99就行了。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;批量比对&#34;&gt;批量比对&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;#!/bin/bash

set -e
set -u
set -o pipefail


fasta=/database/reference/Bna_NY7/NY7-chr/NY_V2_Chr.fasta
gtf=/database/reference/Bna_NY7/NY7-chr/NY7_V2_Chr.gtf
STAR=/home/taoyan/biosoft/STAR/bin/Linux_x86_64_static/STAR

seq_data=/database/Bna.rnaseq.NY7.analysis/data/seq.data
result=/database/Bna.rnaseq.NY7.analysis/result/Star/Star_map_bam

# sequence mapping use STAR

for i in {01..45}
do
echo &amp;quot; ******* Process Sample T${i} ******* &amp;quot;
$STAR --runThreadN 64 \        #线程数
--genomeDir /database/reference/Bna_NY7/NY7-chr/NY7.Star.Index/ \  #索引目录
--readFilesCommand zcat \   #执行解压缩，输入数据格式为gz文件
--readFilesIn $seq_data/T${i}_good_1.fq.gz \  #输入文件
$seq_data/T${i}_good_2.fq.gz \
--outSAMtype BAM SortedByCoordinate \  #指定输出bam文件并排序
--outFileNamePrefix $result/Bna_Star_T${i}. \  #输出文件路径以及前缀
--outBAMsortingThreadN 20 \   #排序线程数
--quantMode TranscriptomeSAM GeneCounts #将上面基因组比对的信息转化为转录本比对的信息，quantMode TranscriptomeSAM will output alignments translated into trancript coordinates,为了后续使用RSEM定量准备输入文件
done
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;一些常用参数解释：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&amp;ndash;runThreadN：线程数&lt;/li&gt;
&lt;li&gt;&amp;ndash;runMode alignReads : 默认就是比对模式，所以这里我没填写&lt;/li&gt;
&lt;li&gt;&amp;ndash;genomeDir：索引文件所在文件夹，就是上面建立索引时的文件夹&lt;/li&gt;
&lt;li&gt;&amp;ndash;readFilesCommand zcat：由于现在大部分序列数据都是压缩形式的，所以需要解压缩，我的数据是gz格式的，所以这里是zcat&lt;/li&gt;
&lt;li&gt;&amp;ndash;readFilesIn：序列数据&lt;/li&gt;
&lt;li&gt;&amp;ndash;outSAMtype BAM SortedByCoordinate：输出文件为bam文件，并且进行了排序，这里应该是按照pos排序的。&lt;/li&gt;
&lt;li&gt;&amp;ndash;outBAMsortingThreadN：SAM文件排序生成BAM文件时的线程数，不要设置太大，不然会报错的。&lt;/li&gt;
&lt;li&gt;&amp;ndash;quantMode TranscriptomeSAM GeneCounts：这个参数需要特别注意，如果你后续要使用RSEM进行定量，就需要添加TranscriptomeSAM，不然生成的BAM文件RSEM无法使用的，GeneCounts生成用于后续featureCounts分析的输入文件&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;STAR还有其它很多参数，讲不完的，基本来说一般的转录组分析上面这些参数够用了。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;由于后续定量我们会用到RSEM，所以这里特别注意需要加参数&lt;code&gt;--quantMode TranscriptomeSAM GeneCounts&lt;/code&gt;，这样生成的bam文件可用于后续的RSEM定量以及featureCounts计数。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;这里比对的时候我遇到了我问题:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;&amp;quot;FATAL ERROR: could not create output file ... Solution: check that you have permission to write this file&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;Google搜索之后发现是系统限制了最大文件打开的数目，默认是1024，我改为了10000，后续比对正常运行。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;#先查看你的系统打开文件限制数目
$ ulimit -n
1024
#设置一个更大的数目
$ ulimit -n 10000
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;hisat2比对&#34;&gt;HISAT2比对&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;#下载源文件
wget http://ccb.jhu.edu/software/hisat2/downloads/hisat2-2.0.0-beta-source.zip
unzip hisat2-2.0.0-beta-source.zip
cd hisat2-2.0.0-beta-source
make
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;HISAT2&lt;/code&gt;用法如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;hisat2 [options]* -x &amp;lt;hisat2-idx&amp;gt; {-1 &amp;lt;m1&amp;gt; -2 &amp;lt;m2&amp;gt; | -U &amp;lt;r&amp;gt; | --sra-acc &amp;lt;SRA accession number&amp;gt;} [-S &amp;lt;hit&amp;gt;]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;更详细用法见
&lt;a href=&#34;http://ccb.jhu.edu/software/hisat2/manual.shtml&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;文档&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&#34;hisat2建立索引&#34;&gt;HISAT2建立索引&lt;/h4&gt;
&lt;p&gt;我这里遇到一个问题，建立索引之后比对的时候报错：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(ERR): hisat2-align died with signal 11 (SEGV) (core dumped)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Google发现是建立的索引出问题了，HISAT2建立索引的时候会根据基因组大小来建立小索引还是大索引，一般4G以下的基因组都会默认建立小基因组，32位的，以&lt;code&gt;.ht2&lt;/code&gt;为后缀的，我这里报错了，所以我特意设置参数建立了64位的以&lt;code&gt;.ht21&lt;/code&gt;为后缀的大索引，后续比对就没问题了&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#!/bin/bash

set -e
set -u
set -o pipefail


##构建exons以及splice_sites文件，由于我的注释文件是GFF3文件,所以需要转化成GTF

~/biosoft/gffread/gffread NY7_V2_Chr.gff3 -T -o NY7_V2_Chr.gtf
~/biosoft/hisat2-2.0.0-beta/extract_exons.py NY7_V2_Chr.gtf &amp;gt; NY7_V2_Chr.exons
~/biosoft/hisat2-2.0.0-beta/extract_splice_sites.py NY7_V2_Chr.gtf &amp;gt; NY7_V2_Chr.ss

##构建索引,这里需要提供exons，splite_sites文件，参考基因组文件以及输出文件前缀
##Hisat2-build可以构建任意大小的参考基因组索引，小于4G的参考基因组，构建出来的索引以.ht2为后缀的文件，更大的参考基因组是以.ht21为后缀的文件

~/biosoft/hisat2-2.0.0-beta/hisat2-build -p 64 --large-index --ss NY7_V2_Chr.ss --exon NY7_V2_Chr.exon NY_V2_Chr.fasta NY7.Hisat2.Index/NY7_V2_Chr_Hisat2_index 2 &amp;gt; Hisat_build_index.log
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;批量比对-1&#34;&gt;批量比对&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;#!/bin/bash

set -e
set -u
set -o pipefail

hisat2=/home/taoyan/biosoft/hisat2-2.0.0-beta/hisat2
index=/database/reference/Bna_NY7/NY7-chr/NY7.Hisat2.Index
seq_data=/database/Bna.rnaseq.NY7.analysis/data/seq.data
result=/database/Bna.rnaseq.NY7.analysis/result/Hisat2
samtools=/home/taoyan/biosoft/samtools1.9/bin/samtools

for i in {01..45}
do
$hisat2 -t -p 64 --dta -x $index/NY7_V2_Chr_Hisat2_index -1 $seq_data/T${i}_good_1.fq.gz -2 $seq_data/T${i}_good_2.fq.gz | $samtools sort -@ 8 -O bam -o $result/T${i}.sorted.bam
done
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;具体参数就不详讲了，具体见
&lt;a href=&#34;http://ccb.jhu.edu/software/hisat2/manual.shtml&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;文档&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;后续主要进行定量了，下次讲。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>利用tximport进行RNA-seq分析</title>
      <link>https://taoyan.netlify.app/post/2017-09-08.%E5%88%A9%E7%94%A8tximport%E8%BF%9B%E8%A1%8Crna-seq%E5%88%86%E6%9E%90/</link>
      <pubDate>Fri, 08 Sep 2017 12:34:08 -0500</pubDate>
      <guid>https://taoyan.netlify.app/post/2017-09-08.%E5%88%A9%E7%94%A8tximport%E8%BF%9B%E8%A1%8Crna-seq%E5%88%86%E6%9E%90/</guid>
      <description>&lt;h2 id=&#34;简介&#34;&gt;简介&lt;/h2&gt;
&lt;hr&gt;
&lt;p&gt;RNA-seq后续分析可以利用R包edgeR、DESeq2以及limma-voom等，而tximport包则可以将RNA-seq上游定量分析软件产生的结果导入到R语言中，进而方便后续的分析。具体的情况可以参考这篇文献：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Charlotte Soneson, Michael I. Love, Mark D. Robinson (2015): Differential analyses for RNA-seq: transcript-level estimates improve gene-level inferences. F1000Research &lt;a href=&#34;http://sci-hub.cc/10.12688/f1000research.7563.1&#34;&gt;http://sci-hub.cc/10.12688/f1000research.7563.1&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;tximport具有以下优点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对于样本之间因基因长度不同导致的差异具有纠正功能&lt;/li&gt;
&lt;li&gt;一些上游分析软件(Salmon, Sailfish, kallisto)等的结果可以完美对接到R语言中，这些软件运行速度更快更稳定，且占用更少的内存&lt;/li&gt;
&lt;li&gt;更高的灵敏度，因为它可以避免那些比对到多基因的片段的丢失&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;导入转录组数据&#34;&gt;导入转录组数据&lt;/h2&gt;
&lt;hr&gt;
&lt;p&gt;下面我们将使用包tximportData中的数据进行演示，tximport可以处理多种类型的上游定量结果，只需要在参数type中设定就行。 先安装包&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;source(&amp;quot;https://bioconductor.org/biocLite.R&amp;quot;)
options(BioC_mirror=&amp;quot;http://mirrors.ustc.edu.cn/bioc/&amp;quot;)#设置中科大镜像
biocLite(&amp;quot;tximportData&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;library(tximportData)
dir &amp;lt;- system.file(&amp;quot;extdata&amp;quot;, package = &amp;quot;tximportData&amp;quot;)#set directory
list.files(dir)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  [1] &amp;quot;cufflinks&amp;quot;            &amp;quot;kallisto&amp;quot;             &amp;quot;kallisto_boot&amp;quot;       
##  [4] &amp;quot;rsem&amp;quot;                 &amp;quot;sailfish&amp;quot;             &amp;quot;salmon&amp;quot;              
##  [7] &amp;quot;salmon_gibbs&amp;quot;         &amp;quot;samples.txt&amp;quot;          &amp;quot;samples_extended.txt&amp;quot;
## [10] &amp;quot;tx2gene.csv&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;可以看到dir中存在这些文件，接下来我们其中的samples.txt读进来&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;samples &amp;lt;- read.table(file.path(dir, &amp;quot;samples.txt&amp;quot;), header = TRUE)
samples
##   pop center                assay    sample experiment       run
## 1 TSI  UNIGE NA20503.1.M_111124_5 ERS185497  ERX163094 ERR188297
## 2 TSI  UNIGE NA20504.1.M_111124_7 ERS185242  ERX162972 ERR188088
## 3 TSI  UNIGE NA20505.1.M_111124_6 ERS185048  ERX163009 ERR188329
## 4 TSI  UNIGE NA20507.1.M_111124_7 ERS185412  ERX163158 ERR188288
## 5 TSI  UNIGE NA20508.1.M_111124_2 ERS185362  ERX163159 ERR188021
## 6 TSI  UNIGE NA20514.1.M_111124_4 ERS185217  ERX163062 ERR188356
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;再将salmon与samples以及quant.sf一起创建每个样本的文件地址&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;files &amp;lt;- file.path(dir, &amp;quot;salmon&amp;quot;, samples$run, &amp;quot;quant.sf&amp;quot;)
names(files) &amp;lt;- paste0(&amp;quot;sample&amp;quot;, 1:6)
all(file.exists(files))
## [1] TRUE
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;结果显示TRUE说明运行成功，可以进行下一步，要进行基因表达差异分析，首先要将转录本与基因名关联起来，这就需要我们创建一个两列的名为tx2gene的数据框，最简单的就是通过TxDb创建,再通过AnnotationDbi包里的函数select()进行选取&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;library(TxDb.Hsapiens.UCSC.hg19.knownGene)
txdb &amp;lt;- TxDb.Hsapiens.UCSC.hg19.knownGene
k &amp;lt;- keys(txdb, keytype = &amp;quot;GENEID&amp;quot;)
df &amp;lt;- select(txdb, keys = k, keytype = &amp;quot;GENEID&amp;quot;, columns = &amp;quot;TXNAME&amp;quot;)
tx2gene &amp;lt;- df[, 2:1]#tx ID在前，gene ID在后
#这里我们演示就使用现有的tx2gene
tx2gene &amp;lt;- read.csv(file.path(dir, &amp;quot;tx2gene.csv&amp;quot;))
head(tx2gene)
##         TXNAME   GENEID
## 1    NM_130786     A1BG
## 2    NR_015380 A1BG-AS1
## 3 NM_001198818     A1CF
## 4 NM_001198819     A1CF
## 5 NM_001198820     A1CF
## 6    NM_014576     A1CF
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;最后就是将转录组水平的数据导入就行了&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;library(tximport)
library(readr)
txi &amp;lt;- tximport(files, type = &amp;quot;salmon&amp;quot;, tx2gene = tx2gene)
names(txi)
## [1] &amp;quot;abundance&amp;quot;           &amp;quot;counts&amp;quot;              &amp;quot;length&amp;quot;             
## [4] &amp;quot;countsFromAbundance&amp;quot;
head(txi$counts)
##             sample1   sample2    sample3   sample4   sample5   sample6
## A1BG     109.232000 316.22400 110.638000 116.00000  86.38430  76.91630
## A1BG-AS1  83.969700 138.44900 119.274000 151.08300 123.98500 103.25100
## A1CF       9.030691  10.01847   5.019242  13.01820  25.21914  25.07356
## A2M       24.000000   2.00000  21.000000   6.00000  38.00000   8.00000
## A2M-AS1    1.000000   1.00000   1.000000   1.00000   0.00000   0.00000
## A2ML1      3.047950   1.02987   4.076160   1.04945   3.07761   5.12409
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;差异分析&#34;&gt;差异分析&lt;/h2&gt;
&lt;hr&gt;
&lt;p&gt;下游分析主要使用Bioconductor包进行&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;library(edgeR)
cts &amp;lt;- txi$counts
normMat &amp;lt;- txi$length
normMat &amp;lt;- normMat/exp(rowMeans(log(normMat)))
o &amp;lt;- log(calcNormFactors(cts/normMat))+log(colSums(cts/normMat))
y &amp;lt;- DGEList(cts)
y$offset &amp;lt;- t(t(log(normMat))+o)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;接下来的y就可以用来后续的分析&lt;/p&gt;
&lt;h2 id=&#34;sessioninfo&#34;&gt;SessionInfo&lt;/h2&gt;
&lt;hr&gt;
&lt;pre&gt;&lt;code&gt;sessionInfo()
## R version 3.4.1 (2017-06-30)
## Platform: x86_64-w64-mingw32/x64 (64-bit)
## Running under: Windows 10 x64 (build 15063)
## 
## Matrix products: default
## 
## locale:
## [1] LC_COLLATE=Chinese (Simplified)_China.936 
## [2] LC_CTYPE=Chinese (Simplified)_China.936   
## [3] LC_MONETARY=Chinese (Simplified)_China.936
## [4] LC_NUMERIC=C                              
## [5] LC_TIME=Chinese (Simplified)_China.936    
## 
## attached base packages:
## [1] stats4    parallel  stats     graphics  grDevices utils     datasets 
## [8] methods   base     
## 
## other attached packages:
##  [1] edgeR_3.18.1                           
##  [2] limma_3.32.5                           
##  [3] readr_1.1.1                            
##  [4] tximport_1.4.0                         
##  [5] TxDb.Hsapiens.UCSC.hg19.knownGene_3.2.2
##  [6] GenomicFeatures_1.28.4                 
##  [7] AnnotationDbi_1.38.2                   
##  [8] Biobase_2.36.2                         
##  [9] GenomicRanges_1.28.4                   
## [10] GenomeInfoDb_1.12.2                    
## [11] IRanges_2.10.3                         
## [12] S4Vectors_0.14.3                       
## [13] BiocGenerics_0.22.0                    
## [14] tximportData_1.4.0                     
## 
## loaded via a namespace (and not attached):
##  [1] Rcpp_0.12.12               compiler_3.4.1            
##  [3] XVector_0.16.0             bitops_1.0-6              
##  [5] tools_3.4.1                zlibbioc_1.22.0           
##  [7] biomaRt_2.32.1             digest_0.6.12             
##  [9] bit_1.1-12                 lattice_0.20-35           
## [11] evaluate_0.10.1            RSQLite_2.0               
## [13] memoise_1.1.0              tibble_1.3.4              
## [15] pkgconfig_2.0.1            rlang_0.1.2               
## [17] Matrix_1.2-11              DelayedArray_0.3.12       
## [19] DBI_0.7                    yaml_2.1.14               
## [21] GenomeInfoDbData_0.99.0    rtracklayer_1.36.4        
## [23] stringr_1.2.0              knitr_1.17                
## [25] hms_0.3                    Biostrings_2.44.2         
## [27] locfit_1.5-9.1             grid_3.4.1                
## [29] rprojroot_1.2              bit64_0.9-7               
## [31] R6_2.2.2                   XML_3.98-1.9              
## [33] BiocParallel_1.10.1        rmarkdown_1.6             
## [35] blob_1.1.0                 magrittr_1.5              
## [37] matrixStats_0.52.2         GenomicAlignments_1.12.2  
## [39] backports_1.1.0            Rsamtools_1.28.0          
## [41] htmltools_0.3.6            SummarizedExperiment_1.6.3
## [43] stringi_1.1.5              RCurl_1.95-4.8            
## [45] rjson_0.2.15
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>A brief introduction of salmon</title>
      <link>https://taoyan.netlify.app/post/2017-09-06.a-brief-introduction-of-salmon/</link>
      <pubDate>Sun, 25 Jun 2017 12:34:08 -0500</pubDate>
      <guid>https://taoyan.netlify.app/post/2017-09-06.a-brief-introduction-of-salmon/</guid>
      <description>&lt;h2 id=&#34;简介&#34;&gt;简介&lt;/h2&gt;
&lt;p&gt;Salmon是一款定量分析RNA-seq的软件，号称Fast、accurate、bias-aware and Don&amp;rsquo;t count&amp;hellip;quantify定量分析转录本。本文主要简要的介绍一下Salmon。具体的情况可移步
&lt;a href=&#34;https://combine-lab.github.io/salmon/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Salmon官网&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;安装&#34;&gt;安装&lt;/h2&gt;
&lt;p&gt;可以去
&lt;a href=&#34;https://github.com/COMBINE-lab/salmon&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Github&lt;/a&gt;里下载Salmon进行安装&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ mkdir Salmon &amp;amp;&amp;amp; cd Salmon
$ wget  https://github.com/COMBINE-lab/salmon/releases/download/v0.8.2/Salmon-0.8.2_linux_x86_64.tar.gz
$ tar zxvf Salmon-0.8.2_linux_x86_64.tar.gz
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;至于路径则根据自己电脑进行配置，这里不讲，安装成功的话则可以用&lt;code&gt;salmon -h&lt;/code&gt;查看帮助文件。应该可以看到如下输出：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ salmon -h
Salmon v0.8.1

Usage:  salmon -h|--help or
        salmon -v|--version or
        salmon -c|--cite or
        salmon [--no-version-check] &amp;lt;COMMAND&amp;gt; [-h | options]

Commands:
     cite  Show salmon citation information
     index Create a salmon index
     quant Quantify a sample
     swim  Perform super-secret operation
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;也可以利用conda安装，这样就可以省去很多麻烦。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ conda install salmon
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;获取转录组&#34;&gt;获取转录组&lt;/h2&gt;
&lt;p&gt;Salmon是直接将原始序列map到转录组上而不是全基因组上(这是很重要的一点，千万不要搞混了，这也是作者一直在强调的)，这里我们就以拟南芥为例下载其转录组。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#Creat a directory 
$ mkdir RNA-seq_test cd RNA-seq_test
$ wget ftp://ftp.ensemblgenomes.org/pub/plants/release-28/fasta/arabidopsis_thaliana/cdna/Arabidopsis_thaliana.TAIR10.28.cdna.all.fa.gz -o athal.fa.gz
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;好了，现在转录组已下载好，接下来就是建立索引了&lt;/p&gt;
&lt;h2 id=&#34;建立索引&#34;&gt;建立索引&lt;/h2&gt;
&lt;p&gt;利用Salmon建立索引十分简单，一行命令就搞定&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ salmon index -t athal.fa.gz -i athal_index
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这里解释一下几个参数：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;-t: 表示需要用到的转录组，这里是拟南芥的，我们刚下载好的athal.fa.gz&lt;/li&gt;
&lt;li&gt;-i: 表示我们建立的索引的名称，它是一个文件夹&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;更多的参数设置可以
&lt;a href=&#34;http://salmon.readthedocs.io/en/latest/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;参考说明&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;获取序列数据&#34;&gt;获取序列数据&lt;/h2&gt;
&lt;p&gt;一次试验数据往往很多，我们可以写一个脚本进行下载，这里简单示例一下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#!/bin/bash
mkdir data
cd data
for i in &#39;seq 25 40&#39;;
do
  madir DRR0161${i};
  cd DRR0161${i};
  wget ftp://ftp.sra.ebi.ac.uk/vol1/fastq/DRR016/DRR0161${i}/DRR0161${i}_1.fastq.gz; 
  wget ftp://ftp.sra.ebi.ac.uk/vol1/fastq/DRR016/DRR0161${i}/DRR0161${i}_2.fastq.gz; 
  cd ..; 
done
cd .. 

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;将其保存为obtain_reads.sh,将其运行只需以下命令就行：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ bash obtain_reads.sh
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;定量样本&#34;&gt;定量样本&lt;/h2&gt;
&lt;p&gt;这次也写一个简单脚本进行定量&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#!/bin/bash
for fn in data/DRR0161{25..40};
do
samp=`basename ${fn}`
echo &amp;quot;Processing sample ${samp}&amp;quot;
salmon quant -i athal_index -l A \
         -1 ${fn}/${samp}_1.fastq.gz \
         -2 ${fn}/${samp}_2.fastq.gz \
         -p 8 -o quants/${samp}_quant
done 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这里简单说明一下几个参数：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;-i: 用来告诉salmon哪里寻找索引index&lt;/li&gt;
&lt;li&gt;-l A: 告诉salmon自行决定是何种类型的序列数据&lt;/li&gt;
&lt;li&gt;-1，-2：就是两端测序的两个序列了&lt;/li&gt;
&lt;li&gt;-p 8: 8线程&lt;/li&gt;
&lt;li&gt;-o: 输出文件，这里是所有输出文件都保存至quants，并且文件命名为sample_quant&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;更多参数选择及说明可以参考
&lt;a href=&#34;http://salmon.readthedocs.io/en/latest/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;说明文件&lt;/a&gt;
这里每个样品文件里都含有一个主文件quant.sf。在后续的差异分析中有重要作用，后续再讲。
定量之后接下来就是进行具体分析了，一般来说都在R里面进行，R&amp;amp;Bioconductor有大量的包进行下游的分析，比如
&lt;a href=&#34;https://bioconductor.org/packages/DESeq2&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;DESeq2&lt;/a&gt;、
&lt;a href=&#34;https://bioconductor.org/packages/edgeR&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;edgeR&lt;/a&gt;、
&lt;a href=&#34;https://bioconductor.org/packages/limma&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;limma&lt;/a&gt;以及
&lt;a href=&#34;http://pachterlab.github.io/sleuth/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;sleuth&lt;/a&gt;等，后续文章我会讲解如何通过 
&lt;a href=&#34;http://bioconductor.org/packages/tximport&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;tximport&lt;/code&gt;&lt;/a&gt;将定量化的转录组数据导入到R语言中进行差异分析。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
