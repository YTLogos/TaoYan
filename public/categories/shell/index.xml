<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Shell | Tao Yan</title>
    <link>https://taoyan.netlify.app/categories/shell/</link>
      <atom:link href="https://taoyan.netlify.app/categories/shell/index.xml" rel="self" type="application/rss+xml" />
    <description>Shell</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><copyright>© Tao Yan, 2018-2020</copyright><lastBuildDate>Fri, 09 Feb 2018 21:19:05 +0000</lastBuildDate>
    <image>
      <url>https://taoyan.netlify.app/img/pom-card.png</url>
      <title>Shell</title>
      <link>https://taoyan.netlify.app/categories/shell/</link>
    </image>
    
    <item>
      <title>Shell编程：运算符</title>
      <link>https://taoyan.netlify.app/post/2018-02-09.shell%E7%BC%96%E7%A8%8B%E8%BF%90%E7%AE%97%E7%AC%A6/</link>
      <pubDate>Fri, 09 Feb 2018 21:19:05 +0000</pubDate>
      <guid>https://taoyan.netlify.app/post/2018-02-09.shell%E7%BC%96%E7%A8%8B%E8%BF%90%E7%AE%97%E7%AC%A6/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/yunsuanfu.jpeg?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;简介&#34;&gt;简介&lt;/h2&gt;
&lt;p&gt;Shell支持多种运算符：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;算术运算符&lt;/li&gt;
&lt;li&gt;布尔运算符&lt;/li&gt;
&lt;li&gt;关系运算符&lt;/li&gt;
&lt;li&gt;字符串运算符&lt;/li&gt;
&lt;li&gt;文件测试运算符&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;原生bash不支持简单的数学运算，但是可以通过expr等来实现。例如两个数相加：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;需要注意的是使用的是反引号`，而不是单引号&#39;。另外表达式与运算符之间要有空格。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;#!/bin/bash
#创建测试脚本test.sh

add=`expr 3 + 5`
echo &amp;quot;两数之和为：$add&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;运行脚本之后结果如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ ./test.sh        
两数之和为：4
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;算术运算符&#34;&gt;算术运算符&lt;/h2&gt;
&lt;p&gt;算术运算符主要如下：假设a=10,b=20&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;运算符&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;th&gt;例子&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;+&lt;/td&gt;
&lt;td&gt;加法&lt;/td&gt;
&lt;td&gt;`expr $a + $b`结果为30&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;减法&lt;/td&gt;
&lt;td&gt;`expr $a + $b`结果为-10&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;*&lt;/td&gt;
&lt;td&gt;乘法&lt;/td&gt;
&lt;td&gt;`expr $a*$b`结果为200&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/&lt;/td&gt;
&lt;td&gt;除法&lt;/td&gt;
&lt;td&gt;`expr $b/$a`结果为2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;%&lt;/td&gt;
&lt;td&gt;取余&lt;/td&gt;
&lt;td&gt;`expr $b%$a`结果为0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;=&lt;/td&gt;
&lt;td&gt;赋值&lt;/td&gt;
&lt;td&gt;a=$b将变量b的值赋值给a&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;==&lt;/td&gt;
&lt;td&gt;相等，用于比较两个数字是否相等，是则返回TRUE，否则返回FALSE&lt;/td&gt;
&lt;td&gt;[ $a==$b ]结果返回FALSE&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;!=&lt;/td&gt;
&lt;td&gt;不相等&lt;/td&gt;
&lt;td&gt;[ $a!=$b ]结果返回TRUE&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;blockquote&gt;
&lt;p&gt;注意的是表达式要放在括号之间，并且要有空格。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;举个例子说明&#34;&gt;举个例子说明&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;#!/bin/bash
#创建测试脚本test.sh
m=12
n=5
#加法
val=`expr $m + $n`
echo &amp;quot;m+n= $val&amp;quot;
#减法
val=`expr $m - $n`
echo &amp;quot;m-n= $val&amp;quot;
#乘法
val=`expr $m \* $n`
echo &amp;quot;m*n= $val&amp;quot;
#乘法
val=`expr $m / $n`
echo &amp;quot;m/n= $val&amp;quot;
#乘法
val=`expr $m % $n`
echo &amp;quot;m%n= $val&amp;quot;

#相等
if [ $m == $n ]
then
        echo &amp;quot;m=n&amp;quot;
fi
#不相等
if [ $m != $n ]
then
        echo &amp;quot;m!=n&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;运行脚本结果如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ ./test.sh 
m+n= 17
m-n= 7
m*n= 60
m/n= 2
m%n= 2
m!=n
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;关系运算符&#34;&gt;关系运算符&lt;/h2&gt;
&lt;p&gt;关系运算符只支持数字，假设a=10,b=20:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;运算符&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;th&gt;例子&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;-eq&lt;/td&gt;
&lt;td&gt;是否相等&lt;/td&gt;
&lt;td&gt;[ $a -eq $b ]结果返回FALSE&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-ne&lt;/td&gt;
&lt;td&gt;是否不相等&lt;/td&gt;
&lt;td&gt;[ $a -ne $b ]结果返回TRUE&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-gt&lt;/td&gt;
&lt;td&gt;左边是否大于右边&lt;/td&gt;
&lt;td&gt;[ $a -gt $b ]结果返回FALSE&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-lt&lt;/td&gt;
&lt;td&gt;左边是否小于是否右边&lt;/td&gt;
&lt;td&gt;[ $a -lt $b ]结果返回TRUE&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-ge&lt;/td&gt;
&lt;td&gt;左边是否大于等于右边&lt;/td&gt;
&lt;td&gt;[ $a -ge $b ]结果返回FALSE&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-eq&lt;/td&gt;
&lt;td&gt;左边是否小于等于右边&lt;/td&gt;
&lt;td&gt;[ $a -le $b ]结果返回TRUE&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;举个例子说明-1&#34;&gt;举个例子说明&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;#!/bin/bash
# 创建测试脚本test.sh

a=10
b=20

if [ $a -eq $b ]
then
   echo &amp;quot;$a -eq $b : a 等于 b&amp;quot;
else
   echo &amp;quot;$a -eq $b: a 不等于 b&amp;quot;
fi
if [ $a -ne $b ]
then
   echo &amp;quot;$a -ne $b: a 不等于 b&amp;quot;
else
   echo &amp;quot;$a -ne $b : a 等于 b&amp;quot;
fi
if [ $a -gt $b ]
then
   echo &amp;quot;$a -gt $b: a 大于 b&amp;quot;
else
   echo &amp;quot;$a -gt $b: a 不大于 b&amp;quot;
fi
if [ $a -lt $b ]
then
   echo &amp;quot;$a -lt $b: a 小于 b&amp;quot;
else
   echo &amp;quot;$a -lt $b: a 不小于 b&amp;quot;
fi
if [ $a -ge $b ]
then
   echo &amp;quot;$a -ge $b: a 大于或等于 b&amp;quot;
else
   echo &amp;quot;$a -ge $b: a 小于 b&amp;quot;
fi
if [ $a -le $b ]
then
   echo &amp;quot;$a -le $b: a 小于或等于 b&amp;quot;
else
   echo &amp;quot;$a -le $b: a 大于 b&amp;quot;
fi
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;运行脚本结果如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ ./test.sh 
10 -eq 20: a 不等于 b
10 -ne 20: a 不等于 b
10 -gt 20: a 不大于 b
10 -lt 20: a 小于 b
10 -ge 20: a 小于 b
10 -le 20: a 小于或等于 b
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;布尔运算符&#34;&gt;布尔运算符&lt;/h2&gt;
&lt;p&gt;假设a=10,b=20&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;运算符&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;th&gt;例子&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;！&lt;/td&gt;
&lt;td&gt;非运算&lt;/td&gt;
&lt;td&gt;[ !false ]返回TRUE&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-o&lt;/td&gt;
&lt;td&gt;或运算&lt;/td&gt;
&lt;td&gt;[ $a -lt 20 -o $b -gt 100 ] 返回true。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-a&lt;/td&gt;
&lt;td&gt;与运算&lt;/td&gt;
&lt;td&gt;[ $a -lt 20 -a $b -gt 100 ] 返回false&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;举例说明&#34;&gt;举例说明&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;#!/bin/bash
# 创建测试脚本test.sh

a=10
b=20

if [ $a != $b ]
then
   echo &amp;quot;$a != $b : a 不等于 b&amp;quot;
else
   echo &amp;quot;$a != $b: a 等于 b&amp;quot;
fi
if [ $a -lt 100 -a $b -gt 15 ]
then
   echo &amp;quot;$a 小于 100 且 $b 大于 15 : 返回 true&amp;quot;
else
   echo &amp;quot;$a 小于 100 且 $b 大于 15 : 返回 false&amp;quot;
fi
if [ $a -lt 100 -o $b -gt 100 ]
then
   echo &amp;quot;$a 小于 100 或 $b 大于 100 : 返回 true&amp;quot;
else
   echo &amp;quot;$a 小于 100 或 $b 大于 100 : 返回 false&amp;quot;
fi
if [ $a -lt 5 -o $b -gt 100 ]
then
   echo &amp;quot;$a 小于 5 或 $b 大于 100 : 返回 true&amp;quot;
else
   echo &amp;quot;$a 小于 5 或 $b 大于 100 : 返回 false&amp;quot;
fi
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;运行脚本结果如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ ./test.sh 
10 != 20 : a 不等于 b
10 小于 100 且 20 大于 15 : 返回 true
10 小于 100 或 20 大于 100 : 返回 true
10 小于 5 或 20 大于 100 : 返回 false
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;逻辑运算符&#34;&gt;逻辑运算符&lt;/h2&gt;
&lt;p&gt;假设a=10,b=20&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;运算符&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;th&gt;例子&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&amp;amp;&amp;amp;&lt;/td&gt;
&lt;td&gt;逻辑的AND&lt;/td&gt;
&lt;td&gt;[[ $a -lt 100 &amp;amp;&amp;amp; $b -gt 100 ]] 返回 false&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;||&lt;/td&gt;
&lt;td&gt;逻辑的OR&lt;/td&gt;
&lt;td&gt;[[ $a -lt 100 || $b -gt 100 ]] 返回 true&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;举例说明-1&#34;&gt;举例说明&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;#!/bin/bash
# 创建测试脚本test.sh

a=10
b=20

if [[ $a -lt 100 &amp;amp;&amp;amp; $b -gt 100 ]]
then
   echo &amp;quot;返回 true&amp;quot;
else
   echo &amp;quot;返回 false&amp;quot;
fi

if [[ $a -lt 100 || $b -gt 100 ]]
then
   echo &amp;quot;返回 true&amp;quot;
else
   echo &amp;quot;返回 false&amp;quot;
fi
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;运行脚本结果如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ ./test.sh 
返回 false
返回 true
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;字符串运算符&#34;&gt;字符串运算符&lt;/h2&gt;
&lt;p&gt;下表列出了常用的字符串运算符，假定变量 a 为 &amp;ldquo;abc&amp;rdquo;，变量 b 为 &amp;ldquo;efg&amp;rdquo;：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;运算符&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;th&gt;例子&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;=&lt;/td&gt;
&lt;td&gt;相等&lt;/td&gt;
&lt;td&gt;[ $a = $b ] 返回 false&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;!=&lt;/td&gt;
&lt;td&gt;不相等&lt;/td&gt;
&lt;td&gt;[ $a != $b ] 返回 true&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-z&lt;/td&gt;
&lt;td&gt;字符串长度是否为0&lt;/td&gt;
&lt;td&gt;[ -z $a ] 返回 false&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-n&lt;/td&gt;
&lt;td&gt;字符串长度是否不为0&lt;/td&gt;
&lt;td&gt;[ -n $a ] 返回 true&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;str&lt;/td&gt;
&lt;td&gt;字符串是否不为空&lt;/td&gt;
&lt;td&gt;[ $a ] 返回 true&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;举例说明-2&#34;&gt;举例说明&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;#!/bin/bash
# 创建测试脚本test.sh

a=&amp;quot;abc&amp;quot;
b=&amp;quot;efg&amp;quot;

if [ $a = $b ]
then
   echo &amp;quot;$a = $b : a 等于 b&amp;quot;
else
   echo &amp;quot;$a = $b: a 不等于 b&amp;quot;
fi
if [ $a != $b ]
then
   echo &amp;quot;$a != $b : a 不等于 b&amp;quot;
else
   echo &amp;quot;$a != $b: a 等于 b&amp;quot;
fi
if [ -z $a ]
then
   echo &amp;quot;-z $a : 字符串长度为 0&amp;quot;
else
   echo &amp;quot;-z $a : 字符串长度不为 0&amp;quot;
fi
if [ -n $a ]
then
   echo &amp;quot;-n $a : 字符串长度不为 0&amp;quot;
else
   echo &amp;quot;-n $a : 字符串长度为 0&amp;quot;
fi
if [ $a ]
then
   echo &amp;quot;$a : 字符串不为空&amp;quot;
else
   echo &amp;quot;$a : 字符串为空&amp;quot;
fi
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;运行脚本结果如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ ./test.sh 
abc = efg: a 不等于 b
abc != efg : a 不等于 b
-z abc : 字符串长度不为 0
-n abc : 字符串长度不为 0
abc : 字符串不为空
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;文件运算符&#34;&gt;文件运算符&lt;/h2&gt;
&lt;p&gt;文件运算符主要用于检测文件属性。这里就不讲解了。&lt;/p&gt;
&lt;p&gt;本文主要参考
&lt;a href=&#34;http://www.runoob.com/linux/linux-shell-basic-operators.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;菜鸟教程&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Shell编程：数组</title>
      <link>https://taoyan.netlify.app/post/2018-02-04.shell%E7%BC%96%E7%A8%8B%E6%95%B0%E7%BB%84/</link>
      <pubDate>Sun, 04 Feb 2018 21:19:05 +0000</pubDate>
      <guid>https://taoyan.netlify.app/post/2018-02-04.shell%E7%BC%96%E7%A8%8B%E6%95%B0%E7%BB%84/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/%E6%95%B0%E7%BB%84.png?raw=true&#34; alt=&#34;数组&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;数组&#34;&gt;数组&lt;/h2&gt;
&lt;p&gt;数组中可以存放多个值。Bash只支持一维数组，初始化时无需定义数组大小，数组元素下标从0开始。Shell数组用括号表示，元素之间由空号隔开：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;array_name=(value1 value2 ... valuen)
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;实例&#34;&gt;实例&lt;/h2&gt;
&lt;h3 id=&#34;创建数据&#34;&gt;创建数据&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;#!/bin/bash
my_array=(A B &amp;quot;C&amp;quot; D)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;也可以通过下标赋值来定义数组&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;array_name[0]=value0
array_name[1]=value1
array_name[2]=value2
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;读取数组&#34;&gt;读取数组&lt;/h3&gt;
&lt;p&gt;读取数组的一般格式为：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;${array_name[index]}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;现在创建一个脚本&lt;code&gt;test.sh&lt;/code&gt;来演示一下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#！/bin/bash
#创建脚本test.sh
my_array=(A B &amp;quot;C&amp;quot; D)
echo &amp;quot;第一个元素为：${my_array[0]}&amp;quot;
echo &amp;quot;第二个元素为：${my_array[1]}&amp;quot;
echo &amp;quot;第三个元素为：${my_array[2]}&amp;quot;
echo &amp;quot;第四个元素为：${my_array[3]}&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;执行脚本结果如下&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ chmod +x test.sh 
$ ./test.sh 
第一个元素为：A
第二个元素为：B
第三个元素为：C
第四个元素为：D
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;获取数组中所有元素&#34;&gt;获取数组中所有元素&lt;/h3&gt;
&lt;p&gt;使用@或者*可以获取数组中的所有元素&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#!/bin/bash
# 创建脚本test.sh

my_array[0]=A
my_array[1]=B
my_array[2]=C
my_array[3]=D

echo &amp;quot;数组的元素为: ${my_array[*]}&amp;quot;
echo &amp;quot;数组的元素为: ${my_array[@]}&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;执行脚本结果如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ ./test.sh 
数组的元素为: A B C D
数组的元素为: A B C D
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;获取数组长度&#34;&gt;获取数组长度&lt;/h3&gt;
&lt;p&gt;获取数组长度的方法与获取字符串长度的方法相同&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#!/bin/bash
# 创建脚本test.sh

my_array[0]=A
my_array[1]=B
my_array[2]=C
my_array[3]=D

echo &amp;quot;数组元素个数为: ${#my_array[*]}&amp;quot;
echo &amp;quot;数组元素个数为: ${#my_array[@]}&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;执行脚本结果如下&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ ./test.sh 
数组元素个数为: 4
数组元素个数为: 4
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;数组的值也可以写入变量&#34;&gt;数组的值也可以写入变量&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;#!/bin/bash
# 创建脚本test.sh

A=1
my_array=($A B C D)
echo &amp;quot;第一个元素为：${my_array[0]}&amp;quot;
echo &amp;quot;第二个元素为：${my_array[1]}&amp;quot;
echo &amp;quot;第三个元素为：${my_array[2]}&amp;quot;
echo &amp;quot;第四个元素为：${my_array[3]}&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;执行脚本结果如下&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ ./test.sh 
第一个元素为：1
第二个元素为：B
第三个元素为：C
第四个元素为：D
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;数组下标也可以为变量&#34;&gt;数组下标也可以为变量&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;#!/bin/bash
# 创建脚本test.sh

my_array=(A B C D)

i=2
echo ${my_array[i]}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;执行脚本结果如下&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ ./test.sh 
C
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;数组遍历&#34;&gt;数组遍历&lt;/h3&gt;
&lt;p&gt;这里讲解几种方法用于数据遍历&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#!/bin/bash
# 创建演示脚本test.sh
my_array=(A B C D E F G)
echo &amp;quot;---------for循环遍历数组-----------&amp;quot;
for i in ${my_array[@]}
do
        echo $i
done

echo &amp;quot;--------while循环遍历数组，使用let i++自增-------------&amp;quot;
i=0
#注意[与$之间要有空格，否则报错,下同
while [ $i -lt ${#my_array[@]} ]
do
        echo ${my_array[$i]}
        let i++
done

echo &amp;quot;-------while循环遍历数组，使用let &amp;quot;n++ &amp;quot;自增：双引号可有可无，推荐加上双引号-----------&amp;quot;
n=0
while [ $n -lt ${#my_array[@]} ]
do
        echo ${my_array[$n]}
        let &amp;quot;n++&amp;quot;
done

echo &amp;quot;-----------while循环遍历数组，使用let m+=1自增--------------&amp;quot;

m=0
while [ $m -lt ${#my_array[@]} ]
do
        echo ${my_array[$m]}
        let m+=1
done

echo &amp;quot;------------------while循环遍历数组，使用a=$[$a+1]自增------------------&amp;quot;
a=0
while [ $a -lt ${#my_array[@]} ]
do
        echo ${my_array[$a]}
        a=$[$a+1]
done
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;执行脚本结果如下&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ ./test.sh 
---------for循环遍历数组-----------
A
B
C
D
E
F
G
--------while循环遍历数组，使用let i++自增-------------
A
B
C
D
E
F
G
-------while循环遍历数组，使用let n++ 自增：双引号可有可无，推荐加上双引号-----------
A
B
C
D
E
F
G
-----------while循环遍历数组，使用let m+=1自增--------------
A
B
C
D
E
F
G
------------------while循环遍历数组，使用a=$[$a+1]自增------------------
A
B
C
D
E
F
G
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;可以看出各种遍历方法大同小异，区别就在于自增方式的不同&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Shell编程：传参</title>
      <link>https://taoyan.netlify.app/post/2018-02-03.shell%E7%BC%96%E7%A8%8B%E4%BC%A0%E5%8F%82/</link>
      <pubDate>Sat, 03 Feb 2018 21:19:05 +0000</pubDate>
      <guid>https://taoyan.netlify.app/post/2018-02-03.shell%E7%BC%96%E7%A8%8B%E4%BC%A0%E5%8F%82/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/gfihd4EIE0.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;shell传递参数&#34;&gt;shell传递参数&lt;/h2&gt;
&lt;p&gt;执行shell脚本时，向脚本传递参数，脚本内获取参数的格式为：$n。n代表数字，1为执行脚本的第一个参数，2为第二个，以此类推。&lt;/p&gt;
&lt;h2 id=&#34;实例&#34;&gt;实例&lt;/h2&gt;
&lt;p&gt;下面实例我们向脚本传递三个参数并分别输出，其中$0为执行的文件名：
新建一个脚本canshu.sh&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#!/bin/bash
echo &amp;quot;Shell 传递参数实例！&amp;quot;
echo &amp;quot;执行的文件名：$0&amp;quot;
echo &amp;quot;第一个参数为：$1&amp;quot;
echo &amp;quot;第二个参数为：$2&amp;quot;
echo &amp;quot;第三个参数为：$3&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;运行：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ ./canshu.sh 1 2 3
Shell 传递参数实例！
执行的文件名：./canshu.sh
第一个参数为：1
第二个参数为：2
第三个参数为：3
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;特殊字符处理参数&lt;/p&gt;
&lt;/blockquote&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;参数处理&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;$#&lt;/td&gt;
&lt;td&gt;传递到脚本的参数个数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;$*&lt;/td&gt;
&lt;td&gt;以一个单字符串显示所有向脚本传递的参数,以&amp;quot;$1 $2 &amp;hellip; $n&amp;quot;输出所有参数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;$$&lt;/td&gt;
&lt;td&gt;脚本运行的当前进程ID号&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;$!&lt;/td&gt;
&lt;td&gt;后台运行的最后一个进程ID号&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;$@&lt;/td&gt;
&lt;td&gt;类似于$*,但是以&amp;quot;$1&amp;quot; &amp;ldquo;$2&amp;rdquo; &amp;hellip; &amp;ldquo;$n&amp;quot;输出参数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;$-&lt;/td&gt;
&lt;td&gt;显示shell使用的当前选项&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;$?&lt;/td&gt;
&lt;td&gt;显示最后命令的退出状态。0表示没有错误，其他任何输出表明有错误&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;修改上述脚本canshu.sh&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#!/bin/bash
echo &amp;quot;Shell 传递参数实例！&amp;quot;
echo &amp;quot;第一个参数为：$1&amp;quot;
echo &amp;quot;参数个数为：$#&amp;quot;
echo &amp;quot;传递的参数作为一个字符串显示：$*&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;运行：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ ./canshu.sh 1 2 3
Shell 传递参数实例！
第一个参数为：1
参数个数为：3
传递的参数作为一个字符串显示：1 2 3
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;需要注意的是$*与$@的区别&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;相同点：都是引用所有参数&lt;/li&gt;
&lt;li&gt;不同点：只有在双引号中体现出来。假设在脚本运行时写了三个参数1、2、3，则&amp;rdquo;*&amp;ldquo;等价于&amp;quot;1 2 3&amp;rdquo;（传递了一个参数），而&amp;quot;@&amp;ldquo;等价于&amp;quot;1&amp;rdquo;,&amp;ldquo;2&amp;rdquo;,&amp;ldquo;3&amp;rdquo;(传递了三个参数)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;下面通过一个脚本来说明,新建脚本compare.sh&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#!/bin/bash
echo &amp;quot;-- \$* 演示 ---&amp;quot;
for i in &amp;quot;$*&amp;quot;;do
echo $i
done

echo &amp;quot;-- \$@ 演示 ---&amp;quot;
for i in &amp;quot;$@&amp;quot;;do
echo $i
done
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;运行脚本&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ ./compare.sh 1 2 3
-- $* 演示 ---
1 2 3
-- $@ 演示 ---
1
2
3
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;区别一目了然。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Shell编程：变量</title>
      <link>https://taoyan.netlify.app/post/2018-02-02.shell%E7%BC%96%E7%A8%8B%E5%8F%98%E9%87%8F/</link>
      <pubDate>Fri, 02 Feb 2018 21:19:05 +0000</pubDate>
      <guid>https://taoyan.netlify.app/post/2018-02-02.shell%E7%BC%96%E7%A8%8B%E5%8F%98%E9%87%8F/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/7bEcJiH4l2.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;shell变量&#34;&gt;Shell变量&lt;/h2&gt;
&lt;p&gt;定义变量时，变量名不加美元符号&lt;code&gt;$&lt;/code&gt;，如：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ my_name=&amp;quot;logos&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;需要注意的是，变量名与等号之间不能有空格。同时变量命名遵循以下规则：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;只能使用英文字母，数字与下划线，首个字符不能以数字开头&lt;/li&gt;
&lt;li&gt;中间不能有空格，可以使用下划线&lt;/li&gt;
&lt;li&gt;不能使用标点符号&lt;/li&gt;
&lt;li&gt;不能使用bash里的关键字&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;使用变量&#34;&gt;使用变量&lt;/h2&gt;
&lt;p&gt;使用已经定义过的变量只需在变量名前加美元符号&lt;code&gt;$&lt;/code&gt;即可&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ echo $my-name
$ echo $my_name
logos
$ echo ${my_name}
logos
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;变量名外面的花括号是可选的，加花括号是为了帮助解释器识别变量边界，因此推荐使用花括号。另已经定义过的变量可以重新被定义。&lt;/p&gt;
&lt;h2 id=&#34;只读变量&#34;&gt;只读变量&lt;/h2&gt;
&lt;p&gt;使用&lt;code&gt;readonly&lt;/code&gt;命令可以将变量定义为只读变量，只读变量的值不能被改变&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ my_name=&amp;quot;logos&amp;quot;
$ readonly my_name
$ my_name=&amp;quot;other&amp;quot;
zsh: read-only variable: my_name
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;删除变量&#34;&gt;删除变量&lt;/h2&gt;
&lt;p&gt;使用&lt;code&gt;unset&lt;/code&gt;命令可以删除变量，但是无法删除只读变量&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ unset my_name
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;变量类型&#34;&gt;变量类型&lt;/h2&gt;
&lt;p&gt;运行shell时，会同时存在三种变量&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;局部变量：局部变量在脚本或命令中定义，仅在当前shell实例中有效，其他shell启动的程序不能访问局部变量&lt;/li&gt;
&lt;li&gt;环境变量：所有程序包括shell启动的程序都能访问环境变量&lt;/li&gt;
&lt;li&gt;shell变量：由shell设置的特殊变量。shell变量中一部分是局部变量，一部分是环境变量。这些变量保证shell的正常运行&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;shell字符串&#34;&gt;shell字符串&lt;/h2&gt;
&lt;p&gt;字符串是最常用的数据类型，可以用单引号、双引号，也可以不用引号。&lt;/p&gt;
&lt;h3 id=&#34;单引号&#34;&gt;单引号&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;$ str=&#39;This is a string&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;单引号字符串的限制：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;单引号里的任意字符都会原样输出，单引号字符串中的变量是无效的&lt;/li&gt;
&lt;li&gt;单引号字符串中不能出现单引号,使用转义符也没用&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;双引号&#34;&gt;双引号&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;$ my_name=&#39;logos&#39;
$ str=&amp;quot;Hello, I know you are \&amp;quot;${my_name}\&amp;quot;! \n&amp;quot;
$ echo ${str}
Hello, I know you are &amp;quot;logos&amp;quot;!
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;双引号的优点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;双引号里面可以有变量&lt;/li&gt;
&lt;li&gt;双引号里可以出现转义符&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;拼接字符串&#34;&gt;拼接字符串&lt;/h2&gt;
&lt;p&gt;新建一个脚本string.sh&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#!/bin/bash
my_name=&amp;quot;logos&amp;quot;
greeting=&amp;quot;hello, &amp;quot;$my_name&amp;quot; !&amp;quot;
greeting_1=&amp;quot;hello, ${my_name} !&amp;quot;
echo $greeting $greeting_1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;运行脚本&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ bash string.sh
hello, logos ! hello, logos !
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;获取字符串长度&#34;&gt;获取字符串长度&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;$string=&amp;quot;abcde&amp;quot;
$echo ${#string}
5
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;计算字符串长度也可以用&lt;strong&gt;length&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;$ expr length &amp;quot;$url&amp;quot;
26
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;字符串截取&#34;&gt;字符串截取&lt;/h2&gt;
&lt;p&gt;字符串截取主要有4个截取符：&lt;code&gt;#&lt;/code&gt;、&lt;code&gt;##&lt;/code&gt;、&lt;code&gt;%&lt;/code&gt;、&lt;code&gt;%%&lt;/code&gt;：删除包含了指定的字符&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;#、##表示从左边开始截取，#表示从左边删除到指定的第一个字符；##表示从左边删除到最后一个指定的字符&lt;/li&gt;
&lt;li&gt;%、%%表示从右边开始删除，%表示从右边删除到指定的第一个字符；%%表示从右边删除到最后一个指定的字符&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;linux的字符串截取有八种方法&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;假设我们有变量url=https://ytlogos.github.io/&lt;/p&gt;
&lt;h3 id=&#34;截取删除左边字符保留右边字符&#34;&gt;&lt;code&gt;#&lt;/code&gt;截取，删除左边字符，保留右边字符&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;$ echo ${url#*//}
ytlogos.github.io/
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;其中url是变量名，#是字符截取运算符，*//表示从左边开始删除第一个&lt;code&gt;//&lt;/code&gt;及其左边所有字符，即删除&lt;code&gt;https://&lt;/code&gt;。&lt;/p&gt;
&lt;h3 id=&#34;截取删除左边字符保留右边字符-1&#34;&gt;&lt;code&gt;##&lt;/code&gt;截取，删除左边字符，保留右边字符&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;$ echo ${url##*/}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;##*/表示从左边开始删除指定的最后一个字符&lt;code&gt;/&lt;/code&gt;及其左边所有字符，所以上述结果就是空的。&lt;/p&gt;
&lt;h3 id=&#34;截取删除右边字符保留左边字符&#34;&gt;&lt;code&gt;%&lt;/code&gt;截取，删除右边字符，保留左边字符&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;$ echo ${url%/*}
https://ytlogos.github.io
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;%/*表示从右边开始删除第一个&lt;code&gt;/&lt;/code&gt;及其右边字符&lt;/p&gt;
&lt;h3 id=&#34;截取删除右边字符保留左边字符-1&#34;&gt;&lt;code&gt;%%&lt;/code&gt;截取，删除右边字符，保留左边字符&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;$ echo ${url%%/*}
https:
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;%%&lt;/code&gt;表示从右边开始删除最后一个&lt;code&gt;/&lt;/code&gt;及其右边的字符&lt;/p&gt;
&lt;h3 id=&#34;从左边第几个字符开始及字符个数&#34;&gt;从左边第几个字符开始及字符个数&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;$ echo ${url:0:5}
https
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;上述命令表示从左边第一个字符开始截取5个字符&lt;/p&gt;
&lt;h3 id=&#34;从左边开始第几个字符开始一直到结束&#34;&gt;从左边开始第几个字符开始一直到结束&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;$ echo ${url:5}
://ytlogos.github.io/
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;从右边第几个字符开始及字符个数&#34;&gt;从右边第几个字符开始及字符个数&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;$ echo ${url:0-4:3}
.io
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;上述命令表示从右边第四个字符开始向右截取3个字符&lt;/p&gt;
&lt;h3 id=&#34;从右边第几个字符开始一直到结束&#34;&gt;从右边第几个字符开始一直到结束&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;$ echo ${url:0-7}
hub.io/
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;左边第一个字符用0表示，右边第一个字符用0-1表示&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;查找子字符串&#34;&gt;查找子字符串&lt;/h2&gt;
&lt;p&gt;查找字符&lt;code&gt;g&lt;/code&gt;的位置&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ echo `expr index &amp;quot;$url&amp;quot; g`
13
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;如果字符串中不含那个字符的话，结果显示为0，另外如果查找多个字符的话只显示排在前面的字符&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;还有一点需要注意的是上面的是反引号`而不是单引号&#39;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;$ echo `expr index &amp;quot;$url&amp;quot; gt`
2
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;shell数组&#34;&gt;shell数组&lt;/h2&gt;
&lt;p&gt;bash支持一维数组（不支持多维数组），并且没有限定数组大小，数组元素下标从0开始，可以是整数或算术表达式。&lt;/p&gt;
&lt;h3 id=&#34;定义数组&#34;&gt;定义数组&lt;/h3&gt;
&lt;p&gt;shell中数组的定义用括号表示，数组元素用&lt;code&gt;空格&lt;/code&gt;分隔开。定义数组形式如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;数组名=(值1 值2 ... 值n)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;具体如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;array_name=(v0 v1 v2 v3 v4 v5)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;或&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;array_name=(
    v0
    v1
    v2
    v3
    v4
    v5
)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;还可以通过赋值单独定义数组各个分量&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;array_name[0]=v0
array_name[1]=v1
.
.
.
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;可以不使用连续的下标，而且下标范围没有限制&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;数组读取&#34;&gt;数组读取&lt;/h2&gt;
&lt;p&gt;数组读取的一帮格式如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;${数组名[下标]}
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;$ echo ${array_name[2]}
v1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;使用@符号可以获取数组中所有元素&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ echo ${array_name[@]}
v0 v1 v2 v3 v4 v5
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;获取数组长度&#34;&gt;获取数组长度&lt;/h3&gt;
&lt;p&gt;获取数组长度的方法与获取字符串长度的方法相同：首先获取数组元素个数，再获取长度&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ echo ${#array_name[@]}
6
# 或
$ echo ${#array_name[*]}
6
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;shell注释&#34;&gt;shell注释&lt;/h2&gt;
&lt;p&gt;注释行都是以&lt;code&gt;#&lt;/code&gt;开头，会被解释器忽略。不支持多行注释。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Shell编程：简介</title>
      <link>https://taoyan.netlify.app/post/2018-02-01.shell%E7%BC%96%E7%A8%8B%E7%AE%80%E4%BB%8B/</link>
      <pubDate>Thu, 01 Feb 2018 21:19:05 +0000</pubDate>
      <guid>https://taoyan.netlify.app/post/2018-02-01.shell%E7%BC%96%E7%A8%8B%E7%AE%80%E4%BB%8B/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/GhihcB409F.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;简介&#34;&gt;简介&lt;/h2&gt;
&lt;p&gt;Shell是一个用C语言编写的程序，提供用户使用linux的桥梁。它既是一种命令语言，又是一种程序设计语言。Shell脚本(Shell script)shiyizhongweiShel编写的脚本程序。通常我们说的Shell就是指的Shell脚本，但是应该记住的是Shell与Shell脚本是两个不同的概念。linux的Shell种类众多，但是我们常用的是bash。&lt;/p&gt;
&lt;h2 id=&#34;shell脚本&#34;&gt;Shell脚本&lt;/h2&gt;
&lt;p&gt;由于Shell种类众多，所以我们编写Shell脚本的时候解释该脚本的Shell程序。所以第一行我们通常写成这样：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#!/bin/bash
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;**#!**是一个约定的标记，用来告诉系统这个脚本用什么解释器来执行，也就是使用哪一种Shell来执行，这里我们指定由bash来执行。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;!#/bin/bash
echo &amp;quot;Hello World !&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;echo&lt;/code&gt;命令用于向窗口输出文本。&lt;/p&gt;
&lt;h2 id=&#34;运行脚本&#34;&gt;运行脚本&lt;/h2&gt;
&lt;p&gt;运行脚本有两种方法&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;作为可执行程序&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;将上面的代码保存为hello.sh，然后进入其所在的目录&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#使脚本具有执行权限
chmod +x ./hello.sh
#执行脚本
./hello.sh
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;需要注意的是，一定要写成./hello.sh，而不是./hello.sh，运行其他二进制的程序也一样。如果直接写成hello.sh的话，linux系统会去PATH里寻找有没有hello.sh这个文本，但是只有/bin,/sbin,/usr/bin等在PATH里，当前目录通常不在PATH里，所以写成hello.sh是找不到命令的，要用./hello.sh告诉系统就在当前目录找。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;作为解释器参数
这种运行方式是直接运行解释器，参数就是shell脚本文件名。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;/bin/sh hello.sh
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;此时就无需声明解释器了，因为已经在命令中指定了&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
