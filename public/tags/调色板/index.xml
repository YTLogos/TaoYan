<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>调色板 | Tao Yan</title>
    <link>https://taoyan.netlify.app/tags/%E8%B0%83%E8%89%B2%E6%9D%BF/</link>
      <atom:link href="https://taoyan.netlify.app/tags/%E8%B0%83%E8%89%B2%E6%9D%BF/index.xml" rel="self" type="application/rss+xml" />
    <description>调色板</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><copyright>© Tao Yan, 2018-2020</copyright><lastBuildDate>Sat, 10 Feb 2018 12:19:05 +0000</lastBuildDate>
    <image>
      <url>https://taoyan.netlify.app/img/pom-card.png</url>
      <title>调色板</title>
      <link>https://taoyan.netlify.app/tags/%E8%B0%83%E8%89%B2%E6%9D%BF/</link>
    </image>
    
    <item>
      <title>创建属于自己的调色板</title>
      <link>https://taoyan.netlify.app/post/2018-02-10.%E5%88%9B%E5%BB%BA%E5%B1%9E%E4%BA%8E%E8%87%AA%E5%B7%B1%E7%9A%84%E8%B0%83%E8%89%B2%E6%9D%BF/</link>
      <pubDate>Sat, 10 Feb 2018 12:19:05 +0000</pubDate>
      <guid>https://taoyan.netlify.app/post/2018-02-10.%E5%88%9B%E5%BB%BA%E5%B1%9E%E4%BA%8E%E8%87%AA%E5%B7%B1%E7%9A%84%E8%B0%83%E8%89%B2%E6%9D%BF/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/palette.jpeg?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;简介&#34;&gt;简介&lt;/h2&gt;
&lt;p&gt;我们知道发表文章的时候不同杂志的配色方案是不同的，如果参加工作的话，不同公司的配色方案也是不一样的，每个人的色觉也是不一样的，所以如果可以创建属于自己的配色方案的话以后可视化就可以随心所欲了。&lt;/p&gt;
&lt;h2 id=&#34;方案&#34;&gt;方案&lt;/h2&gt;
&lt;p&gt;接下来我将基于下面的几种颜色创建属于我自己的调色板&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/color.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;主要有以下几个方面：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;将颜色与其对应的十六进制矢量联系起来&lt;/li&gt;
&lt;li&gt;创建访问十六进制矢量的函数&lt;/li&gt;
&lt;li&gt;调色板命名&lt;/li&gt;
&lt;li&gt;访问调用调色板&lt;/li&gt;
&lt;li&gt;创建兼容&lt;strong&gt;ggplot2&lt;/strong&gt;的尺度函数&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;首先我们创建一个颜色变量&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;library(ggplot2)
theme_set(theme_minimal())
my_colors &amp;lt;- c(
  `purple` = &amp;quot;#7b0099&amp;quot;,
  `yellow` = &amp;quot;#ff9900&amp;quot;,
  `black`  = &amp;quot;#221f1f&amp;quot;,
  `white`  = &amp;quot;#f5f5f1&amp;quot;,
  `red`    = &amp;quot;#e50914&amp;quot;
)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;后续如果需要对颜色进行修改或添加都可以在这个颜色变量中进行。
下面创建一个可以从该变量中提取颜色对应的十六进制的函数&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;#&#39; Function to extract my_colors as hex codes
#&#39;
#&#39; @param ... Character names of my_colors
#&#39;
my_cols &amp;lt;- function(...){
  cols &amp;lt;- c(...)
  
  if (is.null(cols))
    return(my_colors)
  my_colors[cols]
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;此时我们可以十分方便获取颜色的十六进制，下面演示一下：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;my_cols()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    purple    yellow     black     white       red 
## &amp;quot;#7b0099&amp;quot; &amp;quot;#ff9900&amp;quot; &amp;quot;#221f1f&amp;quot; &amp;quot;#f5f5f1&amp;quot; &amp;quot;#e50914&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;my_cols(&amp;quot;purple&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    purple 
## &amp;quot;#7b0099&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;my_cols(&amp;quot;purple&amp;quot;,&amp;quot;yellow&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    purple    yellow 
## &amp;quot;#7b0099&amp;quot; &amp;quot;#ff9900&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;my_cols(&amp;quot;yellow&amp;quot;,&amp;quot;purple&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    yellow    purple 
## &amp;quot;#ff9900&amp;quot; &amp;quot;#7b0099&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;此时我们可以在&lt;strong&gt;ggplot2&lt;/strong&gt;中调用这些颜色&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;#使用gapminder包中的数据集gapminder来演示
library(gapminder)
head(gapminder)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 6 x 6
##   country     continent  year lifeExp      pop gdpPercap
##   &amp;lt;fct&amp;gt;       &amp;lt;fct&amp;gt;     &amp;lt;int&amp;gt;   &amp;lt;dbl&amp;gt;    &amp;lt;int&amp;gt;     &amp;lt;dbl&amp;gt;
## 1 Afghanistan Asia       1952    28.8  8425333       779
## 2 Afghanistan Asia       1957    30.3  9240934       821
## 3 Afghanistan Asia       1962    32.0 10267083       853
## 4 Afghanistan Asia       1967    34.0 11537966       836
## 5 Afghanistan Asia       1972    36.1 13079460       740
## 6 Afghanistan Asia       1977    38.4 14880372       786
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;ggplot(gapminder, aes(gdpPercap, lifeExp))+
  geom_point(color=my_cols(&amp;quot;purple&amp;quot;), size=2, alpha=0.8)+
  scale_x_log10()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/1-1.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;创建调色板&#34;&gt;创建调色板&lt;/h2&gt;
&lt;p&gt;调色板就是一个颜色列表方便我们后面使用，将各种颜色组合搭配&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;my_palettes &amp;lt;- list(
  `main`  = my_cols(&amp;quot;purple&amp;quot;,&amp;quot;yellow&amp;quot;,&amp;quot;red&amp;quot;),
  `cool`  = my_cols(&amp;quot;purple&amp;quot;,&amp;quot;yellow&amp;quot;),
  `hot`   = my_cols(&amp;quot;yellow&amp;quot;,&amp;quot;black&amp;quot;,&amp;quot;red&amp;quot;),
  `mixed` = my_cols(&amp;quot;purple&amp;quot;,&amp;quot;yellow&amp;quot;,&amp;quot;white&amp;quot;,&amp;quot;red&amp;quot;),
  `bw`    = my_cols(&amp;quot;black&amp;quot;,&amp;quot;white&amp;quot;)
)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;在这个颜色列表中实际上我们创建了好几种颜色组合，下面创建一个函数来访问并调用它们&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;#&#39; Return function to interpolate a my_palettes
#&#39;
#&#39; @param palette Character name of palette in my_palettes
#&#39; @param reverse Boolean indicating whether the palette should be reversed
#&#39; @param ... Additional arguments to pass to colorRampPalette()
#&#39;
my_pal &amp;lt;- function(palette=&amp;quot;main&amp;quot;, reverse=FALSE, ...){
  pal &amp;lt;- my_palettes[[palette]]
  if (reverse) pal &amp;lt;- rev(pal)
  colorRampPalette(pal, ...)
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;该函数通过不同颜色组合名称从列表中获取一个颜色组合（默认条件下是&lt;code&gt;main&lt;/code&gt;），同时可以设置是否颠倒颜色顺序，之后传递给函数colorRampPaette()创建调色板。因此其返回的是一个函数。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;my_pal(&amp;quot;cool&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## function (n) 
## {
##     x &amp;lt;- ramp(seq.int(0, 1, length.out = n))
##     if (ncol(x) == 4L) 
##         rgb(x[, 1L], x[, 2L], x[, 3L], x[, 4L], maxColorValue = 255)
##     else rgb(x[, 1L], x[, 2L], x[, 3L], maxColorValue = 255)
## }
## &amp;lt;bytecode: 0x55ade91b4b70&amp;gt;
## &amp;lt;environment: 0x55ade91b3e20&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;通过这个函数可以基于调色板返回不同数目的颜色，进而可以在原始颜色之间创建多级颜色梯度&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;my_pal(&amp;quot;cool&amp;quot;)(10)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  [1] &amp;quot;#7B0099&amp;quot; &amp;quot;#891188&amp;quot; &amp;quot;#982277&amp;quot; &amp;quot;#A73266&amp;quot; &amp;quot;#B54455&amp;quot; &amp;quot;#C45544&amp;quot; &amp;quot;#D36533&amp;quot;
##  [8] &amp;quot;#E17622&amp;quot; &amp;quot;#F08810&amp;quot; &amp;quot;#FF9900&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;pie(rep(1,10), col = my_pal(&amp;quot;cool&amp;quot;)(10))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/2-1.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;上图展示的10种颜色就是&lt;code&gt;my_pal(&amp;quot;cool&amp;quot;)(10)&lt;/code&gt;返回的十六进制对应的颜色，这就为&lt;strong&gt;ggplot2&lt;/strong&gt;中的尺度颜色函数创造了可能&lt;/p&gt;
&lt;h2 id=&#34;scales-for-ggplot2&#34;&gt;Scales for ggplot2&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;ggplot2&lt;/strong&gt;中颜色映射有&lt;code&gt;color&lt;/code&gt;和&lt;code&gt;fill&lt;/code&gt;即颜色和填充。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;#&#39; Color scale constructor for my_colors
#&#39; 
#&#39; @param palette Character name of palette in my_palettes
#&#39; @param discrete Boolean indicating whether color aesthetic is discrete or not
#&#39; @param reverse Boolean indicating whether the palette should be reversed
#&#39; @param ... Additional arguments passed to discrete_scale() or scale_color_gradientn(), used #&#39; #&#39; respectively when discrete is TRUE or FALSE
#&#39; 
scale_color_my &amp;lt;- function(palette=&amp;quot;main&amp;quot;, discrete=TRUE, reverse=FALSE, ...){
  pal &amp;lt;- my_pal(palette = palette, reverse = reverse)
  
  if (discrete){
    discrete_scale(&amp;quot;colour&amp;quot;, paste0(&amp;quot;my_&amp;quot;, palette), palette = pal, ...)
  }else{
    scale_color_gradientn(colours = pal(256), ...)
  }
}

#&#39; Fill scale constructor for my_colors
#&#39;
#&#39; @param palette Character name of palette in my_palettes
#&#39; @param discrete Boolean indicating whether color aesthetic is discrete or not
#&#39; @param reverse Boolean indicating whether the palette should be reversed
#&#39; @param ... Additional arguments passed to discrete_scale() or scale_color_gradientn(), used #&#39; #&#39; respectively when discrete is TRUE or FALSE
#&#39; 
scale_fill_my &amp;lt;- function(palette=&amp;quot;main&amp;quot;, discrete=TRUE, reverse=FALSE, ...){
  pal &amp;lt;- my_pal(palette = palette, reverse = reverse)
  if (discrete){
    discrete_scale(&amp;quot;fill&amp;quot;,paste0(&amp;quot;my_&amp;quot;, palette), palette = pal, ...)
  }else{
    scale_fill_gradientn(colours = pal(256), ...)
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;上面每个函数都制定一个调色板（默认是&lt;code&gt;main&lt;/code&gt;），调色板是基于离散变量或连续变量，以及是否颠倒颜色顺序，同时还传递给了相关的&lt;strong&gt;ggplot2&lt;/strong&gt;函数。下面可以试试它们在绘图过程中的表现&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;ggplot(gapminder,aes(gdpPercap, lifeExp, color=continent))+
  geom_point(size=2, alpha=0.8)+
  scale_x_log10()+
  scale_color_my()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/3-1.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;我们可以更换调色板试试&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;ggplot(gapminder,aes(gdpPercap, lifeExp, color=continent))+
  geom_point(size=2, alpha=0.8)+
  scale_x_log10()+
  scale_color_my(palette = &amp;quot;hot&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/4-1.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;如果是连续变量的话&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;ggplot(iris, aes(Sepal.Width, Sepal.Length, color = Sepal.Length)) +
    geom_point(size = 4, alpha = .8) +
    scale_color_my(discrete = FALSE, palette = &amp;quot;bw&amp;quot;, reverse = TRUE)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/5-1.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;上面是颜色，下面试试填充&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;ggplot(mpg, aes(manufacturer, fill = manufacturer)) +
    geom_bar() +
    theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
    scale_fill_my(palette = &amp;quot;mixed&amp;quot;, guide = &amp;quot;none&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/6-1.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;包的创建&#34;&gt;包的创建&lt;/h2&gt;
&lt;p&gt;通过上面的内容可以看出，如果我们会创建包的话，将上述代码封装在一起再加上一些元素就形成了一个包，可以方便自己或他人后续使用。如果要创建包的话，可以学习
&lt;a href=&#34;https://twitter.com/hadleywickham&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Hadley Wickham&lt;/a&gt;的书
&lt;a href=&#34;http://r-pkgs.had.co.nz/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;R packages&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;sessioninfo&#34;&gt;SessionInfo&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;sessionInfo()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## R version 3.4.3 (2017-11-30)
## Platform: x86_64-pc-linux-gnu (64-bit)
## Running under: Ubuntu 17.10
## 
## Matrix products: default
## BLAS: /usr/lib/x86_64-linux-gnu/atlas/libblas.so.3.10.3
## LAPACK: /usr/lib/x86_64-linux-gnu/atlas/liblapack.so.3.10.3
## 
## locale:
##  [1] LC_CTYPE=zh_CN.UTF-8       LC_NUMERIC=C              
##  [3] LC_TIME=zh_CN.UTF-8        LC_COLLATE=zh_CN.UTF-8    
##  [5] LC_MONETARY=zh_CN.UTF-8    LC_MESSAGES=zh_CN.UTF-8   
##  [7] LC_PAPER=zh_CN.UTF-8       LC_NAME=C                 
##  [9] LC_ADDRESS=C               LC_TELEPHONE=C            
## [11] LC_MEASUREMENT=zh_CN.UTF-8 LC_IDENTIFICATION=C       
## 
## attached base packages:
## [1] stats     graphics  grDevices utils     datasets  methods   base     
## 
## other attached packages:
## [1] gapminder_0.3.0 ggplot2_2.2.1  
## 
## loaded via a namespace (and not attached):
##  [1] Rcpp_0.12.15     knitr_1.20       magrittr_1.5     munsell_0.4.3   
##  [5] colorspace_1.3-2 rlang_0.2.0      stringr_1.3.0    plyr_1.8.4      
##  [9] tools_3.4.3      grid_3.4.3       gtable_0.2.0     utf8_1.1.3      
## [13] cli_1.0.0        htmltools_0.3.6  assertthat_0.2.0 yaml_2.1.16     
## [17] lazyeval_0.2.1   rprojroot_1.3-2  digest_0.6.15    tibble_1.4.2    
## [21] crayon_1.3.4     evaluate_0.10.1  rmarkdown_1.8    labeling_0.3    
## [25] stringi_1.1.6    compiler_3.4.3   pillar_1.1.0     scales_0.5.0    
## [29] backports_1.1.2
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
  </channel>
</rss>
