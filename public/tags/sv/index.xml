<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>SV | Tao Yan</title>
    <link>https://taoyan.netlify.app/tags/sv/</link>
      <atom:link href="https://taoyan.netlify.app/tags/sv/index.xml" rel="self" type="application/rss+xml" />
    <description>SV</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><copyright>© Tao Yan, 2018-2020</copyright><lastBuildDate>Thu, 14 Nov 2019 16:19:05 +0000</lastBuildDate>
    <image>
      <url>https://taoyan.netlify.app/img/pom-card.png</url>
      <title>SV</title>
      <link>https://taoyan.netlify.app/tags/sv/</link>
    </image>
    
    <item>
      <title>SpeedSeq:一个快速基因组分析和注释的灵活框架</title>
      <link>https://taoyan.netlify.app/post/2019-11-14.speedseq%E4%B8%80%E4%B8%AA%E5%BF%AB%E9%80%9F%E5%9F%BA%E5%9B%A0%E7%BB%84%E5%88%86%E6%9E%90%E5%92%8C%E6%B3%A8%E9%87%8A%E7%9A%84%E7%81%B5%E6%B4%BB%E6%A1%86%E6%9E%B6/</link>
      <pubDate>Thu, 14 Nov 2019 16:19:05 +0000</pubDate>
      <guid>https://taoyan.netlify.app/post/2019-11-14.speedseq%E4%B8%80%E4%B8%AA%E5%BF%AB%E9%80%9F%E5%9F%BA%E5%9B%A0%E7%BB%84%E5%88%86%E6%9E%90%E5%92%8C%E6%B3%A8%E9%87%8A%E7%9A%84%E7%81%B5%E6%B4%BB%E6%A1%86%E6%9E%B6/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20191130185953.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;简介&#34;&gt;简介&lt;/h2&gt;
&lt;p&gt;Speedseq是一个快速基因组分析和注释的灵活框架，发表在
&lt;a href=&#34;https://www.nature.com/articles/nmeth.3505&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Nature Method&lt;/a&gt;上封装了大量基因组分析的软件，比如比对软件BWA，calling SNP软件freebays，SV鉴定软件lumpy等，这也导致了这款软件的安装十分繁琐。另外SpeedSeq基于Python2环境，目前很多新版本的模块比如SpeedSeq依赖的numpy、pysam以及scipy基本不支持Python2了，所以如果你基于
&lt;a href=&#34;https://github.com/hall-lab/speedseq&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;SpeedSeq&lt;/a&gt;主页的安装手册进行安装各种依赖，会让你怀疑人生的。此外以后如果有软件是依赖Python2环境的，我的建议是尽量别用了，除非是找不到替代的软件了。&lt;/p&gt;
&lt;h2 id=&#34;安装&#34;&gt;安装&lt;/h2&gt;
&lt;p&gt;要使用一个软件第一步是你能安装它。仅仅安装SpeedSeq是很简单的，但是需要安装很多依赖，尤其是涉及一大堆需要编译的软件。SpeedSeq提供了一份
&lt;a href=&#34;https://github.com/hall-lab/speedseq/blob/master/example/example_speedseq_install.sh&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;安装模板&lt;/a&gt;。但是如果你完全按照此手册进行安装的话，你会崩溃的。&lt;/p&gt;
&lt;p&gt;SpeedSeq的prerequisites：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;g++ and the standard C and C++ development libraries (&lt;a href=&#34;https://gcc.gnu.org/&#34;&gt;https://gcc.gnu.org/&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;CMake (&lt;a href=&#34;http://www.cmake.org/&#34;&gt;http://www.cmake.org/&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;GNU awk and core utils&lt;/li&gt;
&lt;li&gt;Python 2.7 (&lt;a href=&#34;https://www.python.org/&#34;&gt;https://www.python.org/&lt;/a&gt;)
&lt;ul&gt;
&lt;li&gt;numpy&lt;/li&gt;
&lt;li&gt;pysam 0.8.0+&lt;/li&gt;
&lt;li&gt;scipy&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ROOT (&lt;a href=&#34;https://root.cern.ch/&#34;&gt;https://root.cern.ch/&lt;/a&gt;) (required if running CNVnator)&lt;/li&gt;
&lt;li&gt;Variant Effect Predictor (&lt;a href=&#34;http://www.ensembl.org/info/docs/tools/vep/index.html&#34;&gt;http://www.ensembl.org/info/docs/tools/vep/index.html&lt;/a&gt;) (required if annotating VCF files)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;第一步我们先创建一个python2的虚拟环境&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#创建虚拟环境
conda create -n speedseq python=2.7
#激活该环境
conda activate speedseq
#有的时候如果你使用zsh的话，可能激活环境会报错，此时可以进行如下操作
source ~/miniconda3/etc/profile.d/conda.sh
conda activate speedseq#后续所有的操作都是在此环境中进行
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;第二步是安装需要的python模块，安装模块之前，先安装适用于python2的pip&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#先去http://pypi.upc.edu/mirror/pip/下载pip-9.01
wget http://pypi.upc.edu/mirror/pip/pip-9.0.1.tar.gz#md5=35f01da33009719497f01a4ba69d63c9
tar zxvf pip-9.0.1.tar.gz
cd pip-9.0.1
python setup.py install
#安装模块，此时需要注意由于是python2环境，所以你安装的模块不能是太新的，不然安装不了，我这里安装的版本如下
pip install numpy==1.10.4 scipy==1.2.2 pysam==0.9.0 -i http://pypi.douban.com/simple/ --trusted-host pypi.douban.com --user
#可以进入pytohn中import事实是否安装成功
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;第三步安装CNVnator相关的prerequisites&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;##CNVnator需要ROOT软件
#先安装一些依赖（根据自己不同的情况安装，由于我服务器上各种依赖比较完善所以我基本不用安装）
sudo apt-get install git dpkg-dev cmake g++ gcc binutils libx11-dev libxpm-dev gfortran libssl-dev libpcre3-dev libxft-dev libxext-dev xlibmesa-glu-dev libglew1.5-dev libftgl-dev libmysqlclient-dev libfftw3-dev libcfitsio-dev \
graphviz-dev libavahi-compat-libdnssd-dev \
libldap2-dev libxml2-dev libkrb5-dev \
libgsl0-dev libqt4-dev

##下一步去https://root.cern.ch/releases下载ROOT，条最新的下载就行了，我是ubuntu16.04，所以我下载的是root_v6.18.02.Linux-ubuntu16-x86_64-gcc5.4.tar.gz
wget https://root.cern/download/root_v6.18.02.Linux-ubuntu16-x86_64-gcc5.4.tar.gz
##需要注意的是，root_v6.18.02.Linux-ubuntu16-x86_64-gcc5.4.tar.gz是适用于ubuntu16以及gcc5.4的，所以先看看你的gcc是什么版本，我的原先的是gcc7，所以需要在安装gcc5，此时我们就有两个版本的gcc，切换一下就好了，
#先看一下系统安装了哪几个gcc
ll /usr/bin/gcc*
#使用update-alternatives设置gcc
sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-5 30
sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-7 40
#切换成gcc5
sudo update-alternatives --config gcc
There are 2 choices for the alternative gcc (providing /usr/bin/gcc).

  Selection    Path            Priority   Status
------------------------------------------------------------
  0            /usr/bin/gcc-7   100       auto mode
* 1            /usr/bin/gcc-5   40        manual mode
  2            /usr/bin/gcc-7   100       manual mode

Press &amp;lt;enter&amp;gt; to keep the current choice[*], or type selection number:
#由于我已经切换到了gcc5，所以这里就不选择了，如果你的gcc不是gcc5，可以选择切换到你需要的gcc版本，当然如果你有module的话，也可以用module指定
#安装ROOT
tar zxvf root_v6.18.02.Linux-ubuntu16-x86_64-gcc5.4.tar.gz
cd root
./configure --prefix=$PWD
make
echo &amp;quot;source /your root path/root/bin/thisroot.sh&amp;quot; &amp;gt;&amp;gt; ~/.bashrc
source ~/.bashrc
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;第四步安装SpeedSeq&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git clone --recursive https://github.com/hall-lab/speedseq
cd speedseq
make
cd bin
wget https://raw.githubusercontent.com/hall-lab/speedseq/master/bin/annotate_rd.py
wget https://raw.githubusercontent.com/hall-lab/speedseq/master/bin/cnvnator_wrapper.py
#安装CNVnator，进入SpeedSeq文件夹
cd speedseq
make cnvnator
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;到这里基本SpeedSeq安装成功，还有一些专本针对人类研究的我这里不讲，做人研究的可以去
&lt;a href=&#34;https://github.com/hall-lab/speedseq&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;SpeedSeq&lt;/a&gt;主页根据指南安装，问题不大了。&lt;/p&gt;
&lt;p&gt;进入example中运行看是否出错&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd example
./run_speedseq
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;安装成功的话，你可以得到以下文件&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;example.bam&lt;/li&gt;
&lt;li&gt;example.discordants.bam&lt;/li&gt;
&lt;li&gt;example.splitters.bam&lt;/li&gt;
&lt;li&gt;example.vcf.gz&lt;/li&gt;
&lt;li&gt;example.sv.vcf.gz&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;SpeedSeq封装了以下核心软件：&lt;/p&gt;
&lt;p&gt;The core components enable standard functionality outlined in 
&lt;a href=&#34;#quick-start&#34;&gt;Quick start&lt;/a&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;BWA (&lt;a href=&#34;http://bio-bwa.sourceforge.net/&#34;&gt;http://bio-bwa.sourceforge.net/&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;FreeBayes (&lt;a href=&#34;https://github.com/ekg/freebayes&#34;&gt;https://github.com/ekg/freebayes&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;LUMPY (&lt;a href=&#34;https://github.com/arq5x/lumpy-sv&#34;&gt;https://github.com/arq5x/lumpy-sv&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Sambamba (&lt;a href=&#34;http://lomereiter.github.io/sambamba/&#34;&gt;http://lomereiter.github.io/sambamba/&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;SAMBLASTER (&lt;a href=&#34;https://github.com/GregoryFaust/samblaster&#34;&gt;https://github.com/GregoryFaust/samblaster&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Vawk (&lt;a href=&#34;https://github.com/cc2qe/vawk&#34;&gt;https://github.com/cc2qe/vawk&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;GNU Parallel (&lt;a href=&#34;http://www.gnu.org/software/parallel/&#34;&gt;http://www.gnu.org/software/parallel/&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;mbuffer (&lt;a href=&#34;http://www.maier-komor.de/mbuffer.html&#34;&gt;http://www.maier-komor.de/mbuffer.html&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;SpeedSeq主要安装比较麻烦，安装完之后使用就很简单了，比较是封装了大量的常用软件并做成了pipeline。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Nature Reviews Genetics | 测序时代的基因组结构变异</title>
      <link>https://taoyan.netlify.app/post/2019-11-14.%E6%B5%8B%E5%BA%8F%E6%97%B6%E4%BB%A3%E7%9A%84%E5%9F%BA%E5%9B%A0%E7%BB%84%E7%BB%93%E6%9E%84%E5%8F%98%E5%BC%82/</link>
      <pubDate>Sun, 03 Nov 2019 16:19:05 +0000</pubDate>
      <guid>https://taoyan.netlify.app/post/2019-11-14.%E6%B5%8B%E5%BA%8F%E6%97%B6%E4%BB%A3%E7%9A%84%E5%9F%BA%E5%9B%A0%E7%BB%84%E7%BB%93%E6%9E%84%E5%8F%98%E5%BC%82/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20191125151327.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;简介&#34;&gt;简介&lt;/h2&gt;
&lt;p&gt;结构变异(SV)的鉴定对于解析基因组是十分重要的。得益于检测算法以及测序技术的发展，全基因组结构变异分析成为可能。本文作者综述了基因组结构变异的检测方法，同时指明了整合基因组结构变异以及生物学信息的研究方向。&lt;/p&gt;
&lt;h2 id=&#34;结构变异&#34;&gt;结构变异&lt;/h2&gt;
&lt;p&gt;一般是大于50bp的序列变异。SV的大小以及类型多样， 范围从&amp;gt;50bp到~Mb的序列变异。变异类型主要分为:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;缺失(delections,DELs)&lt;/li&gt;
&lt;li&gt;插入(insertions,INSs)。根据插入序列可分为移动元件插入(mobile element insertions, MEIs),线粒体基因组插入(nuclear insertions of mitochondrial genome, NUMTs),病毒序列插入(viral element insertions, VEIs)以及其他非特异性插入(insertions of unspecified sequence)&lt;/li&gt;
&lt;li&gt;重复(duplications, DUPs)。根据重复片段之间的距离可分为串联重复(tandem repeat)以及散在重复(interspersed repeat)&lt;/li&gt;
&lt;li&gt;倒位(inversions, INVs)&lt;/li&gt;
&lt;li&gt;易位(translocations,TRAs)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20191125153139.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;拷贝数变异(copy number variation, CNV)是DELs以及INSs的合称。INVs与TRAs不会改变基因组大小，其他的会改变基因组大小。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;SV分布在整个基因组中并影响分子及细胞进程，调节功能，3D基因组结构以及转录机制等。&lt;/p&gt;
&lt;p&gt;随着检测算法的开发以及测序技术的发展，越来越多以前未被检测到的SV被检测到，从微阵列到短读长测序再到现在的三代长读长测序以及未来新的测序技术，SV的研究如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20191125151327.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;在这篇综述中，作者讨论了解决人类基因组中SV的方法，这些方法通过算发集成以及新技术来绕过短读长的局限性。&lt;/p&gt;
&lt;h2 id=&#34;算法集成&#34;&gt;算法集成&lt;/h2&gt;
&lt;p&gt;基于序列的SV检测主要是利用样本序列与参考基因组序列之间mapping不一致产生的位置特征。目前基于NGS数据检测SV的方法主要有四类：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Read Pair，一般称为Pair-End Mapping，简称RP或者PEM&lt;/li&gt;
&lt;li&gt;Split Read，简称SR&lt;/li&gt;
&lt;li&gt;Read Depth，简称RD，也有人将其称为RC——Read Count的意思，它与Read Depth是同一回事，顾名思义都是利用read覆盖情况来检测变异的方法&lt;/li&gt;
&lt;li&gt;序列从头组装（de novo Assembly， 简称AS）的方法。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20191125153355.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;目前大部分的SV检测算法都是涉及到上述一至两类，这样就会导致检测到的SV数目以及准确度都会大打折扣。一种解决办法就是同时利用多种算法也就是上面我们提到的集成算法检测SV再整合到一起形成一个统一的变异数据集，具体操作如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20191125154043.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;大多数的检测算法都是不同的实验室内部针对某个项目进行开发的，因此就缺乏广适性。但是同时也存在几种算法主要针对上述提到的四类中的一类，这就使得我们可以组合起来就行SV的检测。比如CNVnator可以与BreakDancer和Pindel组合分别针对cover read depth, read pair and split reads进行SV的检测。同时为了降低假阳性还需要设置一系列的过滤指标。&lt;/p&gt;
&lt;h2 id=&#34;大规模群体sv检测&#34;&gt;大规模群体SV检测&lt;/h2&gt;
&lt;p&gt;大规模群体检测SV的研究目前有很多，比如我们熟知的1000 Genomes Project (1KGP)整合了19中算法进行SV的检测。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20191125160500.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;新兴基因组技术&#34;&gt;新兴基因组技术&lt;/h2&gt;
&lt;p&gt;大量的新兴技术试图超越二代测序短读长的限制。连接分子策略比如链读长、链式测序以及Hi-C等技术通过推断远端定位的序列比对进行SV的检测。单分子测序目前主要是Pacbio以及Nanopore。具体如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20191125164532.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;具体的这里不展开，有兴趣的可以下载
&lt;a href=&#34;https://www.nature.com/articles/s41576-019-0180-9.pdf&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;原文&lt;/a&gt;仔细阅读。&lt;/p&gt;
&lt;p&gt;总结来说，目前检测SV的方法及软件汇总如下，最好的策略肯定是利用单分子三代测序比如Pacbio或者Nanopore，但是价格感人，所以前期积累的大量的二代高深度测序数据就可以利用起来了，针对二代测序推荐使用SppedSeq，整合多种算法，覆盖了多种SV类型的检测。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20191125165220.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;这篇综述内容非常广，涉及面也多，有兴趣的话可以仔细阅读，我这里只是粗略读了一下，主要是为了找几种比较好使的SV检测软件。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
