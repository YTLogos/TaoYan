<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>SNPs | Tao Yan</title>
    <link>https://taoyan.netlify.app/tags/snps/</link>
      <atom:link href="https://taoyan.netlify.app/tags/snps/index.xml" rel="self" type="application/rss+xml" />
    <description>SNPs</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><copyright>© Tao Yan, 2018-2020</copyright><lastBuildDate>Mon, 20 Jul 2020 16:19:05 +0000</lastBuildDate>
    <image>
      <url>https://taoyan.netlify.app/img/pom-card.png</url>
      <title>SNPs</title>
      <link>https://taoyan.netlify.app/tags/snps/</link>
    </image>
    
    <item>
      <title>基于SNP进行主成分分析PCA</title>
      <link>https://taoyan.netlify.app/post/2020-07-20.%E5%9F%BA%E4%BA%8Esnp%E8%BF%9B%E8%A1%8C%E4%B8%BB%E6%88%90%E5%88%86%E5%88%86%E6%9E%90pca/</link>
      <pubDate>Mon, 20 Jul 2020 16:19:05 +0000</pubDate>
      <guid>https://taoyan.netlify.app/post/2020-07-20.%E5%9F%BA%E4%BA%8Esnp%E8%BF%9B%E8%A1%8C%E4%B8%BB%E6%88%90%E5%88%86%E5%88%86%E6%9E%90pca/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20201007165429.png&#34; alt=&#34;20201007165429.png&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;简介&#34;&gt;简介&lt;/h2&gt;
&lt;p&gt;主成分分析(PCA)是一种线性降维方法，通过线性变换简化数据集，提取关键信息对数据进行区分。群体重测序项目往往能得到百万乃至千万级别的SNP，基于SNP进行PCA的软件有很多，主流是下面三种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Plink: &lt;a href=&#34;https://www.cog-genomics.org/plink/&#34;&gt;https://www.cog-genomics.org/plink/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;GCTA: &lt;a href=&#34;https://cnsgenomics.com/software/gcta/&#34;&gt;https://cnsgenomics.com/software/gcta/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;EIGENSOFT: &lt;a href=&#34;https://github.com/DReichLab/EIG&#34;&gt;https://github.com/DReichLab/EIG&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;前面两个软件使用起来相对简单一些，EIGENSOFT运行需要一些配置，相对麻烦一点。&lt;/p&gt;
&lt;h2 id=&#34;数据准备&#34;&gt;数据准备&lt;/h2&gt;
&lt;p&gt;我这里使用我以前一篇
&lt;a href=&#34;https://taoyan.netlify.app/post/2020-07-15.%E4%BD%BF%E7%94%A8snphylo%E5%9F%BA%E4%BA%8Esnp%E6%9E%84%E5%BB%BA%E7%BE%A4%E4%BD%93%E7%B3%BB%E7%BB%9F%E5%8F%91%E8%82%B2%E6%A0%91/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;文章&lt;/a&gt;提到的数据rename.id.maf0.05.geno0.1.vcf，已经进行了过滤。&lt;/p&gt;
&lt;h2 id=&#34;pca&#34;&gt;PCA&lt;/h2&gt;
&lt;p&gt;这里使用plink以及GCTA进行分析，分析之前都需要数据处理一下：&lt;/p&gt;
&lt;p&gt;将vcf数据转换为二进制文件，生成map，ped，bed，bim，fam文件&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;vcftools --vcf rename.id.maf0.05.geno0.1.vcf --plink --out rename.id.maf0.05.geno0.1.vcf.pca
plink --noweb --file rename.id.maf0.05.geno0.1.vcf.pca --make-bed --out rename.id.maf0.05.geno0.1.vcf.pca_bfile
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;得到rename.id.maf0.05.geno0.1.vcf.pca_bfile.bed以及rename.id.maf0.05.geno0.1.vcf.pca_bfile.bim&lt;/p&gt;
&lt;h3 id=&#34;plink计算pca&#34;&gt;plink计算PCA&lt;/h3&gt;
&lt;p&gt;这里我们就计算前三个PC，一般也就看前三个PC，当然你可以计算更多，比如前20个&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;plink --threads 16 --bfile rename.id.maf0.05.geno0.1.vcf.pca_bfile --pca 3 --out rename.id.maf0.05.geno0.1.vcf.pca_bfile
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这一步会产生两个文件，一个是以.eigenval结尾的文件，记录特征值，用来计算每个PC所占的比重。另一个是以.eigenvec结尾的文件，记录特征向量&lt;/p&gt;
&lt;h3 id=&#34;gcta计算pca&#34;&gt;GCTA计算PCA&lt;/h3&gt;
&lt;p&gt;第一步是计算近交系数，生成grm矩阵&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;gcta64 --bfile rename.id.maf0.05.geno0.1.vcf.pca_bfile --make-grm --autosome --out rename.id.maf0.05.geno0.1.vcf.pca_bfile_grm
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;生成rename.id.maf0.05.geno0.1.vcf.pca_bfile_grm.grm.bin，rename.id.maf0.05.geno0.1.vcf.pca_bfile_grm.grm.id以及rename.id.maf0.05.geno0.1.vcf.pca_bfile_grm.grm.N.bin三个文件&lt;/p&gt;
&lt;p&gt;第二步计算PCA&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;gcta64 --grm rename.id.maf0.05.geno0.1.vcf.pca_bfile_grm --pca 3 --out rename.id.maf0.05.geno0.1.vcf.pca_bfile_grm_pca
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;同样生成以.eigenval和.eigenvec结尾的文件，用于后续绘图。&lt;/p&gt;
&lt;h2 id=&#34;绘图&#34;&gt;绘图&lt;/h2&gt;
&lt;p&gt;绘图的话需要再准备样本分类信息sample_info.txt，第一列表示样本名，第二列代表样本的类型&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;library(tidyverse)
library(export)
pca &amp;lt;- read.table(&amp;quot;rename.id.maf0.05.geno0.1.vcf.pca_bfile_grm_pca.eigenvec&amp;quot;, header = F)
eigval &amp;lt;- read.table(&amp;quot;rename.id.maf0.05.geno0.1.vcf.pca_bfile_grm_pca.eigenval&amp;quot;, header = F)
pcs &amp;lt;- paste0(&amp;quot;PC&amp;quot;, 1:nrow(eigval))
eigval[nrow(eigval),1] &amp;lt;- 0
percentage &amp;lt;- eigval$V1/sum(eigval$V1)*100
eigval_df &amp;lt;- as.data.frame(cbind(pcs, eigval[,1], percentage), stringsAsFactors = F)
names(eigval_df) &amp;lt;- c(&amp;quot;PCs&amp;quot;, &amp;quot;variance&amp;quot;, &amp;quot;proportion&amp;quot;)
eigval_df$variance &amp;lt;- as.numeric(eigval_df$variance)
eigval_df$proportion &amp;lt;- as.numeric(eigval_df$proportion)
pc1_proportion &amp;lt;- paste0(round(eigval_df[1,3],2),&amp;quot;%&amp;quot;)
pc2_proportion &amp;lt;- paste0(round(eigval_df[2,3],2),&amp;quot;%&amp;quot;)
sample &amp;lt;- read.table(&amp;quot;sample_info.txt&amp;quot;, header = F)
data &amp;lt;- left_join(pca,sample,by=&amp;quot;V1&amp;quot;)
data &amp;lt;- data[,-2] 
colnames(data) &amp;lt;- c(&amp;quot;Sample&amp;quot;,&amp;quot;PC1&amp;quot;,&amp;quot;PC2&amp;quot;,&amp;quot;PC3&amp;quot;,&amp;quot;Type&amp;quot;)
data$Type &amp;lt;- factor(data$Type, levels = c(&amp;quot;Group1&amp;quot;,&amp;quot;Group2&amp;quot;,&amp;quot;Group3&amp;quot;))
p_pca &amp;lt;- ggplot(data,aes(PC1,PC2))+
  geom_point(aes(color=Type), size=3)+
  stat_ellipse(aes(color=Type),level = 0.95, show.legend = FALSE, size=1)+
  scale_color_manual(values = c(&amp;quot;#2a6117&amp;quot;,&amp;quot;#e93122&amp;quot;,&amp;quot;#0042f4&amp;quot;))+
  theme(panel.grid = element_blank(),
        panel.background = element_blank(),
        panel.border = element_rect(fill = NA, colour = &amp;quot;black&amp;quot;),
        legend.title = element_blank(),
        legend.key = element_blank(),
        axis.text = element_text(colour = &amp;quot;black&amp;quot;, size=12, family = &amp;quot;Times New Roman&amp;quot;),
        axis.title = element_text(color=&amp;quot;black&amp;quot;,size = 15, family = &amp;quot;Times New Roman&amp;quot;),
        legend.text = element_text(colour = &amp;quot;black&amp;quot;, size=15, family = &amp;quot;Times New Roman&amp;quot;),
        legend.position = c(0.15,0.15)
  )+
  labs(x=paste0(&amp;quot;PC1(&amp;quot;,pc1_proportion,&amp;quot;)&amp;quot;),
       y=paste0(&amp;quot;PC2(&amp;quot;,pc2_proportion,&amp;quot;)&amp;quot;))
graph2office(file = &amp;quot;pca.pptx&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;最后直接导出到PPT中用于编辑。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>使用SNPhylo基于SNP构建群体系统发育树</title>
      <link>https://taoyan.netlify.app/post/2020-07-15.%E4%BD%BF%E7%94%A8snphylo%E5%9F%BA%E4%BA%8Esnp%E6%9E%84%E5%BB%BA%E7%BE%A4%E4%BD%93%E7%B3%BB%E7%BB%9F%E5%8F%91%E8%82%B2%E6%A0%91/</link>
      <pubDate>Wed, 15 Jul 2020 16:19:05 +0000</pubDate>
      <guid>https://taoyan.netlify.app/post/2020-07-15.%E4%BD%BF%E7%94%A8snphylo%E5%9F%BA%E4%BA%8Esnp%E6%9E%84%E5%BB%BA%E7%BE%A4%E4%BD%93%E7%B3%BB%E7%BB%9F%E5%8F%91%E8%82%B2%E6%A0%91/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20201006190614.png&#34; alt=&#34;20201006190614.png&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;简介&#34;&gt;简介&lt;/h2&gt;
&lt;p&gt;系统发育树是一种推断各种生物之间进化关系的好方法，在进化研究中得到了广泛的应用，得益于测序技术的发展以及成本的不断下降，大量的物种以及群体被测序，产生了海量的基因型数据，在重测序项目中，基于SNP数据进行系统发育树的构建有利于更全面地囊括整个基因组层面的变异进行分析。
&lt;strong&gt;SNPhylo&lt;/strong&gt;是基于SNP数据构建群体系统发育树的一个pipeline，可以接受主流的VCF文件以及HapMap文件，同时其内置了过滤功能，通过对低质量的SNP，连锁不平衡进行过滤，生成用于构建群体系统发育树的输入数据，&lt;strong&gt;SNPhylo&lt;/strong&gt;会调用&lt;strong&gt;muscle&lt;/strong&gt;进行对序列比对，&lt;strong&gt;DNAML&lt;/strong&gt;构树，具体流程如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20201006190614.png&#34; alt=&#34;20201006190614.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;SNPhylo&lt;/strong&gt;有以下特性：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;基于全基因组SNP的树状结构。传统的建树方法是基于单拷贝基因，核糖体RNA基因，内部转录间隔序列(ITS)等具有特定属性的基因，而&lt;strong&gt;SNPhylo&lt;/strong&gt;则是从全基因组层面构建进化树，因此更加准确；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;通过连锁不平衡减少SNP的冗余。同一&lt;strong&gt;LD Block&lt;/strong&gt;中的SNP提供了冗余的系谱信息，&lt;strong&gt;SNPhylo&lt;/strong&gt;在一个&lt;strong&gt;LD Block&lt;/strong&gt;只保留一个有效的SNP，在不丢失信息位点的情况下，大大减少了运行时间；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;树的构建过程是高度自动化的。&lt;strong&gt;SNPhylo&lt;/strong&gt;可以接受主流的VCF文件作为直接输入数据，一行命令就可以生成最大似然树。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;SNPhylo&lt;/strong&gt;的源代码在https://github.com/thlee/SNPhylo&lt;/p&gt;
&lt;h2 id=&#34;数据准备&#34;&gt;数据准备&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;SNPhylo&lt;/strong&gt;内置了一系列的过滤功能，但是我倾向于自己先过滤数据，这样后续&lt;strong&gt;SNPhylo&lt;/strong&gt;运行时间也快些。&lt;/p&gt;
&lt;h3 id=&#34;maf以及geno过滤&#34;&gt;maf以及geno过滤&lt;/h3&gt;
&lt;p&gt;过滤之前先处理一下基因型数据，很多软件是为人体研究设计的，不支持带有特殊字符的染色体名称，比如chr1，因此第一步我们先修改染色体名称为数值型，这里我们利用&lt;strong&gt;bcftools&lt;/strong&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# 先利用bgzip压缩，tabix构建索引
bgzip &amp;lt; original.vcf &amp;gt; original.vcf.gz
tabix -p vcf original.vcf.gz
# 制作染色体名称对应文件
echo &amp;quot;chr1 1&amp;quot; &amp;gt;&amp;gt; chr_name_conv.txt
echo &amp;quot;chr2 2&amp;quot; &amp;gt;&amp;gt; chr_name_conv.txt
....

## 染色体名称修改
bcftools annotate --rename-chrs chr_name_conv.txt original.vcf.gz | bgzip &amp;gt; rename.vcf.gz
tabix -p vcf rename.vcf.gz

## 添加SNP ID， GATK出来的VCF文件是没有SNP ID的，这里还是利用bcftools添加ID
bcftools annotate --set-id &#39;%CHROM\_%POS\_%REF\_%FIRST_ALT&#39; rename.vcf.gz |bgzip &amp;gt; rename.id.vcf.gz
tabix -p vcf rename.id.vcf.gz
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;only include SNPs with MAF &amp;gt;= 0.05 and include only SNPs with a 90% genotyping rate (10% missing) use&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;plink --vcf rename.id.vcf.gz --maf 0.05 --geno 0.1 --recode  vcf-iid --out rename.id.maf0.05.geno0.1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;下面根据LD进行过滤并提取符合条件的SNP用于建树&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;## LD标记
plink --vcf rename.id.maf0.05.geno0.1.vcf  --indep-pairwise 50 10 0.2 --out rename.id.maf0.05.geno0.1
## LD过滤提取
plink --extract rename.id.maf0.05.geno0.1.prune.in --make-bed --out rename.id.maf0.05.geno0.1.prune.in --recode vcf-iid --vcf rename.id.maf0.05.geno0.1.vcf
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;此时我们得到了rename.id.maf0.05.geno0.1.prune.in.vcf用作&lt;strong&gt;SNPhylo&lt;/strong&gt;的输入数据。&lt;/p&gt;
&lt;h2 id=&#34;构建进化树&#34;&gt;构建进化树&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;SNPhylo&lt;/strong&gt;需要安装一些依赖：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;R包（getopt, phangorn, gdsfmt,SNPRelate）：用于过滤等&lt;/li&gt;
&lt;li&gt;python2.7&lt;/li&gt;
&lt;li&gt;muscle：序列联配，可选&lt;/li&gt;
&lt;li&gt;PHYLIP：构建进化树&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;安装这些环境之后放入环境变量中，或者一会配置的时候手动输入这些软件的位置&lt;/p&gt;
&lt;p&gt;此时从GitHub下载最新的&lt;strong&gt;SNPhylo&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git clone https://github.com/thlee/SNPhylo.git
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;配置：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd SNPhylo
bash setup.sh

# 配置信息
Version: 20141127

START TO SET UP FOR SNPHYLO!!!

The detected path of R is /usr/bin/R. Is it correct? [Y/n] y
The detected path of python is /usr/bin/python. Is it correct? [Y/n] y
The detected path of muscle is /home/taoyan/biosoft/mybin/muscle. Is it correct? [Y/n] y
The detected path of dnaml is /home/taoyan/biosoft/phylip-3.697/exe/dnaml. Is it correct? [Y/n] y
At least one R package (gdsfmt, SNPRelate, getopt or phangorn) to run this pipeline is not found. Are the packages already installed? [y/N] y
Please enter the directory for R packages (ex: /home/foo/r_packages): /database/R_Library

SNPHYLO is successfully installed!!!
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;看一下使用说明：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ ./snphylo.sh -h
Determine phylogenetic tree based on SNP data with a VCF, a HapMap, a Simple SNP or a GDS file

Version: 20180901

Usage:
	snphylo.sh -v VCF_file [-p Maximum_PLCS (5)] [-c Minimum_depth_of_coverage (5)]|-H HapMap_file [-p Maximum_PNSS (5)]|-s Simple_SNP_file [-p Maximum_PNSS (5)]|-d GDS_file [-l LD_threshold (0.1)] [-m MAF_threshold (0.1)] [-M Missing_rate (0.1)] [-o Outgroup_sample_name] [-P Prefix_of_output_files (snphylo.output)] [-b [-B The_number_of_bootstrap_samples (100)]] [-a The_number_of_the_last_autosome (22)] [-t The_number_of_cores_used (1)] [-r] [-A] [-h]

Options:
	-A: Perform multiple alignment by MUSCLE
	-b: Perform (non-parametric) bootstrap analysis and generate a tree
	-h: Show help and exit
	-r: Skip the step removing low quality data (-p and -c option are ignored).

Acronyms:
	PLCS: The percent of Low Coverage Sample
	PNSS: The percent of Sample which has no SNP information
	LD: Linkage Disequilibrium
	MAF: Minor Allele Frequency

Simple SNP File Format:
	#Chrom	Pos	SampleID1	SampleID2	SampleID3	...
	1	1000	A	A	T	...
	1	1002	G	C	G	...
	...
	2	2000	G	C	G	...
	2	2002	A	A	T	...
	...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;很简单，直接将准备好的rename.id.maf0.05.geno0.1.prune.in.vcf输进去记好了(我这里无需过滤了，所以设置了参数-r)：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;./snphylo.sh -v rename.id.maf0.05.geno0.1.prune.in.vcf -A -b -B 1000 -r
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;运行结束后回生成一系列文件：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;snphylo.output.bs.png
snphylo.output.bs.tree
snphylo.output.fasta
snphylo.output.filtered.vcf
snphylo.output.gds
snphylo.output.id.txt
snphylo.output.ml.png
snphylo.output.ml.tree
snphylo.output.ml.txt
snphylo.output.phylip.txt
snphylo.tar.gz
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;其中有树文件，图片也有，但是丑，以前有iTOL，现在收费了，还是老老实实用Y叔的&lt;strong&gt;ggtree&lt;/strong&gt;自己绘制美化吧&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
