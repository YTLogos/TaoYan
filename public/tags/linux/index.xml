<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Linux | Tao Yan</title>
    <link>https://taoyan.netlify.app/tags/linux/</link>
      <atom:link href="https://taoyan.netlify.app/tags/linux/index.xml" rel="self" type="application/rss+xml" />
    <description>Linux</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><copyright>© Tao Yan, 2018-2020</copyright><lastBuildDate>Mon, 13 Nov 2017 13:19:05 +0000</lastBuildDate>
    <image>
      <url>https://taoyan.netlify.app/img/pom-card.png</url>
      <title>Linux</title>
      <link>https://taoyan.netlify.app/tags/linux/</link>
    </image>
    
    <item>
      <title>Linux学习笔记（四）</title>
      <link>https://taoyan.netlify.app/post/2017-11-13.linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E5%9B%9B/</link>
      <pubDate>Mon, 13 Nov 2017 13:19:05 +0000</pubDate>
      <guid>https://taoyan.netlify.app/post/2017-11-13.linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E5%9B%9B/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/894bbdhjmL.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;grep&#34;&gt;&lt;code&gt;grep&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;grep&lt;/code&gt;全称是&lt;strong&gt;global search regular expression(RE) and print out the line&lt;/strong&gt;，中文名即全面搜索正则表达式并把行打印出来。是一种强大的文本搜索工具，可以使用正则表达式搜索文本，并将匹配的行列打印出来。&lt;strong&gt;Unix&lt;/strong&gt;的&lt;code&gt;grep&lt;/code&gt;家族包括&lt;code&gt;grep&lt;/code&gt;,&lt;code&gt;egrep&lt;/code&gt;,&lt;code&gt;fgrep&lt;/code&gt;以及&lt;code&gt;zgrep&lt;/code&gt;等，&lt;code&gt;egrep&lt;/code&gt;,&lt;code&gt;fgrep&lt;/code&gt;与&lt;code&gt;grep&lt;/code&gt;的差别很小，&lt;code&gt;egrep&lt;/code&gt;支持更多的re元字符， &lt;code&gt;fgrep&lt;/code&gt;就是&lt;em&gt;fixed grep&lt;/em&gt;或&lt;em&gt;fast grep&lt;/em&gt;，它们把所有的字母都看作单词，也就是说，正则表达式中的元字符表示其自身的字面意义，不再特殊&lt;code&gt;grep&lt;/code&gt;可以通过-&lt;em&gt;G、&lt;/em&gt;-&lt;em&gt;E、&lt;/em&gt;-_F_命令行选项来使用&lt;code&gt;egrep&lt;/code&gt;,&lt;code&gt;fgrep&lt;/code&gt;的功能，&lt;code&gt;zgrep&lt;/code&gt;可以用来处理&lt;strong&gt;ZIP&lt;/strong&gt;格式文件。&lt;/p&gt;
&lt;h3 id=&#34;grep常用用法&#34;&gt;&lt;code&gt;grep&lt;/code&gt;常用用法&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;grep&lt;/code&gt;常用用法如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;grep [-acinv] [--color=auto] &#39;字符串或者正则表达式&#39; filename
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;选项参数：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;-a：将binary文件以text文件的方式搜索，即不要忽略二进制数据&lt;/li&gt;
&lt;li&gt;-A&amp;lt;显示列数&amp;gt;：除了显示匹配到的那一行之外，还显示该行之后的内容&lt;/li&gt;
&lt;li&gt;-b：除了显示匹配到的那一行之外，还显示该行之前的内容&lt;/li&gt;
&lt;li&gt;-c：计算匹配到&lt;strong&gt;字符串&lt;/strong&gt;的次数&lt;/li&gt;
&lt;li&gt;-C&amp;lt;显示列数&amp;gt;：除了显示匹配到的那一列之外，还显示该列之前后的内容&lt;/li&gt;
&lt;li&gt;-d&amp;lt;进行动作&amp;gt; 当指定要查找的是目录而非文件时，必须使用这项参数，否则grep命令将回报信息并停止动作&lt;/li&gt;
&lt;li&gt;-e&amp;lt;范本样式&amp;gt; 指定字符串作为查找文件内容的范本样式&lt;/li&gt;
&lt;li&gt;-E 将范本样式为延伸的普通表示法来使用，意味着使用能使用扩展正则表达式&lt;/li&gt;
&lt;li&gt;-f&amp;lt;范本文件&amp;gt; 指定范本文件，其内容有一个或多个范本样式，让grep查找符合范本条件的文件内容，格式为每一列的范本样式&lt;/li&gt;
&lt;li&gt;-F 将范本样式视为固定字符串的列表&lt;/li&gt;
&lt;li&gt;-G 将范本样式视为普通的表示法来使用&lt;/li&gt;
&lt;li&gt;-h 在显示符合范本样式的那一列之前，不标示该列所属的文件名称&lt;/li&gt;
&lt;li&gt;-H 在显示符合范本样式的那一列之前，标示该列的文件名称&lt;/li&gt;
&lt;li&gt;-l 列出文件内容符合指定的范本样式的文件名称。&lt;/li&gt;
&lt;li&gt;-L 列出文件内容不符合指定的范本样式的文件名称。&lt;/li&gt;
&lt;li&gt;-q 不显示任何信息。&lt;/li&gt;
&lt;li&gt;-R/-r 此参数的效果和指定“-d recurse”参数相同。&lt;/li&gt;
&lt;li&gt;-s 不显示错误信息。&lt;/li&gt;
&lt;li&gt;-w 只显示全字符合的列。&lt;/li&gt;
&lt;li&gt;-x 只显示全列符合的列。&lt;/li&gt;
&lt;li&gt;-y 此参数效果跟“-i”相同。&lt;/li&gt;
&lt;li&gt;-o 只输出文件中匹配到的部分。&lt;/li&gt;
&lt;li&gt;-i：忽略大小写&lt;/li&gt;
&lt;li&gt;-n：输出行号&lt;/li&gt;
&lt;li&gt;-v：方向选择即显示出未匹配到&lt;strong&gt;字符串&lt;/strong&gt;的那一行&lt;/li&gt;
&lt;li&gt;&amp;ndash;color=auto：匹配到的字符串颜色高亮&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;下面我们实战演练一下，我们要从&lt;strong&gt;GTF&lt;/strong&gt;文件中搜索到匹配&lt;code&gt;Olfr418-ps1&lt;/code&gt;的行：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ grep &#39;Olfr418-ps1&#39; Mus_musculus.GRCm38.75_chr1_genes.txt
ENSMUSG00000049605      Olfr418-ps1
#打印出行号
$ grep -n &#39;Olfr&#39; Mus_musculus.GRCm38.75_chr1_genes.txt|head -n 5
548:ENSMUSG00000067064  Olfr1416
549:ENSMUSG00000057464  Olfr1415
550:ENSMUSG00000042849  Olfr1414
551:ENSMUSG00000058904  Olfr1413
552:ENSMUSG00000046300  Olfr1412
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;通过参数&lt;code&gt;-v&lt;/code&gt;设置可以不匹配不需要的字符串或者正则表达式：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ grep Olfr Mus_musculus.GRCm38.75_chr1_genes.txt|grep -v Olfr1413|head -n 5
ENSMUSG00000067064      Olfr1416
ENSMUSG00000057464      Olfr1415
ENSMUSG00000042849      Olfr1414
ENSMUSG00000046300      Olfr1412
ENSMUSG00000062497      Olfr1411
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;需要注意的是，这里我们排除掉&lt;code&gt;Olfr1413&lt;/code&gt;，但是如果数据集里存在类似于&lt;code&gt;Olfr1413a&lt;/code&gt;这样的字符，&lt;code&gt;grep&lt;/code&gt;也会将之剔除，因此我们需要设置参数&lt;code&gt;-w&lt;/code&gt;进行精准匹配。下面举个例子说明：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;$ cat example.txt
bio
bioinfo
bioinformatics
computational biology
# grep without -w
$ grep -v bioinfo example.txt
bio
computational biology
#可以看出这里将含有bioinfo字符串的bioinformatics也剔除掉了,使用参数-w可以避免
$ grep -v -w bioinfo example.txt
bio
bioinformatics
computational biology
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;我们平常接触的组学数据格式都是很复杂的，当我们匹配的时候我们希望能过浏览匹配到的字符串的前后文，&lt;code&gt;Linux&lt;/code&gt;提供了参数设置：-B（前）、-A（后）以及-C（前后），每个参数后面都跟着一个数字，表示要显示几行,如果匹配到多行，则个匹配之间会用&amp;ndash;分割开：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ grep -B2 &#39;AGATCGG&#39; contam.fastq|head -n 6
@DJB775P1:248:D0MDGACXX:7:1202:12362:49613
TGCTTACTCTGCGTTGATACCACTGCTTAGATCGGAAGAGCACACGTCTGAA
--
JJJJJIIJJJJJJHIHHHGHFFFFFFCEEEEEDBD?DDDDDDBDDDABDDCA
@DJB775P1:248:D0MDGACXX:7:1202:12782:49716
CTCTGCGTTGATACCACTGCTTACTCTGCGTTGATACCACTGCTTAGATCGG
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;grep&lt;/code&gt;如果结合正则表达式则会显得十分强大，比如如果我们要匹配&lt;code&gt;Olfr1413&lt;/code&gt;以及&lt;code&gt;Olfr1411&lt;/code&gt;,可以使用简单的正则表达式完成：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ grep &#39;Olfr141[13]&#39; Mus_musculus.GRCm38.75_chr1_genes.txt
ENSMUSG00000058904      Olfr1413
ENSMUSG00000062497      Olfr1411
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;当然如果我们要匹配的不具有相同的前缀，那就很尴尬了，这时我们可以利用**POSIX Extended Regular Expressions(ERE)**进行匹配，可以添加参数-E或者直接使用&lt;code&gt;egrep&lt;/code&gt;都行&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;$ grep -E &amp;quot;(Olfr1413|Olfr12)&amp;quot; Mus_musculus.GRCm38.75_chr1_genes.txt
ENSMUSG00000058904      Olfr1413
ENSMUSG00000061616      Olfr12
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;很多时候我们只需要将匹配到的行打印出来，此时我们可以使用参数-o：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ grep -o &amp;quot;Olfr.*&amp;quot; Mus_musculus.GRCm38.75_chr1_genes.txt|head -n 3
Olfr1416
Olfr1415
Olfr1414
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>Linux学习笔记（三）</title>
      <link>https://taoyan.netlify.app/post/2017-11-12.linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%89/</link>
      <pubDate>Sun, 12 Nov 2017 13:19:05 +0000</pubDate>
      <guid>https://taoyan.netlify.app/post/2017-11-12.linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%89/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/Be16KgagG1.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;p&gt;“write code for humans, write data for computers”&lt;/p&gt;
&lt;h2 id=&#34;cut&#34;&gt;&lt;strong&gt;cut&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;cut&lt;/code&gt;允许我们从数据集中提取某几列进行查看，通过参数&lt;code&gt;f&lt;/code&gt;来设置查看几列，比如我们想要查看第一和第三列或者只查看第二列：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ cut -f 1,3 Mus_musculus.GRCm38.75_chr1.bed|head -n 3
1       3054733
1       3054733
1       3054733
$ cut -f 2 Mus_musculus.GRCm38.75_chr1.bed|head -n 3
3054233
3054233
3054233
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;结合&lt;code&gt;grep&lt;/code&gt;我们可以十分方便的将&lt;strong&gt;GTF&lt;/strong&gt;文件中的部分信息提取出来进行查看，使用&lt;code&gt;grep&lt;/code&gt;主要用来将以&lt;code&gt;#&lt;/code&gt;开头的部份内容剔除掉，这其中涉及到正则表达式，我将在后面集中学习。下面的命令可以将染色体、起始位置以及终止位置提取出来，类似于&lt;code&gt;bed&lt;/code&gt;文件格式：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ grep -v &#39;^#&#39; Mus_musculus.GRCm38.75_chr1.gtf | cut -f 1,4,5 | head -n 3
1       3054233 3054733
1       3054233 3054733
1       3054233 3054733
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;我们也可以使用&lt;code&gt;&amp;gt;&lt;/code&gt;将提取的文件另存为一个文件，方便以后使用。这里我们存为&lt;strong&gt;test.txt&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ grep -v &amp;quot;^#&amp;quot; Mus_musculus.GRCm38.75_chr1.gtf | cut -f 1,4,5 &amp;gt; test.txt
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;cut&lt;/code&gt;默认分隔符为空格，因此如果使用&lt;code&gt;cut&lt;/code&gt;来处理&lt;strong&gt;CSV&lt;/strong&gt;文件的话，我们就需要通过参数&lt;code&gt;d&lt;/code&gt;指定分隔符 &lt;strong&gt;&lt;code&gt;,&lt;/code&gt;&lt;/strong&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ cut -d , -f 2,3 Mus_musculus.GRCm38.75_chr1_bed.csv | head -n 3
3054233,3054733
3054233,3054733
3054233,3054733
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;column&#34;&gt;&lt;strong&gt;column&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;当我们处理制表符文件时，常常行列之间无法对其，浏览效果很差,如下所示：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ grep -v &amp;quot;^#&amp;quot; Mus_musculus.GRCm38.75_chr1.gtf|cut -f1-8|head -n 3
1       pseudogene      gene    3054233 3054733 .       +       .
1       unprocessed_pseudogene  transcript      3054233 3054733 .       +      .
1       unprocessed_pseudogene  exon    3054233 3054733 .       +       .
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;column&lt;/code&gt;可以产生阅读效果很好的文件格式，参数&lt;code&gt;t&lt;/code&gt;表示&lt;code&gt;column&lt;/code&gt;将对数据集当作一个table来处理,下面的阅读效果明显好于前面的。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ grep -v &amp;quot;^#&amp;quot; Mus_musculus.GRCm38.75_chr1.gtf|cut -f1-8|head -n 3|column -t
1  pseudogene              gene        3054233  3054733  .  +  .
1  unprocessed_pseudogene  transcript  3054233  3054733  .  +  .
1  unprocessed_pseudogene  exon        3054233  3054733  .  +  .
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;需要注意的是，&lt;code&gt;column -t&lt;/code&gt;只能支持在终端进行浏览数据，无法对数据集进行格式重写成一个文件。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;column&lt;/code&gt;默认\t为分隔符，因此当我们处理其他分隔符数据时，需要使用参数&lt;code&gt;s&lt;/code&gt;进行指定，比如当我们处理&lt;strong&gt;CSV&lt;/strong&gt;数据时：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ column -s, -t Mus_musculus.GRCm38.75_chr1_bed.csv|head -n 3
1  3054233    3054733
1  3054233    3054733
1  3054233    3054733
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>Linux学习笔记（二）</title>
      <link>https://taoyan.netlify.app/post/2017-11-11.linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%BA%8C/</link>
      <pubDate>Sat, 11 Nov 2017 13:19:05 +0000</pubDate>
      <guid>https://taoyan.netlify.app/post/2017-11-11.linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%BA%8C/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/E3kF9hl9jj.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;p&gt;鉴于以后要大量使用&lt;code&gt;Linux&lt;/code&gt;系统处理生物信息学数据，因此加强自身linux系统的学习，开辟一个新的分类专门记录我学习&lt;code&gt;Linux&lt;/code&gt;的学习笔记，一是为了我自己以后方便查看，二也是希望能帮助到其他学习&lt;code&gt;Linux&lt;/code&gt;系统的人，共勉！！！&lt;/p&gt;
&lt;h2 id=&#34;head&#34;&gt;&lt;code&gt;head&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;快速查看数据，以&lt;strong&gt;bed&lt;/strong&gt;(只有三列)格式数据为例&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ head Mus_musculus.GRCm38.75_chr1.bed
1       3054233 3054733
1       3054233 3054733
1       3054233 3054733
1       3102016 3102125
1       3102016 3102125
1       3102016 3102125
1       3205901 3671498
1       3205901 3216344
1       3213609 3216344
1       3205901 3207317
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;head&lt;/code&gt;默认显示前十行，可以通过参数n来指定显示几行，比如只显示三行：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ head -n 3 Mus_musculus.GRCm38.75_chr1.bed
1       3054233 3054733
1       3054233 3054733
1       3054233 3054733
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;tail&#34;&gt;&lt;code&gt;tail&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;与&lt;code&gt;head&lt;/code&gt;相对的有一个命令&lt;code&gt;tail&lt;/code&gt;,&lt;code&gt;tail&lt;/code&gt;显示后几行，默认显示后十行，也可以通过参数n来指定显示几行：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ tail Mus_musculus.GRCm38.75_chr1.bed
1       195166217       195166390
1       195165745       195165851
1       195165748       195165851
1       195165745       195165747
1       195228278       195228398
1       195228278       195228398
1       195228278       195228398
1       195240910       195241007
1       195240910       195241007
1       195240910       195241007
$ tail -n 3 Mus_musculus.GRCm38.75_chr1.bed
1       195240910       195241007
1       195240910       195241007
1       195240910       195241007
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;基于这个特性，&lt;code&gt;tail&lt;/code&gt;可以用来去除数据集的前几列，通过在参数n后面添加数字(即&lt;code&gt;-n +x&lt;/code&gt;,区别于&lt;code&gt;-n 2&lt;/code&gt;)指定从第几行开始，比如从第三行开始，也就是剔除了前两行。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;$ seq 5 &amp;gt; nums.txt
$ cat nums.txt
1
2
3
4
5
# 从第三行开始
$ tail -n +3 nums.txt
3
4
5
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;结合这两个命令，我们可以十分方便的查看一个数据集的前几行以及后几行：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ (head -n 2; tail -n 2)&amp;lt; Mus_musculus.GRCm38.75_chr1.bed
1       3054233 3054733
1       3054233 3054733
1       195240910       195241007
1       195240910       195241007
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;less&#34;&gt;&lt;code&gt;less&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;一般小的文件我们直接用&lt;code&gt;cat&lt;/code&gt;进行查看，但是如果大数据集的话用&lt;code&gt;cat&lt;/code&gt;就十分不方便查看，&lt;code&gt;less&lt;/code&gt;就是用来查看大数据集的命令。&lt;code&gt;less&lt;/code&gt;一次性只显示前几行，但是可以通过滚动查看后面的信息，最后按&lt;code&gt;q&lt;/code&gt;结束。下面列出&lt;code&gt;less&lt;/code&gt;常用的命令：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Shortcut&lt;/th&gt;
&lt;th&gt;Action&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;space bar&lt;/td&gt;
&lt;td&gt;Next page&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;b&lt;/td&gt;
&lt;td&gt;Previous page&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;g&lt;/td&gt;
&lt;td&gt;First line&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;G&lt;/td&gt;
&lt;td&gt;Last line&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;j&lt;/td&gt;
&lt;td&gt;Down (one line at at time)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;k&lt;/td&gt;
&lt;td&gt;Up (one line at at time)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/&amp;lt;pattern&amp;gt;&lt;/td&gt;
&lt;td&gt;Search down (forward) for string &amp;lt;pattern&amp;gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;?&amp;lt;pattern&amp;gt;&lt;/td&gt;
&lt;td&gt;Search up (backward) for string &amp;lt;pattern&amp;gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;n&lt;/td&gt;
&lt;td&gt;Repeat last search downward (forward)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;N&lt;/td&gt;
&lt;td&gt;Repeat last search upward (backward)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;wcword-count&#34;&gt;&lt;code&gt;wc(word count)&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;查看数据有多少行可以用&lt;code&gt;wc&lt;/code&gt;命令,&lt;code&gt;wc&lt;/code&gt;会显示出数据有多少行、多少word以及多少字符(characters)。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ wc Mus_musculus.GRCm38.75_chr1.bed
  81226  243678 1698545 Mus_musculus.GRCm38.75_chr1.bed
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;wc&lt;/code&gt;支持同时处理多个文件：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ wc Mus_musculus.GRCm38.75_chr1.bed Mus_musculus.GRCm38.75_chr1.gtf
   81226   243678  1698545 Mus_musculus.GRCm38.75_chr1.bed
   81231  2385570 26607149 Mus_musculus.GRCm38.75_chr1.gtf
  162457  2629248 28305694 总用量
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;如果只想显示多少行，添加参数&lt;code&gt;l&lt;/code&gt;就行了：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ wc -l Mus_musculus.GRCm38.75_chr1.bed
81226 Mus_musculus.GRCm38.75_chr1.bed
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;更多用法可以用&lt;code&gt;man wc&lt;/code&gt;查看。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Linux学习笔记(一)</title>
      <link>https://taoyan.netlify.app/post/2017-11-09.linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%80/</link>
      <pubDate>Sun, 25 Jun 2017 12:34:08 -0500</pubDate>
      <guid>https://taoyan.netlify.app/post/2017-11-09.linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%80/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://github.com/YTLogos/Pic_blog/blob/master/Jb7HLAJK63.png?raw=true&#34; alt=&#34;mark&#34;&gt;&lt;/p&gt;
&lt;p&gt;鉴于以后要大量使用&lt;code&gt;Linux&lt;/code&gt;系统处理生物信息学数据，因此加强自身linux系统的学习，开辟一个新的分类专门记录我学习&lt;code&gt;Linux&lt;/code&gt;的学习笔记，一是为了我自己以后方便查看，二也是希望能帮助到其他学习&lt;code&gt;Linux&lt;/code&gt;系统的人，共勉！！！&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;创建含有当前时间的文件，如创建一个含有今天时间日期的文件夹&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;$ mkdir results-$(date +%F)
$ ls
results-2017-11-02
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;设置自己的快捷命令，比如我们要创建项目时，需要创建&lt;code&gt;data/seqs&lt;/code&gt;,&lt;code&gt;scripts&lt;/code&gt;以及&lt;code&gt;analysis&lt;/code&gt;文件夹，我们可以写一个快捷命令符，以后就可以直接调用即可：&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;$ alias mkpr=&amp;quot;mkdir -p {data/seqs,scripts,analysis}&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;这样后面我们每次运行&lt;em&gt;mkpr&lt;/em&gt;就会创建&lt;code&gt;data/seqs&lt;/code&gt;,&lt;code&gt;scripts&lt;/code&gt;以及&lt;code&gt;analysis&lt;/code&gt;文件夹。将上述两点综合我们就可以很容易创建含有当前时期的文件，这里我们将&lt;code&gt;date +%F&lt;/code&gt;设置成快捷命令&lt;em&gt;today&lt;/em&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;$ alias today=&amp;quot;date +%F&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;这样我们以后只需要运行以下命令就可以创建含有当前时间日期的文件了。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;$ mkdir results-$(today)
$ls
results-2017-11-02
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;注意上述命令在我们重启终端时是无法再次作用的，要使得&lt;strong&gt;alias&lt;/strong&gt;命令永久有效，我们可以将命令添加到&lt;code&gt;.bashrc&lt;/code&gt;中，之后&lt;code&gt;source ~/.bashrc&lt;/code&gt;即可生效。&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
  </channel>
</rss>
