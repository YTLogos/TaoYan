<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Transposable Elements | Tao Yan</title>
    <link>https://taoyan.netlify.app/categories/transposable-elements/</link>
      <atom:link href="https://taoyan.netlify.app/categories/transposable-elements/index.xml" rel="self" type="application/rss+xml" />
    <description>Transposable Elements</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><copyright>© Tao Yan, 2018-2020</copyright><lastBuildDate>Sun, 15 Mar 2020 16:19:05 +0000</lastBuildDate>
    <image>
      <url>https://taoyan.netlify.app/img/pom-card.png</url>
      <title>Transposable Elements</title>
      <link>https://taoyan.netlify.app/categories/transposable-elements/</link>
    </image>
    
    <item>
      <title>TEsorter:转座子分类</title>
      <link>https://taoyan.netlify.app/post/2020-03-15.tesorter%E8%BD%AC%E5%BA%A7%E5%AD%90%E5%88%86%E7%B1%BB/</link>
      <pubDate>Sun, 15 Mar 2020 16:19:05 +0000</pubDate>
      <guid>https://taoyan.netlify.app/post/2020-03-15.tesorter%E8%BD%AC%E5%BA%A7%E5%AD%90%E5%88%86%E7%B1%BB/</guid>
      <description>&lt;h2 id=&#34;简介&#34;&gt;简介&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;TEsorter&lt;/code&gt;是基于保守蛋白结构域以及
&lt;a href=&#34;http://repeatexplorer.org/?page_id=918&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;REXdb&lt;/a&gt;数据库进行分类。&lt;code&gt;TEsorter&lt;/code&gt;不仅仅可以对&lt;code&gt;LTR-RTs&lt;/code&gt;进行分类，还可以对其它&lt;code&gt;Class Ⅰ&lt;/code&gt;以及&lt;code&gt;Class Ⅱ&lt;/code&gt;等类型的&lt;code&gt;TE&lt;/code&gt;进行分类，只要
&lt;a href=&#34;http://repeatexplorer.org/?page_id=918&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;REXdb&lt;/a&gt;数据库覆盖了的TE都可以分类，具体如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;      --mobile_element                             
          ¦--Class_I                                
          ¦   ¦--SINE                               
          ¦   ¦--LTR                                
          ¦   ¦   ¦--Ty1                            
          ¦   ¦   ¦   °--copia                      
          ¦   ¦   ¦       ¦--Ale                    
          ¦   ¦   ¦       ¦--Alesia                 
          ¦   ¦   ¦       ¦--Angela                 
          ¦   ¦   ¦       ¦--Bianca                 
          ¦   ¦   ¦       ¦--Bryco                  
          ¦   ¦   ¦       ¦--Lyco                   
          ¦   ¦   ¦       ¦--Gymco-III              
          ¦   ¦   ¦       ¦--Gymco-I                
          ¦   ¦   ¦       ¦--Gymco-II               
          ¦   ¦   ¦       ¦--Ikeros                 
          ¦   ¦   ¦       ¦--Ivana                  
          ¦   ¦   ¦       ¦--Gymco-IV               
          ¦   ¦   ¦       ¦--Osser                  
          ¦   ¦   ¦       ¦--SIRE                   
          ¦   ¦   ¦       ¦--TAR                    
          ¦   ¦   ¦       ¦--Tork                   
          ¦   ¦   ¦       °--Ty1-outgroup           
          ¦   ¦   °--Ty3                            
          ¦   ¦       °--gypsy                      
          ¦   ¦           ¦--non-chromovirus        
          ¦   ¦           ¦   ¦--non-chromo-outgroup
          ¦   ¦           ¦   ¦--Phygy              
          ¦   ¦           ¦   ¦--Selgy              
          ¦   ¦           ¦   °--OTA                
          ¦   ¦           ¦       ¦--Athila         
          ¦   ¦           ¦       °--Tat            
          ¦   ¦           ¦           ¦--TatI       
          ¦   ¦           ¦           ¦--TatII      
          ¦   ¦           ¦           ¦--TatIII     
          ¦   ¦           ¦           ¦--Ogre       
          ¦   ¦           ¦           °--Retand     
          ¦   ¦           °--chromovirus            
          ¦   ¦               ¦--Chlamyvir          
          ¦   ¦               ¦--Tcn1               
          ¦   ¦               ¦--chromo-outgroup    
          ¦   ¦               ¦--CRM                
          ¦   ¦               ¦--Galadriel          
          ¦   ¦               ¦--Tekay              
          ¦   ¦               ¦--Reina              
          ¦   ¦               °--chromo-unclass     
          ¦   ¦--pararetrovirus                     
          ¦   ¦--DIRS                               
          ¦   ¦--Penelope                           
          ¦   °--LINE                               
          °--Class_II                               
              ¦--Subclass_1                         
              ¦   °--TIR                            
              ¦       ¦--MITE                       
              ¦       ¦--EnSpm                      
              ¦       ¦   °--CACTA                  
              ¦       ¦--hAT                        
              ¦       ¦--Kolobok                    
              ¦       ¦--Merlin                     
              ¦       ¦--MuDR                       
              ¦       ¦   °--Mutator                
              ¦       ¦--Novosib                    
              ¦       ¦--P                          
              ¦       ¦--PIF                        
              ¦       ¦   °--Harbinger              
              ¦       ¦--PiggyBac                   
              ¦       ¦--Sola1                      
              ¦       ¦--Sola2                      
              ¦       °--Tc1                        
              ¦           °--Mariner                
              °--Subclass_2                         
                  °--Helitron   
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;安装&#34;&gt;安装&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;TEsorter&lt;/code&gt;基于&lt;code&gt;python&lt;/code&gt;开发的，目前有两个版本，
&lt;a href=&#34;https://github.com/zhangrengang/TEsorter&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Python2版本&lt;/a&gt;以及
&lt;a href=&#34;https://github.com/NBISweden/TEsorter&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Python3版本&lt;/a&gt;,
&lt;a href=&#34;https://github.com/NBISweden/TEsorter&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Python3版本&lt;/a&gt;安装起来更友好。直接&lt;code&gt;conda&lt;/code&gt;一键安装(推荐)即可：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;conda install -c bioconda tesorter
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;没有&lt;code&gt;conda&lt;/code&gt;的话也可以按下面方法安装：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;依赖于&lt;code&gt;Python3&lt;/code&gt;环境以及&lt;code&gt;biopython&lt;/code&gt;库&lt;/li&gt;
&lt;li&gt;&lt;code&gt;hmmscan 3.1x or 3.2x&lt;/code&gt;、&lt;code&gt;blast+&lt;/code&gt;,加入环境变量即可&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;最后安装&lt;code&gt;TEsorter&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git clone https://github.com/NBISweden/TEsorter
cd TEsorter
python setup.py install
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;使用&#34;&gt;使用&lt;/h2&gt;
&lt;p&gt;使用很简单：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ TEsorter  -h
usage: TEsorter [-h] [-v] [-db {rexdb,rexdb-plant,rexdb-metazoa,gydb}]
                   [-st {nucl,prot}] [-pre PREFIX] [-fw] [-p PROCESSORS]
                   [-tmp TMP_DIR] [-cov MIN_COVERAGE] [-eval MAX_EVALUE]
                   [-dp2] [-rule PASS2_RULE] [-nolib] [-norc] [-nocln]
                   sequence

positional arguments:
  sequence              input TE sequences in fasta format [required]

optional arguments:
  -h, --help            show this help message and exit
  -v, --version         show program&#39;s version number and exit
  -db {rexdb,rexdb-plant,rexdb-metazoa,gydb}, --hmm-database {rexdb,rexdb-plant,rexdb-metazoa,gydb}
                        the database used [default=rexdb]
  -st {nucl,prot}, --seq-type {nucl,prot}
                        &#39;nucl&#39; for DNA or &#39;prot&#39; for protein [default=nucl]
  -pre PREFIX, --prefix PREFIX
                        output prefix [default=&#39;{-s}.{-db}&#39;]
  -fw, --force-write-hmmscan
                        if False, will use the existed hmmscan outfile and
                        skip hmmscan [default=False]
  -p PROCESSORS, --processors PROCESSORS
                        processors to use [default=4]
  -tmp TMP_DIR, --tmp-dir TMP_DIR
                        directory for temporary files [default=./tmp]
  -cov MIN_COVERAGE, --min-coverage MIN_COVERAGE
                        mininum coverage for protein domains in HMMScan output
                        [default=20]
  -eval MAX_EVALUE, --max-evalue MAX_EVALUE
                        maxinum E-value for protein domains in HMMScan output
                        [default=0.001]
  -dp2, --disable-pass2
                        do not further classify the unclassified sequences
                        [default=False for `nucl`, True for `prot`]
  -rule PASS2_RULE, --pass2-rule PASS2_RULE
                        classifying rule [identity-coverage-length] in pass-2
                        based on simliarity [default=80-80-80]
  -nolib, --no-library  do not generate a library file for RepeatMasker
                        [default=False]
  -norc, --no-reverse   do not reverse complement sequences if they are
                        detected in minus strand [default=False]
  -nocln, --no-cleanup  do not clean up the temporary directory
                        [default=False]
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;建议植物的话就直接使用&lt;code&gt;rexdb-plant&lt;/code&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;结果&#34;&gt;结果&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;rice6.9.5.liban.rexdb.domtbl        HMMScan raw output
rice6.9.5.liban.rexdb.dom.faa       protein sequences of domain, which can be used for phylogenetic analysis.
rice6.9.5.liban.rexdb.dom.tsv       inner domains of TEs/LTR-RTs, which might be used to filter domains based on their scores and coverages.
rice6.9.5.liban.rexdb.dom.gff3      domain annotations in `gff3` format
rice6.9.5.liban.rexdb.cls.tsv       TEs/LTR-RTs classifications
    Column 1: raw id
    Column 2: Order, e.g. LTR
    Column 3: Superfamily, e.g. Copia
    Column 4: Clade, e.g. SIRE
    Column 5: Complete, &amp;quot;yes&amp;quot; means one LTR Copia/Gypsy element with full GAG-POL domains.
    Column 6: Strand, + or - or ?
    Column 7: Domains, e.g. GAG|SIRE PROT|SIRE INT|SIRE RT|SIRE RH|SIRE; `none` for pass-2 classifications
rice6.9.5.liban.rexdb.cls.lib       fasta library for RepeatMasker
rice6.9.5.liban.rexdb.cls.pep       the same sequences as `rice6.9.5.liban.rexdb.dom.faa`, but id is changed with classifications.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;其中以&lt;code&gt;.cls.tsv&lt;/code&gt;结尾的文件里面就有我们需要的分类信息。&lt;/p&gt;
&lt;h2 id=&#34;限制&#34;&gt;限制&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;针对每一个保守结构域，只会产生最佳比对的那一个&lt;/li&gt;
&lt;li&gt;很多&lt;code&gt;TE&lt;/code&gt;无法被分类,可能是数据库不完善、&lt;code&gt;TE&lt;/code&gt;中突变太多，丢失了保守结构域&lt;/li&gt;
&lt;li&gt;很多&lt;code&gt;TE&lt;/code&gt;没有保守结构域，比如非自主性转座子(&lt;code&gt;Non-autonomous TEs&lt;/code&gt;)以及一些不活跃的自主性转座子(&lt;code&gt;un-active autonomous TEs&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;其他&#34;&gt;其他&lt;/h2&gt;
&lt;p&gt;该软件还提供了一些进化分析、序列提取的脚本，有兴趣的可以去
&lt;a href=&#34;https://github.com/zhangrengang/TEsorter&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;主页&lt;/a&gt;浏览。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>构建Consensus sequence</title>
      <link>https://taoyan.netlify.app/post/2020-03-12.%E6%9E%84%E5%BB%BAconsensus-sequence/</link>
      <pubDate>Thu, 12 Mar 2020 16:19:05 +0000</pubDate>
      <guid>https://taoyan.netlify.app/post/2020-03-12.%E6%9E%84%E5%BB%BAconsensus-sequence/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20200321184100.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;简介&#34;&gt;简介&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Consensus sequence&lt;/code&gt;又称为一致性序列、保守序列、共有序列等。维基百科的解释：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In molecular biology and bioinformatics, the consensus sequence (or canonical sequence) 
is the calculated order of most frequent residues, either nucleotide or amino acid, 
found at each position in a sequence alignment.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我个人理解就是通过序列比对在每个位置出现频率最高的碱基或者氨基酸。&lt;/p&gt;
&lt;p&gt;所以如果你的序列比较少，就直接用&lt;code&gt;Bioedit&lt;/code&gt;进行比对，可以导出&lt;code&gt;consensus sequence&lt;/code&gt;。序列比较多的话使用软件批量运行比较好。请教一位老师之后推荐就用&lt;code&gt;RepeatScout&lt;/code&gt;这个软件比较好，简单实用，最主要的是准确性也很高。&lt;/p&gt;
&lt;h2 id=&#34;安装&#34;&gt;安装&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;wget http://bix.ucsd.edu/repeatscout/RepeatScout-1.0.5.tar.gz
tar -xvfz RepeatScout-1.0.5.tar.gz
cd RepeatScout-1.0.5
make
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;用法&#34;&gt;用法&lt;/h2&gt;
&lt;h4 id=&#34;1-create-an-l-mer--1-option-frequency-table-for-a-given-genome-sequence&#34;&gt;1. Create an l-mer (-1 option) frequency table for a given genome sequence&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;build_lmer_table -sequence input_genome_sequence.fas -freq output_lmer.frequency
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;l值可以使用默认的，也可以自行设置，具体选择如下：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The l value used in the build_lmer_table program is set to ceil (log_4 (L) +1) by default. Here, the ceil function is a function to round up a real number having a decimal point to an integer, log_4 is a logarithm of base 4, L is a length (bp) of a genomic sequence.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;You can change the l-mer value using the -l parameter. At this time, when using the RepeatScout program, the same l-mer must be applied. RepeatScout also takes a value with the -l parameter.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;2-find-repetitive-elements-from-frequency-table-and-genome-sequence-information-and-store-them-in-fasta-format-including-simple-repeats-tandem-repeats&#34;&gt;2. Find repetitive elements from frequency table and genome sequence information and store them in fasta format (including simple repeats, tandem repeats).&lt;/h4&gt;
&lt;p&gt;这一步&lt;code&gt;RepeatScout&lt;/code&gt;构建&lt;code&gt;Consensus sequence&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;RepeatScout -sequence input_genome_sequence.fas -output output_repeats.fas -freq output_lmer.frequency
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;最后生成的output_repeats.fas里面就有我们需要的&lt;code&gt;Consensus sequence&lt;/code&gt;，但是很多时候会生成多条&lt;code&gt;Consensus sequence&lt;/code&gt;，这个时候可以利用&lt;code&gt;cd-hit-est&lt;/code&gt;去除冗余序列，一般是可以获取到唯一的一条&lt;code&gt;Consensus sequence&lt;/code&gt;，如果经去冗余之后还是多条序列的话，可以考虑手动比对，看是否存在部分重叠等情况。当然如果提供的序列本来就不存在唯一的&lt;code&gt;Consensus sequence&lt;/code&gt;，那么最后肯定无法生成唯一的&lt;code&gt;Consensus sequence&lt;/code&gt;。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>EDTA:转座子注释</title>
      <link>https://taoyan.netlify.app/post/2020-03-02.edta-%E8%BD%AC%E5%BA%A7%E5%AD%90%E6%B3%A8%E9%87%8A/</link>
      <pubDate>Mon, 02 Mar 2020 16:19:05 +0000</pubDate>
      <guid>https://taoyan.netlify.app/post/2020-03-02.edta-%E8%BD%AC%E5%BA%A7%E5%AD%90%E6%B3%A8%E9%87%8A/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20200317163718.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;简介&#34;&gt;简介&lt;/h2&gt;
&lt;p&gt;转座子注释目前有非常多的软件，而EDTA(The Extensive de novo TE Annotator)整合了大部分目前常用的转座子注释软件，值得注意的是EDTA是全基因组从头注释。EDTA最大的好处就是简单实用，而且经过大量的改进，目前在安装、运行以及结果解释等方面十分完善。&lt;/p&gt;
&lt;h2 id=&#34;流程&#34;&gt;流程&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20200317163718.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;具体可以参考EDTA的
&lt;a href=&#34;https://github.com/oushujun/EDTA&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;GitHub主页&lt;/a&gt;以及发表在Genome Biology上的
&lt;a href=&#34;https://genomebiology.biomedcentral.com/articles/10.1186/s13059-019-1905-y&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;文章&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;安装&#34;&gt;安装&lt;/h2&gt;
&lt;p&gt;EDTA提供了四种安装方式：&lt;/p&gt;
&lt;h3 id=&#34;quick-installation-using-conda-linux64&#34;&gt;Quick installation using conda (Linux64)&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;conda install -c bioconda -c conda-forge edta
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;quick-installation-using-singularity-good-for-hpc-users&#34;&gt;Quick installation using Singularity (good for HPC users)&lt;/h3&gt;
&lt;p&gt;Installation:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;singularity build --sandbox EDTA.sif docker://kapeel/edta
Usage:

singularity exec {path}/EDTA.sif /EDTA/EDTA.pl --genome genome.fa [other parameters]

{path} is the path you build the EDTA singularity image
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;quick-installation-using-docker-good-for-rootmac-users&#34;&gt;Quick installation using Docker (good for root/Mac users)&lt;/h3&gt;
&lt;p&gt;Installation:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;docker pull kapeel/edta
Usage:

docker run -v $PWD:/in -w /in kapeel/edta --genome genome.fa [other parameters]
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;step-by-step-installation-using-conda&#34;&gt;Step by step installation using conda&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;conda create -n EDTA
conda activate EDTA
conda config --env --add channels anaconda --add channels conda-forge --add channels bioconda
conda install -n EDTA -y cd-hit repeatmodeler muscle mdust blast openjdk perl perl-text-soundex multiprocess regex tensorflow=1.14.0 keras=2.2.4 scikit-learn=0.19.0 biopython pandas glob2 python=3.6 tesorter genericrepeatfinder genometools-genometools ltr_retriever ltr_finder numpy=1.16.4
git clone https://github.com/oushujun/EDTA
./EDTA/EDTA.pl
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;文件&#34;&gt;文件&lt;/h2&gt;
&lt;p&gt;只需要提供基因组文件就行了，但是需要注意的是序列名称不能超过15个字符，所以简单点好不易出错。如果你研究的物种还有以下文件的话也可以提供，可以提高注释的准确性：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;所研究物种或者亲缘关系比较近的物种的CDS文件（需要剔除掉内含子以及UTRs）&lt;/li&gt;
&lt;li&gt;基因坐标信息&lt;/li&gt;
&lt;li&gt;可信度非常高的TE库，无需全基因组完整的，部分零散的也行，但是需要注意的是可信度必须是比较高的，不然就不要提供了，免得适得其反&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;用法&#34;&gt;用法&lt;/h2&gt;
&lt;p&gt;用法非常简单，毕竟整合了大部分主流软件且封装到一起&lt;/p&gt;
&lt;h3 id=&#34;一步到位from-head-to-toe&#34;&gt;一步到位From head to toe&lt;/h3&gt;
&lt;p&gt;You got a genome and you want to get a high-quality TE annotation:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;perl EDTA.pl [options]
  --genome	[File]	The genome FASTA
  --species [Rice|Maize|others]	Specify the species for identification of TIR candidates. Default: others
  --step	[all|filter|final|anno] Specify which steps you want to run EDTA.
			all: run the entire pipeline (default)
			filter: start from raw TEs to the end.
			final: start from filtered TEs to finalizing the run.
			anno: perform whole-genome annotation/analysis after TE library construction.
  --overwrite	[0|1]	If previous results are found, decide to overwrite (1, rerun) or not (0, default).
  --cds	[File]	Provide a FASTA file containing the coding sequence (no introns, UTRs, nor TEs) of this genome or its close relative.
  --curatedlib	[file]	Provided a curated library to keep consistant naming and classification for known TEs.
			All TEs in this file will be trusted 100%, so please ONLY provide MANUALLY CURATED ones here.
			This option is not mandatory. It&#39;s totally OK if no file is provided (default).
  --sensitive	[0|1]	Use RepeatModeler to identify remaining TEs (1) or not (0, default).
			This step is very slow and MAY help to recover some TEs.
  --anno	[0|1]	Perform (1) or not perform (0, default) whole-genome TE annotation after TE library construction.
  --rmout	[File]	Provide your own homology-based TE annotation instead of using the EDTA library for masking. File is in RepeatMasker .out format. This file will be merged with the structural-based TE annotation. (-anno 1 required). Default: use the EDTA library for annotation.
  --evaluate	[0|1]	Evaluate (1) classification consistency of the TE annotation. (-anno 1 required). Default: 0.
			This step is slow and does not affect the annotation result.
  --exclude	[File]	Exclude bed format regions from TE annotation. Default: undef. (-anno 1 required).
  --threads|-t	[int]	Number of theads to run this script (default: 4)
  --help|-h	Display this help info
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;参数说明非常详细，用起来十分清爽&lt;/p&gt;
&lt;h3 id=&#34;分类注释&#34;&gt;分类注释&lt;/h3&gt;
&lt;p&gt;也可以指定需要注释的转座子类型：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;perl EDTA_raw.pl [options]
 --genome	[File]	The genome FASTA
 --species [Rice|Maize|others]	Specify the species for identification of TIR candidates. Default: others
 --type	[ltr|tir|helitron|all]	Specify which type of raw TE candidates you want to get. Default: all
 --overwrite	[0|1]	If previous results are found, decide to overwrite (1, rerun) or not (0, default).
 --threads|-t	[int]	Number of theads to run this script
 --help|-h	Display this help info
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;另外还支持断点运行，中间软件运行意外终止的话，可以从终止那一步继续运行&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Finish the rest of the EDTA analysis (specify -overwrite 0 and it will automatically pick up existing results in the work folder)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;perl EDTA.pl --overwrite 0 [options]
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;结果&#34;&gt;结果&lt;/h2&gt;
&lt;p&gt;返回的结果非常多，并且分门别类帮你整理好，具体我就不讲了，毕竟文档讲得太详细了。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Nature Reviews Genetics | 测序时代的基因组转座子</title>
      <link>https://taoyan.netlify.app/post/2019-11-25.%E6%B5%8B%E5%BA%8F%E6%97%B6%E4%BB%A3%E7%9A%84%E5%9F%BA%E5%9B%A0%E7%BB%84%E8%BD%AC%E5%BA%A7%E5%AD%90/</link>
      <pubDate>Mon, 25 Nov 2019 16:19:05 +0000</pubDate>
      <guid>https://taoyan.netlify.app/post/2019-11-25.%E6%B5%8B%E5%BA%8F%E6%97%B6%E4%BB%A3%E7%9A%84%E5%9F%BA%E5%9B%A0%E7%BB%84%E8%BD%AC%E5%BA%A7%E5%AD%90/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20191127103914.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;简介&#34;&gt;简介&lt;/h2&gt;
&lt;p&gt;许多物种的基因组大部分是来自于转座子(Transposable elements, TEs)。此外，通过各种自我复制机制，TEs在大多数物种基因组中持续增殖。TEs会影响调控、转录以及新蛋白形成进而与性状比如疾病相关联。尽管TE表现出了显著的影响，但是很多基因组研究还是将它剔除在外，这主要是由于它具有高度的序列重复性，导致研究变得十分复杂。幸运的是随着大量的方法以及计算机软件的开发，TE的研究逐渐深入。本综述总结了TE研究的相关计算工具并着重指出了未来的TE研究存在的挑战与空白。对TE进行基因组上全面的分析不仅仅是“掩盖”这些重复序列(This Review presents a summary of computational resources for TEs and highlights some of the challenges and remaining gaps to perform comprehensive genomic analyses that do not simply &amp;ldquo;mask&amp;rdquo; repeats)。&lt;/p&gt;
&lt;h2 id=&#34;转座子&#34;&gt;转座子&lt;/h2&gt;
&lt;p&gt;转座子首先由&lt;strong&gt;Barbara McClintock&lt;/strong&gt;于1948年在玉米中发现，之后在所有动物和植物以及各种真核生物中陆续发现。转座子可以通过不同的机制从基因组的一个位置&amp;quot;跳跃&amp;quot;到另一个位置，这种&amp;quot;跳跃&amp;quot;可以发生在同一条染色体内，也可以发生在不同染色体间。转座是转座子的标志性特征，转座子从供给位点(Donor site)整合到目标位点(Target site)被称为一个完整的转座过程。转座子可以通过两种机制进行转座：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;复制后粘贴(Copy-and-paste)&lt;/li&gt;
&lt;li&gt;剪切后粘贴(Cut-and-paste)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;复制后粘贴&#34;&gt;复制后粘贴&lt;/h3&gt;
&lt;p&gt;首先RNA聚合酶Ⅱ(RNA polymerase Ⅱ)将转座子转录成mRNA，再由逆转录酶逆转录形成一个自身DNA(cDNA)拷贝，最后通过整合酶(Integrase)将拷贝整合到目标位点。这一过程RNA起到了一个媒介的作用，所以这一类转座子称为RNA类转座子，也被称为Ⅰ型转座子或逆转录转座子(Retrotransposon)。&lt;/p&gt;
&lt;h3 id=&#34;剪切后粘贴&#34;&gt;剪切后粘贴&lt;/h3&gt;
&lt;p&gt;转座子不以RNA为媒介，直接被转座酶(Transposase)从供给位点脱离出来通过整合酶整合到目标位点。有一个特例是“滚环”机制，通过Y2转座酶和整合酶实现链入侵，随后通过链置换(Strand displacement)，DNA复制，异源双链形成将转座子整合到目标位点，这些转座子在转座过程中都不需要RNA为媒介，所以这些转座子被称为DNA转座子(DNA transposon)或Ⅱ型转座子。&lt;/p&gt;
&lt;h3 id=&#34;helitrons转座子&#34;&gt;Helitrons转座子&lt;/h3&gt;
&lt;p&gt;Helitrons 转座子是近年来发现的一种新型 DNA 转座子（上面提到的“滚环”机制），最初是利用基于重复序列的计算方法在拟南芥基因组中鉴定出来的。后来发现，大多数植物和许多动物基因组中都携带 Helitrons 转座子。Helitrons 转座子具有典型的 5&amp;rsquo;TC 以及 3&amp;rsquo;CTRR（R为A或G）末端，并在3&amp;rsquo;末端上游约 15~20bp 处有一个茎环结构，是转座子的终止信号。Helitrons 转座子转座后，通常插入 AT-rich 区域的 AT 靶位点。和反转座子和转座子不同，Helitrons 通过滚环（rolling circle）的方式进行转座。并且，在滚环复制的转座过程中经常捕获和携带基因片段，可导致基因拷贝数的变化，也会在一定程度上促进基因组的进化。&lt;/p&gt;
&lt;h3 id=&#34;maverick转座子&#34;&gt;Maverick转座子&lt;/h3&gt;
&lt;p&gt;Maverick类型的重复序列一般较大，可达到10-20Kb，两端含有较长的TIR序列，在除植物之外的真和生物中广泛存在。其编码的蛋白可达到11个，但数目和顺序有所不同，有些蛋白与DNA病毒有一定的同源性。这些蛋白中的DNA聚合酶B和整合酶（c-int type）与反转录转座子中的相关蛋白类似，但同样不含有逆转座酶。&lt;/p&gt;
&lt;p&gt;这几类转座子具体转座机制如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20191129114532.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;TEs具体分类如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20191203113721.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;te分类及数据库&#34;&gt;TE分类及数据库&lt;/h2&gt;
&lt;p&gt;TE分为两大类，有关TE的信息被整合成三类的数据库：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;以TE为中心的数据库(TE-centric):每个TE家族的保守序列(consensus sequence)&lt;/li&gt;
&lt;li&gt;以基因组为中心的数据库(genome-centric):特定参考基因组的TE序列&lt;/li&gt;
&lt;li&gt;以多态性为中心的数据库(polymorphism-centric):基于参考基因组TE多态性插入序列&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;具体情况如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20191203161725.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;挑战及缺陷&#34;&gt;挑战及缺陷&lt;/h2&gt;
&lt;p&gt;关于TE数据库主要面临两方面的缺陷：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;物种特异性的TE数据库的建立是很有必要的，数据库之间TE的冗余需要降低以增加内聚性&lt;/li&gt;
&lt;li&gt;第二个就是人类TE研究中有必要整合TE多态性插入的资源供后续研究&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;te构建与注释的手段&#34;&gt;TE构建与注释的手段&lt;/h2&gt;
&lt;p&gt;转座子序列库的构建方法主要分为三种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;从头预测&lt;/li&gt;
&lt;li&gt;同源预测&lt;/li&gt;
&lt;li&gt;结构预测&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;具体的方法以及软件如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20191203163312.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;从上表可以看出，实际上就是要么基于数据库要么从头预测。具体注释策略图示如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20191203163746.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;用来分析TEs的计算机工具非常多，如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20191203170109.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;基于数据库注释&#34;&gt;基于数据库注释&lt;/h3&gt;
&lt;p&gt;这一策略的核心思想是在全基因组范围内对不同TE家族的保守序列以及功能结构域进行检索，RepeatMasker是最常用的工具，是当前TE研究的金标准，基于Repbase以及Dfam数据库。&lt;/p&gt;
&lt;h3 id=&#34;基于已组装基因组的从头注释&#34;&gt;基于已组装基因组的从头注释&lt;/h3&gt;
&lt;p&gt;这种方法主要是基于已组装的基因组，可以鉴定一些基于数据库注释缺失的TEs，人类基因组TE通过这种方法从头注释可以鉴定大约多10%的TE。这一方法虽然存在假阳性，但是可以发现新的TE家族以及事件。&lt;/p&gt;
&lt;h3 id=&#34;基于原始序列的从头注释&#34;&gt;基于原始序列的从头注释&lt;/h3&gt;
&lt;p&gt;这一策略主要充分利用大量的TE序列以及低深度的测序数据去组装TE以及其它重复序列。&lt;/p&gt;
&lt;h3 id=&#34;挑战以及缺陷&#34;&gt;挑战以及缺陷&lt;/h3&gt;
&lt;p&gt;目前TE注释的主流是利用多种策略进行检索并整合到一起，组成比较完整的数据库。比如人类基因组TE数据通过不同策略以及工具注释的结果差异是很大的：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20191203165812.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;虽然从头注释可以鉴定新的重复序列家族以及新的TE事件，但是引入的假阳性也更高。基于原始序列注释TE的方法只能鉴定少量的TE，但是可以在缺乏组装基因组的情况下注释TE。新的系统性的注释工具对于TE的注释来说极其重要。&lt;/p&gt;
&lt;h2 id=&#34;te多态性检测&#34;&gt;TE多态性检测&lt;/h2&gt;
&lt;p&gt;有了参考基因组、完整的转座子注释文件以及群体就可以进行群体转座子多态性插入的检测，跟SNP一样，TE多态性标记可以跟表型进行关联。目前有大量的软件被开发出来进行TE多态性检测：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20191203173422.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;基于短读长序列检测生殖细胞系te多态性&#34;&gt;基于短读长序列检测生殖细胞系TE多态性&lt;/h3&gt;
&lt;p&gt;大多数的TE检测流程的输入数据都是NGS测序数据。NGS的读长一般在100-250bp，这对于从属于重复序列的转座子来说，从短读长的reads鉴定TE是一种具有挑战性的工作。目前针对短读长进行TE多态性检测的方法主要有三种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用split-read (SR)信息&lt;/li&gt;
&lt;li&gt;依赖不一致的读长对(discordant read pai , DRP)比对&lt;/li&gt;
&lt;li&gt;基于TE特定motif的识别&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20191203183128.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;te的特征及影响&#34;&gt;TE的特征及影响&lt;/h2&gt;
&lt;p&gt;TE的插入会引入新的基因或转录本、调控基因表达、导致基因组不稳定以及活跃的置换。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/img/20191203190952.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;预测te衍生或者破坏的基因与转录本&#34;&gt;预测TE衍生或者破坏的基因与转录本&lt;/h3&gt;
&lt;p&gt;注释在基因区域的TE在很多数据库中都有检测到。&lt;/p&gt;
&lt;h3 id=&#34;预测te对基因调控的影响&#34;&gt;预测TE对基因调控的影响&lt;/h3&gt;
&lt;h3 id=&#34;重复区域结构变异的检测&#34;&gt;重复区域结构变异的检测&lt;/h3&gt;
&lt;p&gt;后续还有部分内容暂时这里不讲了，有兴趣的话可以下载
&lt;a href=&#34;https://www.nature.com/articles/s41576-018-0050-x.pdf&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;原文&lt;/a&gt;细读。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
