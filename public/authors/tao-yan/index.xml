<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tao Yan</title>
    <link>https://taoyan.netlify.app/authors/tao-yan/</link>
      <atom:link href="https://taoyan.netlify.app/authors/tao-yan/index.xml" rel="self" type="application/rss+xml" />
    <description>Tao Yan</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><copyright>Â© Tao Yan, 2018-2020</copyright><lastBuildDate>Tue, 29 Sep 2020 00:00:00 +0000</lastBuildDate>
    <image>
      <url>https://taoyan.netlify.app/img/pom-card.png</url>
      <title>Tao Yan</title>
      <link>https://taoyan.netlify.app/authors/tao-yan/</link>
    </image>
    
    <item>
      <title>BnaSNPDB: An interactive web portal for the efficient retrieval and analysis of SNPs among 1,007 rapeseed accessions</title>
      <link>https://taoyan.netlify.app/publication/2020-bnasnpdb/</link>
      <pubDate>Tue, 29 Sep 2020 00:00:00 +0000</pubDate>
      <guid>https://taoyan.netlify.app/publication/2020-bnasnpdb/</guid>
      <description></description>
    </item>
    
    <item>
      <title>BnaGWAS:GWAS platform of rapeseed</title>
      <link>https://taoyan.netlify.app/project/bnagwas/</link>
      <pubDate>Mon, 14 Sep 2020 00:00:00 +0000</pubDate>
      <guid>https://taoyan.netlify.app/project/bnagwas/</guid>
      <description>&lt;h1 id=&#34;bnagwas&#34;&gt;BnaGWAS&lt;/h1&gt;
&lt;h1 id=&#34;font-facetime-colorgreen-size6introductionfont&#34;&gt;&lt;font face=&#34;Time&#34; color=green size=6&gt;Introduction&lt;/font&gt;&lt;/h1&gt;
&lt;p&gt;&lt;font face=&#34;Time&#34; size=4&gt;Rapeseed (&lt;em&gt;&lt;strong&gt;Brassica napus&lt;/strong&gt;&lt;/em&gt; L.) is an important source of edible oil and protein-rich livestock feed in the world. &lt;em&gt;&lt;strong&gt;B. napus&lt;/strong&gt;&lt;/em&gt; (AACC) was ancestrally originated from an interspecific hybridization between two diploid progenitors, &lt;em&gt;&lt;strong&gt;B. rapa&lt;/strong&gt;&lt;/em&gt; (AA) (n = 10) and &lt;em&gt;&lt;strong&gt;B. oleracea&lt;/strong&gt;&lt;/em&gt; (CC) (n = 9), less than 7500 years ago. In our previous study, we resequenced a world-wide collection of &lt;code&gt;1007&lt;/code&gt; &lt;em&gt;&lt;strong&gt;B. napus&lt;/strong&gt;&lt;/em&gt; gerplasm accessions, including 658 winter types, 145 semi-winter types and 188 spring types, from 39 countries (&lt;a href=&#34;https://www.sciencedirect.com/science/article/pii/S1674205218303435?via%3Dihub&#34; target=&#34;_blank&#34;&gt;&lt;strong&gt;Wu et al., 2019&lt;/strong&gt;&lt;/a&gt;). This app is deployed at &lt;a href=&#34;https://bnapus-zju.com/gwas&#34;&gt;https://bnapus-zju.com/gwas&lt;/a&gt; for online use.&lt;/p&gt;





  
  











&lt;figure &gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://taoyan.netlify.app/project/bnagwas/Bna_map_hub3f6a0ac4e0aeeefc0734ce61f10a172_344228_2000x2000_fit_lanczos_2.png&#34; &gt;


  &lt;img data-src=&#34;https://taoyan.netlify.app/project/bnagwas/Bna_map_hub3f6a0ac4e0aeeefc0734ce61f10a172_344228_2000x2000_fit_lanczos_2.png&#34; class=&#34;lazyload&#34; alt=&#34;&#34; width=&#34;3172&#34; height=&#34;1296&#34;&gt;
&lt;/a&gt;



&lt;/figure&gt;

&lt;p&gt;In genetics, a genome-wide association study (&lt;strong&gt;GWAS&lt;/strong&gt;), also known as whole genome association study (WGAS), is an observational study of a genome-wide set of genetic variants in different individuals to see if any variant is associated with a trait. &lt;strong&gt;GWAS&lt;/strong&gt; typically focus on associations between single-nucleotide polymorphisms (&lt;strong&gt;SNPs&lt;/strong&gt;) and traits like major agronomic traits.&lt;/p&gt;
&lt;p&gt;In order to make better use of this huge &lt;em&gt;&lt;strong&gt;B. napus&lt;/strong&gt;&lt;/em&gt; gerplasm accessions, we develop this interactive application (
&lt;a href=&#34;https://bnapus-zju.com/gwas&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;BnaGWAS&lt;/strong&gt;&lt;/a&gt;) in &lt;a href=&#34;https://www.r-project.org/&#34; target=&#34;_blank&#34;&gt;&lt;strong&gt;R&lt;/strong&gt;&lt;/a&gt; with &lt;a href=&#34;https://shiny.rstudio.com/&#34; target=&#34;_blank&#34;&gt;&lt;strong&gt;&lt;code&gt;Shiny&lt;/code&gt;&lt;/strong&gt;&lt;/a&gt;. This aaplication can conduct &lt;strong&gt;GWAS&lt;/strong&gt;, visualization of &lt;strong&gt;GWAS&lt;/strong&gt; results (Manhattan plot and QQ plot), extraction of significant genes and annotation of genes&lt;/font&gt;.&lt;/p&gt;
&lt;h1 id=&#34;font-facetime-colorgreen-size6data-inputfont&#34;&gt;&lt;font face=&#34;Time&#34; color=green size=6&gt;Data input&lt;/font&gt;&lt;/h1&gt;
&lt;h2 id=&#34;font-colorgreen-size5-facetimephenotype-data-txtfont&#34;&gt;&lt;font color=green size=5 face=&#34;Time&#34;&gt;phenotype data (.txt)&lt;/font&gt;&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;&lt;font color=red size=4 face=&#34;Time&#34;&gt; Noted: Your Samples Uploaded MUST Be The 300 Core Collection Samples Used Here ! So If Some Samples Are Not In Your LIST, You Need Add Them In Your List, And Set The Value NA. If Some Samples In Your List Are Not In The 300 Core Collection Samples Here, JUST REMOVE THEM!&lt;/font&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;font color=green size=4 face=&#34;Time&#34;&gt;I highly recommended first download the example of the expected input phenotype dataset below, and then replace the phenotype values with you own data&lt;/font&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;font size=4 face=&#34;Time&#34;&gt;You just need upload your phenotype data to run &lt;strong&gt;GWAS&lt;/strong&gt;. Here we just use the &lt;strong&gt;&lt;code&gt;300&lt;/code&gt;&lt;/strong&gt; core collection gerplasm which represent the most of genetic resources of 1000 &lt;em&gt;&lt;strong&gt;B. napus&lt;/strong&gt;&lt;/em&gt; gerplasm accessions. an example of the expected input data format is present as below:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;R4157&lt;/td&gt;
&lt;td&gt;0.859791123&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;R4158&lt;/td&gt;
&lt;td&gt;0.87369142&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;R4163&lt;/td&gt;
&lt;td&gt;0.842593709&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;R4168&lt;/td&gt;
&lt;td&gt;0.884782609&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;R4171&lt;/td&gt;
&lt;td&gt;NA&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;R4176&lt;/td&gt;
&lt;td&gt;0.885619807&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;R4177&lt;/td&gt;
&lt;td&gt;0.885884455&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;R4179&lt;/td&gt;
&lt;td&gt;0.879374612&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;R4180&lt;/td&gt;
&lt;td&gt;0.878567797&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;R4182&lt;/td&gt;
&lt;td&gt;0.868825911&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&amp;hellip;&lt;/td&gt;
&lt;td&gt;&amp;hellip;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Where, column one correspond to samples, column two correspond to phenotype values.&lt;/p&gt;
&lt;p&gt;An example of the expected input phenotype dataset can be accessible &lt;a href=&#34;https://raw.githubusercontent.com/YTLogos/pic_link/master/sample_phenotype.txt&#34; target=&#34;_blank&#34;&gt; &lt;strong&gt;here&lt;/strong&gt;&lt;/a&gt;.&lt;/font&gt;&lt;/p&gt;
&lt;h2 id=&#34;font-colorgreen-szie5-facetimeother-parametersfont&#34;&gt;&lt;font color=green szie=5 face=&#34;Time&#34;&gt;Other parameters&lt;/font&gt;&lt;/h2&gt;
&lt;p&gt;&lt;font size=4 face=&#34;Time&#34;&gt;Next you need enter your trait name (&lt;code&gt;recommended&lt;/code&gt;) (default: Bna_trait). Now just support the &lt;a href=&#34;https://genome.sph.umich.edu/wiki/EMMAX&#34; target=&#34;_blank&#34;&gt;&lt;strong&gt;EMMAX&lt;/strong&gt;&lt;/a&gt; model. After all the prepared works are ready, then clink &lt;strong&gt;Run Analysis&lt;/strong&gt; to start GWAS.&lt;/font&gt;&lt;/p&gt;
&lt;h1 id=&#34;font-colorgreen-size6-facetimevisualizationfont&#34;&gt;&lt;font color=green size=6 face=&#34;Time&#34;&gt;Visualization&lt;/font&gt;&lt;/h1&gt;
&lt;p&gt;&lt;font size=4 face=&#34;Time&#34;&gt;For the &lt;code&gt;Visualization&lt;/code&gt; section in this App, it is aiming to visualize the Manhattan plot and QQ plot. You can choose the alternate colors for alternate chromosomes and p-value threshold (default: p-value=5).&lt;/font&gt;&lt;/p&gt;





  
  











&lt;figure &gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://taoyan.netlify.app/project/bnagwas/manhattan_hude9f1049ed713f989ef3867571ae7565_369957_2000x2000_fit_lanczos_2.png&#34; &gt;


  &lt;img data-src=&#34;https://taoyan.netlify.app/project/bnagwas/manhattan_hude9f1049ed713f989ef3867571ae7565_369957_2000x2000_fit_lanczos_2.png&#34; class=&#34;lazyload&#34; alt=&#34;&#34; width=&#34;4500&#34; height=&#34;2100&#34;&gt;
&lt;/a&gt;



&lt;/figure&gt;






  
  











&lt;figure &gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://taoyan.netlify.app/project/bnagwas/QQ_hu7e99ad80c35574ded681b9ec03196361_43799_2000x2000_fit_lanczos_2.png&#34; &gt;


  &lt;img data-src=&#34;https://taoyan.netlify.app/project/bnagwas/QQ_hu7e99ad80c35574ded681b9ec03196361_43799_2000x2000_fit_lanczos_2.png&#34; class=&#34;lazyload&#34; alt=&#34;&#34; width=&#34;2100&#34; height=&#34;2100&#34;&gt;
&lt;/a&gt;



&lt;/figure&gt;

&lt;h1 id=&#34;font-colorgreen-size6-facetimeextractionfont&#34;&gt;&lt;font color=green size=6 face=&#34;Time&#34;&gt;Extraction&lt;/font&gt;&lt;/h1&gt;
&lt;p&gt;&lt;font size=4 face=&#34;Time&#34;&gt;The extraction of significant genes is based on the significant p-value of SNPs. So here you need choose the p-value threshold and the distance up/down-stream of SNPs (&lt;code&gt;recommended&lt;/code&gt;) (default: 75kb).&lt;/font&gt;&lt;/p&gt;
&lt;h1 id=&#34;font-colorgreen-size6-facetimeannotationfont&#34;&gt;&lt;font color=green size=6 face=&#34;Time&#34;&gt;Annotation&lt;/font&gt;&lt;/h1&gt;
&lt;p&gt;&lt;font size=4 face=&#34;Time&#34;&gt;This section is designed for gene annotation based on different databases (&lt;code&gt;eggNOG&lt;/code&gt;, &lt;code&gt;GO&lt;/code&gt;, &lt;code&gt;KEGG&lt;/code&gt;, &lt;code&gt;NR&lt;/code&gt;, etc.).&lt;/font&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>BnaSNPDB:SNP Database of Brassica napus L.</title>
      <link>https://taoyan.netlify.app/project/bnasnpdb/</link>
      <pubDate>Mon, 14 Sep 2020 00:00:00 +0000</pubDate>
      <guid>https://taoyan.netlify.app/project/bnasnpdb/</guid>
      <description>&lt;h2 id=&#34;overview&#34;&gt;Overview&lt;/h2&gt;
&lt;p&gt;The SNP database of &lt;em&gt;Brassica napus&lt;/em&gt; (&lt;strong&gt;BnaSNPDB&lt;/strong&gt;) is an interactive web portal that provides multiple analysis modules to visualize and explore SNPs among 1007 rapeseed germplasm accessions based on the data reported by previous research (
&lt;a href=&#34;http://rapeseed.zju.edu.cn/pdf/mp.pdf&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Wu et al., 2019&lt;/a&gt;). The app is deployed at &lt;a href=&#34;https://bnapus-zju.com/bnasnpdb&#34;&gt;https://bnapus-zju.com/bnasnpdb&lt;/a&gt; and &lt;a href=&#34;http://rapeseed.zju.edu.cn&#34;&gt;http://rapeseed.zju.edu.cn&lt;/a&gt;:3838/bnasnpdb for online use.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;BnaSNPDB&lt;/strong&gt; is idle until you activate it by accessing the 
&lt;a href=&#34;https://bnapus-zju.com/bnasnpdb&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;URL&lt;/a&gt;. So it may take some time to load for the first time. Once it was activated, &lt;strong&gt;BnaSNPDB&lt;/strong&gt; could be used smoothly and easily.&lt;/p&gt;
&lt;p&gt;The portal is built entirely in &lt;strong&gt;R&lt;/strong&gt; and &lt;strong&gt;Shiny&lt;/strong&gt; using the &lt;strong&gt;RStudio&lt;/strong&gt; development environment.&lt;/p&gt;
&lt;h2 id=&#34;install&#34;&gt;Install&lt;/h2&gt;
&lt;h3 id=&#34;requirements&#34;&gt;Requirements&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;R: &lt;a href=&#34;https://www.r-project.org/&#34;&gt;https://www.r-project.org/&lt;/a&gt; v4.0.0+&lt;/li&gt;
&lt;li&gt;RStudio: &lt;a href=&#34;https://rstudio.com/products/rstudio/download&#34;&gt;https://rstudio.com/products/rstudio/download&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Shiny Server: &lt;a href=&#34;https://rstudio.com/products/shiny/download-server&#34;&gt;https://rstudio.com/products/shiny/download-server&lt;/a&gt; (only required for deploying &lt;strong&gt;BnaSNPDB&lt;/strong&gt; on web linux server)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;initialize-app&#34;&gt;Initialize app&lt;/h3&gt;
&lt;h4 id=&#34;to-run-the-app-locally&#34;&gt;To run the app locally:&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;Clone this repository&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;git clone https://github.com/YTLogos/BnaSNPDB.git
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;The repository is large so it may need some time to finish it.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;
&lt;p&gt;Open &lt;code&gt;BnaSNPDB.Rproj&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Install packages. In the RStudio console, run:&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;# try an http CRAN (Bioc) mirror if https CRAN (Bioc) mirror doesn&#39;t work
# First install Bioconductor
if (!requireNamespace(&amp;quot;BiocManager&amp;quot;, quietly = TRUE))
    install.packages(&amp;quot;BiocManager&amp;quot;)
BiocManager::install(version = &amp;quot;3.11&amp;quot;)

BiocManager::install(&amp;quot;shiny&amp;quot;)
BiocManager::install(&amp;quot;ggplot2&amp;quot;)
BiocManager::install(&amp;quot;stringr&amp;quot;)
BiocManager::install(&amp;quot;dplyr&amp;quot;)
BiocManager::install(&amp;quot;tidyr&amp;quot;)
BiocManager::install(&amp;quot;forcats&amp;quot;)
BiocManager::install(&amp;quot;patchwork&amp;quot;)
BiocManager::install(&amp;quot;glue&amp;quot;)
BiocManager::install(&amp;quot;ggpubr&amp;quot;)
BiocManager::install(&amp;quot;writexl&amp;quot;)
BiocManager::install(&amp;quot;snpStats&amp;quot;)
BiocManager::install(&amp;quot;IRanges&amp;quot;)
BiocManager::install(&amp;quot;LDheatmap&amp;quot;)
BiocManager::install(&amp;quot;ape&amp;quot;)
BiocManager::install(&amp;quot;pegas&amp;quot;)
BiocManager::install(&amp;quot;gridExtra&amp;quot;)
BiocManager::install(&amp;quot;grid&amp;quot;)
BiocManager::install(&amp;quot;ggtree&amp;quot;)
BiocManager::install(&amp;quot;shinycssloaders&amp;quot;)
BiocManager::install(&amp;quot;shinydashboard&amp;quot;)
BiocManager::install(&amp;quot;shinydisconnect&amp;quot;)
BiocManager::install(&amp;quot;shinyWidgets&amp;quot;)
BiocManager::install(&amp;quot;gggenes&amp;quot;)
BiocManager::install(&amp;quot;DT&amp;quot;)
BiocManager::install(&amp;quot;shinythemes&amp;quot;)
BiocManager::install(&amp;quot;NAM&amp;quot;)
BiocManager::install(&amp;quot;adegenet&amp;quot;)

if (require(devtools)) install.packages(&amp;quot;devtools&amp;quot;)#if not already installed
devtools::install_github(&amp;quot;AnalytixWare/ShinySky&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;This may take some time to complete - walk away from your computer, rest your eyes, and catch up on those stretching exercises you are meant to be doing :)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;Start tha app by running&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;shiny::runApp(launch.browser = TRUE)
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;deploy-bnasnpdb-on-web-linux-server&#34;&gt;Deploy BnaSNPDB on web Linux server&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;Clone/Upload this repository into /srv/shiny-server&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;$ cd /srv/shiny-server
git clone https://github.com/YTLogos/BnaSNPDB.git
# Or clone it locally and upload the directory to /srv/shiny-server using scp or other tools 
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;Configure Shiny Server (/etc/shiny-server/shiny-server.conf)&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;# Instruct Shiny Server to run applications as the user &amp;quot;shiny&amp;quot;
preserve_logs true;
sanitize_errors false;
run_as shiny;

# Define a server that listens on port 3838
server {
  listen 3838;

  # Define a location at the base URL
  location / {

    # Host the directory of Shiny Apps stored in this directory
    site_dir /srv/shiny-server;

    # Log all Shiny output to files in this directory
    log_dir /var/log/shiny-server;

    # When a user visits the base URL rather than a particular application,
    # an index of the applications available in this directory will be shown.
    directory_index on;
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;Change the owner of the &lt;strong&gt;BnaSNPDB&lt;/strong&gt; directory&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;$ chown -R shiny /srv/shiny-server/BnaSNPDB  
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;Start Shiny-Server&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;$ start shiny-server
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now you can access the &lt;strong&gt;BnaSNPDB&lt;/strong&gt; app at http://IPAddressOfYourServer:3838/BnaSNPDB.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>ttplot:Tao Yan&#39;s Plot Toolkit</title>
      <link>https://taoyan.netlify.app/project/ttplot/</link>
      <pubDate>Mon, 14 Sep 2020 00:00:00 +0000</pubDate>
      <guid>https://taoyan.netlify.app/project/ttplot/</guid>
      <description>&lt;h2 id=&#34;overview&#34;&gt;Overview&lt;/h2&gt;
&lt;p&gt;This package is just developed to finish my project. So most of scripts are &lt;strong&gt;NOT stable&lt;/strong&gt; enough. By wrapping some functions from other useful packages, it&amp;rsquo;s easy for us to finish our jobs.&lt;/p&gt;
&lt;h2 id=&#34;installation&#34;&gt;Installation&lt;/h2&gt;
&lt;p&gt;This package dependents on some other packages:
&lt;a href=&#34;https://github.com/knausb/vcfR&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;vcfR&lt;/strong&gt;&lt;/a&gt;,
&lt;a href=&#34;https://github.com/tidyverse/dplyr&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;dplyr&lt;/strong&gt;&lt;/a&gt;,
&lt;a href=&#34;https://cran.r-project.org/web/packages/genetics/index.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;genetics&lt;/strong&gt;&lt;/a&gt;,
&lt;a href=&#34;https://github.com/SFUStatgen/LDheatmap&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;LDheatmap&lt;/strong&gt;&lt;/a&gt;, &amp;hellip;&lt;/p&gt;
&lt;p&gt;The dependent packages will be installed at the time you install the package 
&lt;a href=&#34;https://github.com/YTLogos/ttplot&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;ttplot&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#install the ttplot package from Github
if(!require(devtools)) {
  install.packages(&amp;quot;devtools&amp;quot;); 
  require(devtools)
} 
devtools::install_github(&amp;quot;YTLogos/ttplot&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;usage&#34;&gt;Usage&lt;/h2&gt;
&lt;p&gt;Until now there are just several functions&lt;/p&gt;
&lt;h3 id=&#34;draw-the-ldheatmap-from-the-vcfhttpsenwikipediaorgwikivariant_call_format-format-file-plinkhttpswwwcog-genomicsorgplink2-format&#34;&gt;Draw the LDheatmap from the 
&lt;a href=&#34;https://en.wikipedia.org/wiki/Variant_Call_Format&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;VCF&lt;/strong&gt;&lt;/a&gt; format file (
&lt;a href=&#34;https://www.cog-genomics.org/plink2/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;plink&lt;/strong&gt;&lt;/a&gt; format)&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;VCF&lt;/strong&gt; (Variant Call Format) is a text file format. It contains meta-information lines, a header line, and then data lines each containing information about a position in the genome. There is an example how to draw LDheatmap from data in VCF file(&lt;strong&gt;plink&lt;/strong&gt; format). The &lt;strong&gt;VCF&lt;/strong&gt; file looks like:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#This is a test vcf file (test.vcf) 

##fileformat=VCFv4.3
##fileDate=20090805
##source=myImputationProgramV3.1
##reference=file:///seq/references/1000GenomesPilot-NCBI36.fasta
##contig=&amp;lt;ID=20,length=62435964,assembly=B36,md5=f126cdf8a6e0c7f379d618ff66beb2da,species=&amp;quot;Homo sapiens&amp;quot;,taxonomy=x&amp;gt;
##phasing=partial
##INFO=&amp;lt;ID=NS,Number=1,Type=Integer,Description=&amp;quot;Number of Samples With Data&amp;quot;&amp;gt;
##INFO=&amp;lt;ID=DP,Number=1,Type=Integer,Description=&amp;quot;Total Depth&amp;quot;&amp;gt;
##INFO=&amp;lt;ID=AF,Number=A,Type=Float,Description=&amp;quot;Allele Frequency&amp;quot;&amp;gt;
##INFO=&amp;lt;ID=AA,Number=1,Type=String,Description=&amp;quot;Ancestral Allele&amp;quot;&amp;gt;
##INFO=&amp;lt;ID=DB,Number=0,Type=Flag,Description=&amp;quot;dbSNP membership, build 129&amp;quot;&amp;gt;
##INFO=&amp;lt;ID=H2,Number=0,Type=Flag,Description=&amp;quot;HapMap2 membership&amp;quot;&amp;gt;
##FILTER=&amp;lt;ID=q10,Description=&amp;quot;Quality below 10&amp;quot;&amp;gt;
##FILTER=&amp;lt;ID=s50,Description=&amp;quot;Less than 50% of samples have data&amp;quot;&amp;gt;
##FORMAT=&amp;lt;ID=GT,Number=1,Type=String,Description=&amp;quot;Genotype&amp;quot;&amp;gt;
##FORMAT=&amp;lt;ID=GQ,Number=1,Type=Integer,Description=&amp;quot;Genotype Quality&amp;quot;&amp;gt;
##FORMAT=&amp;lt;ID=DP,Number=1,Type=Integer,Description=&amp;quot;Read Depth&amp;quot;&amp;gt;
##FORMAT=&amp;lt;ID=HQ,Number=2,Type=Integer,Description=&amp;quot;Haplotype Quality&amp;quot;&amp;gt;
#CHROM POS      ID         REF   ALT    QUAL  FILTER   INFO                             FORMAT       NA00001         NA00002          NA00003
20     14370    rs6054257  G     A      29    PASS    NS=3;DP=14;AF=0.5;DB;H2           GT:GQ:DP:HQ  0|0:48:1:51,51  1|0:48:8:51,51   1/1:43:5:.,.
20     17330    .          T     A      3     q10     NS=3;DP=11;AF=0.017               GT:GQ:DP:HQ  0|0:49:3:58,50  0|1:3:5:65,3     0/0:41:3
20     1110696  rs6040355  A     G,T    67    PASS    NS=2;DP=10;AF=0.333,0.667;AA=T;DB GT:GQ:DP:HQ  1|2:21:6:23,27  2|1:2:0:18,2     2/2:35:4
20     1230237  .          T     .      47    PASS    NS=3;DP=13;AA=T                   GT:GQ:DP:HQ  0|0:54:7:56,60  0|0:48:4:51,51   0/0:61:2
20     1234567  microsat1  GTC   G,GTCT 50    PASS    NS=3;DP=9;AA=G                    GT:GQ:DP     0/1:35:4        0/2:17:2         1/1:40:3
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This kind of &lt;strong&gt;VCF&lt;/strong&gt; is very large, so first we can use &lt;strong&gt;plink&lt;/strong&gt; to recode the &lt;strong&gt;VCF&lt;/strong&gt; file&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ plink --vcf test.vcf --recode vcf-iid --out Test -allow-extra-chr
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So the final &lt;strong&gt;VCF&lt;/strong&gt; file we will use looks likeï¼&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;##fileformat=VCFv4.2
##fileDate=20180905
##source=PLINKv1.90
##contig=&amp;lt;ID=chrC07,length=31087537&amp;gt;
##INFO=&amp;lt;ID=PR,Number=0,Type=Flag,Description=&amp;quot;Provisional reference allele, may not be based on real reference genome&amp;quot;&amp;gt;
##FORMAT=&amp;lt;ID=GT,Number=1,Type=String,Description=&amp;quot;Genotype&amp;quot;&amp;gt;
#CHROM	POS	ID	REF	ALT	QUAL	FILTER	INFO	FORMAT	R4157	R4158
chrC07	31076164	.	T	G	.	.	PR	GT	0/0	0/1
chrC07	31076273	.	G	A	.	.	PR	GT	0/0	0/1
chrC07	31076306	.	G	T	.	.	PR	GT	0/0	0/0
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In the &lt;code&gt;extdata&lt;/code&gt; directory there is one test file: &lt;code&gt;test.vcf&lt;/code&gt;. We can test the function:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;library(ttplot)
test &amp;lt;- system.file(&amp;quot;extdata&amp;quot;, &amp;quot;test.vcf&amp;quot;, package = &amp;quot;ttplot&amp;quot;)
ttplot::MyLDheatMap(vcffile = test, title = &amp;quot;My gene region&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/Pic_blog/master/LDheatmap.png&#34; alt=&#34;LDheatmap&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;more&#34;&gt;More&lt;/h3&gt;
&lt;h4 id=&#34;usage-1&#34;&gt;&lt;strong&gt;Usage:&lt;/strong&gt;&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;MyLDheatMap(vcffile, file.output = TRUE, file = &amp;quot;png&amp;quot;,
  output = &amp;quot;region&amp;quot;, title = &amp;quot;region:&amp;quot;, verbose = TRUE, dpi = 300)
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;arguments&#34;&gt;Arguments&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;vcffile:&lt;/strong&gt; The plink format vcf file. More detail can see &lt;code&gt;View(test_vcf)&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;file.output:&lt;/strong&gt; a logical, if &lt;code&gt;file.output=TRUE&lt;/code&gt;, the result will be saved. if &lt;code&gt;file.output=FALSE&lt;/code&gt;, the result will be printed. The default is &lt;code&gt;TRUE&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;file:&lt;/strong&gt; a character, users can choose the different output formats of plot, so far, &lt;strong&gt;&amp;ldquo;jpeg&amp;rdquo;&lt;/strong&gt;, &lt;strong&gt;&amp;ldquo;pdf&amp;rdquo;&lt;/strong&gt;, &lt;strong&gt;&amp;ldquo;png&amp;rdquo;&lt;/strong&gt;, &lt;strong&gt;&amp;ldquo;tiff&amp;rdquo;&lt;/strong&gt; can be selected by users. The default is &lt;strong&gt;&amp;ldquo;png&amp;rdquo;&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;title:&lt;/strong&gt;	a character, the title of the LDheatmap will be &amp;ldquo;The LDheatmap of title&amp;rdquo;. the default is &amp;ldquo;region:&amp;rdquo;. I suggest users use your own title.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;verbose:&lt;/strong&gt;	whether to print the reminder.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;dpi:&lt;/strong&gt;	a number, the picture element for &lt;strong&gt;.jpeg&lt;/strong&gt;, &lt;strong&gt;.png&lt;/strong&gt; and &lt;strong&gt;.tiff&lt;/strong&gt; files. The default is &lt;code&gt;300&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;ggmanhattan-make-manhattan-plot-based-on-ggplot2&#34;&gt;ggmanhattan(): make manhattan plot based on &lt;strong&gt;ggplot2&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Here, we will use the data &lt;code&gt;gwasResults&lt;/code&gt; from R package 
&lt;a href=&#34;https://github.com/stephenturner/qqman&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;qqman&lt;/strong&gt;&lt;/a&gt;. This function is provided to make manhattan plot with full ggplot customizability. So next we can customize the manhattan plot with kinds of functions of &lt;strong&gt;ggplot2&lt;/strong&gt; and add additional layers. The data need be reshaped as following:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt; head(gwasResults)
  SNP CHR BP         P
1 rs1   1  1 0.9148060
2 rs2   1  2 0.9370754
3 rs3   1  3 0.2861395
4 rs4   1  4 0.8304476
5 rs5   1  5 0.6417455
6 rs6   1  6 0.5190959
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then use the function &lt;code&gt;ggmanhattan&lt;/code&gt; from 
&lt;a href=&#34;https://github.com/YTLogos/ttplot&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;ttplot&lt;/strong&gt;&lt;/a&gt; to make a manhattan plot:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ttplot::ggmanhattan(gwasResults)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YTLogos/Pic_blog/master/The%20Manhattan%20Plot%20of%20gwas.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;more-1&#34;&gt;More&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;ggmanhattan(gwasres, snp = NA, bp = NA, chrom = NA, pvalue = NA,
  index = NA, file.output = FALSE, file = &amp;quot;png&amp;quot;, output = &amp;quot;Trait&amp;quot;,
  dpi = 300, vlinetype = &amp;quot;solid&amp;quot;, vlinesize = 0.75,
  title = &amp;quot;Manhattan Plot&amp;quot;, color = c(&amp;quot;#FF8C00&amp;quot;, &amp;quot;#556B2F&amp;quot;),
  pointsize = 1.25, verbose = TRUE, ...)
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;arguments-1&#34;&gt;Arguments&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;gwasres&lt;/strong&gt;	a data frame of gwas results.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;snp&lt;/strong&gt;	Name of the column containing &lt;code&gt;SNP&lt;/code&gt; identifiers; default is &amp;lsquo;snp&amp;rsquo;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;bp&lt;/strong&gt;	Name of the column containing the &lt;code&gt;SNP&lt;/code&gt; positions; default is &lt;code&gt;&#39;bp&#39;&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;chrom&lt;/strong&gt;	Name of the column containing the chromosome identifers; default is &lt;code&gt;&#39;chrom&#39;&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;pvalue&lt;/strong&gt;	Name of the column containing the p values; default is &lt;code&gt;&#39;pvalue&#39;&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;file.output&lt;/strong&gt;	a logical, if file.output=&lt;code&gt;TRUE&lt;/code&gt;, the result will be saved. if file.output=&lt;code&gt;FALSE&lt;/code&gt;, the result will be printed. The default is &lt;code&gt;TRUE&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;file&lt;/strong&gt;	a character, users can choose the different output formats of plot, so far, &lt;code&gt;&amp;quot;jpeg&amp;quot;&lt;/code&gt;, &lt;code&gt;&amp;quot;pdf&amp;quot;&lt;/code&gt;, &lt;code&gt;&amp;quot;png&amp;quot;&lt;/code&gt;, &lt;code&gt;&amp;quot;tiff&amp;quot;&lt;/code&gt; can be selected by users. The default is &lt;code&gt;&amp;quot;png&amp;quot;&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;dpi&lt;/strong&gt;	a number, the picture element for .jpeg, .png and .tiff files. The default is 300.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;vlinetype&lt;/strong&gt;	the type of vline (&lt;code&gt;geom_vline()&lt;/code&gt;). The default is &lt;code&gt;&amp;quot;solid&amp;quot;&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;vlinesize&lt;/strong&gt;	the size of the vline. The default is 0.75.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;title&lt;/strong&gt;	the title of manhattan plot. The default is &lt;code&gt;&amp;quot;Manhattan Plot&amp;quot;&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;color&lt;/strong&gt;	the colors of alternate chromosome. The default is c(&lt;code&gt;&amp;quot;#FF8C00&amp;quot;&lt;/code&gt;, &lt;code&gt;&amp;quot;#556B2F&amp;quot;&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;pointsize&lt;/strong&gt;	the size of point. The default is 1.25.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;get-genes-bsaed-on-the-locations-of-significant-snps&#34;&gt;Get genes bsaed on the locations of significant SNPs&lt;/h2&gt;
&lt;p&gt;This function need two input files: gff, snp.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;library(ttplot)
gff &amp;lt;- read.table(system.file(&amp;quot;extdata&amp;quot;, &amp;quot;test.gff&amp;quot;, package = &amp;quot;ttplot&amp;quot;), header= TRUE)
head(gff)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;chr  start    end          gene
1 436789 437474 chrA01g000077
1 439907 442623 chrA01g000078
1 448692 449999 chrA01g000079
1 454920 456931 chrA01g000080
1 457568 460619 chrA01g000081
1 461129 462693 chrA01g000082
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;snp &amp;lt;- read.table(system.file(&amp;quot;extdata&amp;quot;, &amp;quot;test_sig_snp.txt&amp;quot;, package = &amp;quot;ttplot&amp;quot;), header= TRUE)
head(snp)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;SNP CHR       BP        P
1_500000   1   500000 5.53e-11
1_650000   1   650000 7.04e-09
2_1880000   2  1880000 3.84e-09
3_30500000   3 30500000 7.57e-08
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then we can get the candidate genes in regions based on significant SNPs of GWAS results.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ttplot::get_gene_from_snp(gff = gff, sig.snp = snp, distance = 20000, file.save = FALSE)
The distance you choose is 20000bp!
You have 4 significant SNPs and 130 genes!
Now we will extract the genes in the significant regions! This will need some time, please wait for severals minutes! ...
                                 
The result is : 
-------------------------------------------------------------
# A tibble: 9 x 5
chrom geneid        gene_start gene_end snp_location
&amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt;              &amp;lt;dbl&amp;gt;    &amp;lt;dbl&amp;gt;        &amp;lt;dbl&amp;gt;
1 chrA01g000088     479923   485997       500000
1 chrA01g000089     495531   497917       500000
1 chrA01g000090     498488   499689       500000
1 chrA01g000091     499749   501301       500000
1 chrA01g000092     503622   507079       500000
1 chrA01g000093     507659   510321       500000
1 chrA01g000094     515103   516863       500000
1 chrA01g000095     517335   518776       500000
1 chrA01g000096     519020   520668       500000
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;more-2&#34;&gt;More&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;Usage
get_gene_from_snp(gff, sig.snp, distance = 50000, file.save = TRUE,
  file.type = &amp;quot;csv&amp;quot;, gff.chrom = NA, snp.chrom = NA, geneid = NA,
  pvalue = NA, gene_start = NA, gene_end = NA, snp_location = NA,
  verbose = TRUE, ...)
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;arguments-2&#34;&gt;Arguments&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;gff: a data frame of all the gene (transcript), must have column names.&lt;/li&gt;
&lt;li&gt;sig.snp: a data frame of significant SNPs.&lt;/li&gt;
&lt;li&gt;distance: numeric (bp), it is to define the region. The default is 50000, you need to choose it based on the LD distance in your study.&lt;/li&gt;
&lt;li&gt;file.save:	a logical, if file.output=TRUE, the result will be saved. if file.output=FALSE, the result will be printed. The default is TRUE.&lt;/li&gt;
&lt;li&gt;file.type: a character, users can choose the different output formats, so far, &amp;ldquo;csv&amp;rdquo;, &amp;ldquo;txt&amp;rdquo;, &amp;ldquo;xlsx&amp;rdquo; can be selected by users. The default is &amp;ldquo;csv&amp;rdquo;.&lt;/li&gt;
&lt;li&gt;gff.chrom: Name of the column containing the chromosome identifers in the gff file; default is NA.&lt;/li&gt;
&lt;li&gt;snp.chrom: Name of the column containing the chromosome identifers in the snp.sig file; default is NA.&lt;/li&gt;
&lt;li&gt;geneid: Name of the column containing the geneid in gff file; default is NA.&lt;/li&gt;
&lt;li&gt;pvalue: Name of the column containing the p values in snp.sig file; default is NA.&lt;/li&gt;
&lt;li&gt;snp_location: Name of the column containing the snp position in snp.sig file; default is NA.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Genome-wide association study reveals new genes involvedin leaf trichome formation in polyploid oilseed rape(Brassica napus L.)</title>
      <link>https://taoyan.netlify.app/publication/2019-xuan-hair/</link>
      <pubDate>Tue, 31 Dec 2019 00:00:00 +0000</pubDate>
      <guid>https://taoyan.netlify.app/publication/2019-xuan-hair/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Whole-Genome Resequencing of a Worldwide Collection of Rapeseed Accessions Reveals the Genetic Basis of Ecotype Divergence</title>
      <link>https://taoyan.netlify.app/publication/2019-wu-rapeseed-pop/</link>
      <pubDate>Tue, 31 Dec 2019 00:00:00 +0000</pubDate>
      <guid>https://taoyan.netlify.app/publication/2019-wu-rapeseed-pop/</guid>
      <description></description>
    </item>
    
    <item>
      <title>TRANSPARENT TESTA 4âmediated flavonoids negatively affect embryonic fatty acid biosynthesis in Arabidopsis</title>
      <link>https://taoyan.netlify.app/publication/2018-xuan-fatty-acid/</link>
      <pubDate>Sat, 07 Jul 2018 00:00:00 +0000</pubDate>
      <guid>https://taoyan.netlify.app/publication/2018-xuan-fatty-acid/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Effect of high night temperature on storage lipids and transcriptome changes in developing seeds of oilseed rape</title>
      <link>https://taoyan.netlify.app/publication/2018-zhou-rapeseed-night-temp-fatty-acid/</link>
      <pubDate>Wed, 03 Jan 2018 00:00:00 +0000</pubDate>
      <guid>https://taoyan.netlify.app/publication/2018-zhou-rapeseed-night-temp-fatty-acid/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>
